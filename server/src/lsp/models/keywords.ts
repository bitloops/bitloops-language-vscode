export const components = {
  UseCase: 'UseCase',
  DTO: 'DTO',
  Rule: 'Rule',
  Struct: 'Struct',
  Props: 'Props',
  ValueObject: 'ValueObject',
  DomainError: 'DomainError',
  ApplicationError: 'ApplicationError',
  Entity: 'Entity',
  PackagePort: 'PackagePort',
  Command: 'Command',
  Query: 'Query',
  DomainEvent: 'DomainEvent',
  IntegrationEvent: 'IntegrationEvent',
  DomainService: 'DomainService',
};

export const keywords = [
  'optional',
  'break',
  'do',
  'instanceof',
  'typeof',
  'case',
  'else',
  'catch',
  'finally',
  'return',
  'void',
  'continue',
  'for',
  'switch',
  'while',
  'debugger',
  'function',
  'this',
  'with',
  'default',
  'if',
  'throw',
  'in',
  'try',
  'readonly',
  'async',
  'throws',
  'applyRules',

  'extends',
  'super',
  'const',
  'RepoPort',
  'Props',
  'ReadModel',
  'DTO',
  'RESTController',
  'GraphQLController',
  'GRPCController',
  'UseCase',
  'ValueObject',
  'AggregateRoot',
  'Entity',
  'DomainEvent',
  'Service',
  'Repository',
  'Factory',
  'DomainError',
  'ApplicationError',
  'DomainErrors',
  'ApplicationErrors',
  'OK',
  'Errors',
  'Config',
  'PackagePort',
  'VO',
  'Rule',
  'isBrokenIf',
  'Root',
  'constructor',
  /// when parsing strict mode

  // Implements:                     'implements' ;
  'let',
  'private',
  'public',
  'interface',
  'package',
  'protected',
  'static',
  // Yield:                          'yield' ;

  //keywords:

  'any',
  'double',
  'float',
  'int32',
  'int64',
  'uint32',
  'uint64',
  'sint32',
  'sint64',
  'fixed32',
  'fixed64',
  'sfixed32',
  'sfixed64',
  'bool',
  'string',
  'bytes',
  'timestamp',
  'Struct',

  'execute',
  'create',

  'UUIDv4',

  'is',
  'getClass',
  'toString',
  'DomainEvent',
  'IntegrationEvent',
  'DomainService',

  'StandardVO',
];

// 'StandardVO',
export const allKeywords = Array.from(new Set([...Object.values(components), ...keywords]));
