export default class BitloopsParserListener extends antlr4.tree.ParseTreeListener {
    enterInitializer(ctx: any): void;
    exitInitializer(ctx: any): void;
    enterBindingPattern(ctx: any): void;
    exitBindingPattern(ctx: any): void;
    enterFieldList(ctx: any): void;
    exitFieldList(ctx: any): void;
    enterEvaluationFieldList(ctx: any): void;
    exitEvaluationFieldList(ctx: any): void;
    enterEvaluationField(ctx: any): void;
    exitEvaluationField(ctx: any): void;
    enterPropFields(ctx: any): void;
    exitPropFields(ctx: any): void;
    enterPropsIdentifier(ctx: any): void;
    exitPropsIdentifier(ctx: any): void;
    enterBitloopsIdentifiers(ctx: any): void;
    exitBitloopsIdentifiers(ctx: any): void;
    enterPrimitives(ctx: any): void;
    exitPrimitives(ctx: any): void;
    enterIdentifier(ctx: any): void;
    exitIdentifier(ctx: any): void;
    enterUpperCaseIdentifier(ctx: any): void;
    exitUpperCaseIdentifier(ctx: any): void;
    enterStruct(ctx: any): void;
    exitStruct(ctx: any): void;
    enterRegularErrorTypeEvaluation(ctx: any): void;
    exitRegularErrorTypeEvaluation(ctx: any): void;
    enterMethodArguments(ctx: any): void;
    exitMethodArguments(ctx: any): void;
    enterOpenParen(ctx: any): void;
    exitOpenParen(ctx: any): void;
    enterCloseParen(ctx: any): void;
    exitCloseParen(ctx: any): void;
    enterIdentifierString(ctx: any): void;
    exitIdentifierString(ctx: any): void;
    enterRegularDTOEvaluationString(ctx: any): void;
    exitRegularDTOEvaluationString(ctx: any): void;
    enterRegularStructEvaluationString(ctx: any): void;
    exitRegularStructEvaluationString(ctx: any): void;
    enterRegularErrorTypeEvaluationString(ctx: any): void;
    exitRegularErrorTypeEvaluationString(ctx: any): void;
    enterExecuteExpression(ctx: any): void;
    exitExecuteExpression(ctx: any): void;
    enterDeleteKeyword(ctx: any): void;
    exitDeleteKeyword(ctx: any): void;
    enterRegularStringEvaluation(ctx: any): void;
    exitRegularStringEvaluation(ctx: any): void;
    enterRegularIntegerEvaluation(ctx: any): void;
    exitRegularIntegerEvaluation(ctx: any): void;
    enterRegularDecimalEvaluation(ctx: any): void;
    exitRegularDecimalEvaluation(ctx: any): void;
    enterRegularBooleanEvaluation(ctx: any): void;
    exitRegularBooleanEvaluation(ctx: any): void;
    enterRegularStructEvaluation(ctx: any): void;
    exitRegularStructEvaluation(ctx: any): void;
    enterRegularDTOEvaluation(ctx: any): void;
    exitRegularDTOEvaluation(ctx: any): void;
    enterField(ctx: any): void;
    exitField(ctx: any): void;
    enterPrimitivePrimType(ctx: any): void;
    exitPrimitivePrimType(ctx: any): void;
    enterArrayBitloopsPrimType(ctx: any): void;
    exitArrayBitloopsPrimType(ctx: any): void;
    enterBitloopsBuiltInClassPrimType(ctx: any): void;
    exitBitloopsBuiltInClassPrimType(ctx: any): void;
    enterBitloopsIdentifierPrimType(ctx: any): void;
    exitBitloopsIdentifierPrimType(ctx: any): void;
    enterBitloopsBuiltInClass(ctx: any): void;
    exitBitloopsBuiltInClass(ctx: any): void;
    enterPredefinedType(ctx: any): void;
    exitPredefinedType(ctx: any): void;
    enterTypeName(ctx: any): void;
    exitTypeName(ctx: any): void;
    enterMethodDefinitionList(ctx: any): void;
    exitMethodDefinitionList(ctx: any): void;
    enterMethodDefinition(ctx: any): void;
    exitMethodDefinition(ctx: any): void;
    enterTypeQuery(ctx: any): void;
    exitTypeQuery(ctx: any): void;
    enterTypeQueryExpression(ctx: any): void;
    exitTypeQueryExpression(ctx: any): void;
    enterTypeAnnotation(ctx: any): void;
    exitTypeAnnotation(ctx: any): void;
    enterParameterList(ctx: any): void;
    exitParameterList(ctx: any): void;
    enterRequiredParameterList(ctx: any): void;
    exitRequiredParameterList(ctx: any): void;
    enterParameter(ctx: any): void;
    exitParameter(ctx: any): void;
    enterOptionalParameter(ctx: any): void;
    exitOptionalParameter(ctx: any): void;
    enterRestParameter(ctx: any): void;
    exitRestParameter(ctx: any): void;
    enterRequiredParameter(ctx: any): void;
    exitRequiredParameter(ctx: any): void;
    enterAccessibilityModifier(ctx: any): void;
    exitAccessibilityModifier(ctx: any): void;
    enterIdentifierOrPattern(ctx: any): void;
    exitIdentifierOrPattern(ctx: any): void;
    enterIndexSignature(ctx: any): void;
    exitIndexSignature(ctx: any): void;
    enterEnumBody(ctx: any): void;
    exitEnumBody(ctx: any): void;
    enterEnumMemberList(ctx: any): void;
    exitEnumMemberList(ctx: any): void;
    enterEnumMember(ctx: any): void;
    exitEnumMember(ctx: any): void;
    enterNamespaceDeclaration(ctx: any): void;
    exitNamespaceDeclaration(ctx: any): void;
    enterNamespaceName(ctx: any): void;
    exitNamespaceName(ctx: any): void;
    enterImportAliasDeclaration(ctx: any): void;
    exitImportAliasDeclaration(ctx: any): void;
    enterDecoratorList(ctx: any): void;
    exitDecoratorList(ctx: any): void;
    enterDecorator(ctx: any): void;
    exitDecorator(ctx: any): void;
    enterDecoratorMemberExpression(ctx: any): void;
    exitDecoratorMemberExpression(ctx: any): void;
    enterDecoratorCallExpression(ctx: any): void;
    exitDecoratorCallExpression(ctx: any): void;
    enterProgram(ctx: any): void;
    exitProgram(ctx: any): void;
    enterSourceElement(ctx: any): void;
    exitSourceElement(ctx: any): void;
    enterJestTestDeclaration(ctx: any): void;
    exitJestTestDeclaration(ctx: any): void;
    enterErrorEvaluation(ctx: any): void;
    exitErrorEvaluation(ctx: any): void;
    enterEvaluation(ctx: any): void;
    exitEvaluation(ctx: any): void;
    enterCondition(ctx: any): void;
    exitCondition(ctx: any): void;
    enterReturnStatement(ctx: any): void;
    exitReturnStatement(ctx: any): void;
    enterConstDeclaration(ctx: any): void;
    exitConstDeclaration(ctx: any): void;
    enterVariableDeclaration(ctx: any): void;
    exitVariableDeclaration(ctx: any): void;
    enterStatement(ctx: any): void;
    exitStatement(ctx: any): void;
    enterApplyRulesStatement(ctx: any): void;
    exitApplyRulesStatement(ctx: any): void;
    enterApplyRuleStatementRulesList(ctx: any): void;
    exitApplyRuleStatementRulesList(ctx: any): void;
    enterApplyRulesRule(ctx: any): void;
    exitApplyRulesRule(ctx: any): void;
    enterBlock(ctx: any): void;
    exitBlock(ctx: any): void;
    enterStatementList(ctx: any): void;
    exitStatementList(ctx: any): void;
    enterFromBlock(ctx: any): void;
    exitFromBlock(ctx: any): void;
    enterMultipleImportStatement(ctx: any): void;
    exitMultipleImportStatement(ctx: any): void;
    enterVariableDeclarationList(ctx: any): void;
    exitVariableDeclarationList(ctx: any): void;
    enterEmptyStatement_(ctx: any): void;
    exitEmptyStatement_(ctx: any): void;
    enterExpressionStatement(ctx: any): void;
    exitExpressionStatement(ctx: any): void;
    enterIfStatement(ctx: any): void;
    exitIfStatement(ctx: any): void;
    enterDoStatement(ctx: any): void;
    exitDoStatement(ctx: any): void;
    enterWhileStatement(ctx: any): void;
    exitWhileStatement(ctx: any): void;
    enterForStatement(ctx: any): void;
    exitForStatement(ctx: any): void;
    enterForVarStatement(ctx: any): void;
    exitForVarStatement(ctx: any): void;
    enterForInStatement(ctx: any): void;
    exitForInStatement(ctx: any): void;
    enterForVarInStatement(ctx: any): void;
    exitForVarInStatement(ctx: any): void;
    enterVarModifier(ctx: any): void;
    exitVarModifier(ctx: any): void;
    enterContinueStatement(ctx: any): void;
    exitContinueStatement(ctx: any): void;
    enterBreakStatement(ctx: any): void;
    exitBreakStatement(ctx: any): void;
    enterWithStatement(ctx: any): void;
    exitWithStatement(ctx: any): void;
    enterSwitchStatement(ctx: any): void;
    exitSwitchStatement(ctx: any): void;
    enterCaseBlock(ctx: any): void;
    exitCaseBlock(ctx: any): void;
    enterCaseClauses(ctx: any): void;
    exitCaseClauses(ctx: any): void;
    enterCaseClause(ctx: any): void;
    exitCaseClause(ctx: any): void;
    enterDefaultClause(ctx: any): void;
    exitDefaultClause(ctx: any): void;
    enterLabelledStatement(ctx: any): void;
    exitLabelledStatement(ctx: any): void;
    enterThrowStatement(ctx: any): void;
    exitThrowStatement(ctx: any): void;
    enterTryStatement(ctx: any): void;
    exitTryStatement(ctx: any): void;
    enterCatchProduction(ctx: any): void;
    exitCatchProduction(ctx: any): void;
    enterFinallyProduction(ctx: any): void;
    exitFinallyProduction(ctx: any): void;
    enterDebuggerStatement(ctx: any): void;
    exitDebuggerStatement(ctx: any): void;
    enterDomainFieldDeclaration(ctx: any): void;
    exitDomainFieldDeclaration(ctx: any): void;
    enterIsBrokenStatement(ctx: any): void;
    exitIsBrokenStatement(ctx: any): void;
    enterDomainRuleBody(ctx: any): void;
    exitDomainRuleBody(ctx: any): void;
    enterDomainRuleDeclaration(ctx: any): void;
    exitDomainRuleDeclaration(ctx: any): void;
    enterAggregateDeclaration(ctx: any): void;
    exitAggregateDeclaration(ctx: any): void;
    enterDomainConstDeclaration(ctx: any): void;
    exitDomainConstDeclaration(ctx: any): void;
    enterEntityDeclaration(ctx: any): void;
    exitEntityDeclaration(ctx: any): void;
    enterEntityBody(ctx: any): void;
    exitEntityBody(ctx: any): void;
    enterValueObjectDeclaration(ctx: any): void;
    exitValueObjectDeclaration(ctx: any): void;
    enterDomainConstDeclarationList(ctx: any): void;
    exitDomainConstDeclarationList(ctx: any): void;
    enterPublicMethodDeclarationList(ctx: any): void;
    exitPublicMethodDeclarationList(ctx: any): void;
    enterPrivateMethodDeclarationList(ctx: any): void;
    exitPrivateMethodDeclarationList(ctx: any): void;
    enterDomainConstructorDeclaration(ctx: any): void;
    exitDomainConstructorDeclaration(ctx: any): void;
    enterUseCaseIdentifier(ctx: any): void;
    exitUseCaseIdentifier(ctx: any): void;
    enterUseCaseDeclaration(ctx: any): void;
    exitUseCaseDeclaration(ctx: any): void;
    enterPropsDeclaration(ctx: any): void;
    exitPropsDeclaration(ctx: any): void;
    enterReadModelDeclaration(ctx: any): void;
    exitReadModelDeclaration(ctx: any): void;
    enterRepoPortDeclaration(ctx: any): void;
    exitRepoPortDeclaration(ctx: any): void;
    enterRepoPortIdentifier(ctx: any): void;
    exitRepoPortIdentifier(ctx: any): void;
    enterAggregateRootIdentifier(ctx: any): void;
    exitAggregateRootIdentifier(ctx: any): void;
    enterRepoExtendsList(ctx: any): void;
    exitRepoExtendsList(ctx: any): void;
    enterRepoPortMethodDefinitions(ctx: any): void;
    exitRepoPortMethodDefinitions(ctx: any): void;
    enterRepoPortExtendableIdentifierList(ctx: any): void;
    exitRepoPortExtendableIdentifierList(ctx: any): void;
    enterRepoPortExtendableIdentifier(ctx: any): void;
    exitRepoPortExtendableIdentifier(ctx: any): void;
    enterDtoDeclaration(ctx: any): void;
    exitDtoDeclaration(ctx: any): void;
    enterStructDeclaration(ctx: any): void;
    exitStructDeclaration(ctx: any): void;
    enterDtoEvaluationIdentifier(ctx: any): void;
    exitDtoEvaluationIdentifier(ctx: any): void;
    enterDtoEvaluation(ctx: any): void;
    exitDtoEvaluation(ctx: any): void;
    enterValueObjectEvaluation(ctx: any): void;
    exitValueObjectEvaluation(ctx: any): void;
    enterDomainEvaluationInputFieldList(ctx: any): void;
    exitDomainEvaluationInputFieldList(ctx: any): void;
    enterDomainEvaluationInputRegular(ctx: any): void;
    exitDomainEvaluationInputRegular(ctx: any): void;
    enterEntityEvaluation(ctx: any): void;
    exitEntityEvaluation(ctx: any): void;
    enterStructEvaluationIdentifier(ctx: any): void;
    exitStructEvaluationIdentifier(ctx: any): void;
    enterStructEvaluation(ctx: any): void;
    exitStructEvaluation(ctx: any): void;
    enterBuiltInClassEvaluation(ctx: any): void;
    exitBuiltInClassEvaluation(ctx: any): void;
    enterPropsEvaluation(ctx: any): void;
    exitPropsEvaluation(ctx: any): void;
    enterDomainErrorDeclaration(ctx: any): void;
    exitDomainErrorDeclaration(ctx: any): void;
    enterApplicationErrorDeclaration(ctx: any): void;
    exitApplicationErrorDeclaration(ctx: any): void;
    enterDomainErrorIdentifier(ctx: any): void;
    exitDomainErrorIdentifier(ctx: any): void;
    enterApplicationErrorIdentifier(ctx: any): void;
    exitApplicationErrorIdentifier(ctx: any): void;
    enterUseCaseExecuteDeclaration(ctx: any): void;
    exitUseCaseExecuteDeclaration(ctx: any): void;
    enterRestControllerParameters(ctx: any): void;
    exitRestControllerParameters(ctx: any): void;
    enterRestControllerExecuteDeclaration(ctx: any): void;
    exitRestControllerExecuteDeclaration(ctx: any): void;
    enterRestControllerMethodDeclaration(ctx: any): void;
    exitRestControllerMethodDeclaration(ctx: any): void;
    enterHttpMethod(ctx: any): void;
    exitHttpMethod(ctx: any): void;
    enterRESTControllerDeclaration(ctx: any): void;
    exitRESTControllerDeclaration(ctx: any): void;
    enterGraphQLControllerDeclaration(ctx: any): void;
    exitGraphQLControllerDeclaration(ctx: any): void;
    enterGraphQLResolverOptions(ctx: any): void;
    exitGraphQLResolverOptions(ctx: any): void;
    enterGraphQLOperationTypeAssignment(ctx: any): void;
    exitGraphQLOperationTypeAssignment(ctx: any): void;
    enterGraphQLOperationInputTypeAssignment(ctx: any): void;
    exitGraphQLOperationInputTypeAssignment(ctx: any): void;
    enterGraphQLResolverInputType(ctx: any): void;
    exitGraphQLResolverInputType(ctx: any): void;
    enterGraphQLOperation(ctx: any): void;
    exitGraphQLOperation(ctx: any): void;
    enterGraphQLControllerExecuteDeclaration(ctx: any): void;
    exitGraphQLControllerExecuteDeclaration(ctx: any): void;
    enterGraphQLControllerParameters(ctx: any): void;
    exitGraphQLControllerParameters(ctx: any): void;
    enterGraphQLControllerReturnType(ctx: any): void;
    exitGraphQLControllerReturnType(ctx: any): void;
    enterDtoIdentifier(ctx: any): void;
    exitDtoIdentifier(ctx: any): void;
    enterDtoIdentifiers(ctx: any): void;
    exitDtoIdentifiers(ctx: any): void;
    enterErrorIdentifier(ctx: any): void;
    exitErrorIdentifier(ctx: any): void;
    enterErrorIdentifiers(ctx: any): void;
    exitErrorIdentifiers(ctx: any): void;
    enterValueObjectIdentifier(ctx: any): void;
    exitValueObjectIdentifier(ctx: any): void;
    enterEntityIdentifier(ctx: any): void;
    exitEntityIdentifier(ctx: any): void;
    enterDomainRuleIdentifier(ctx: any): void;
    exitDomainRuleIdentifier(ctx: any): void;
    enterReturnOkType(ctx: any): void;
    exitReturnOkType(ctx: any): void;
    enterReturnErrorsType(ctx: any): void;
    exitReturnErrorsType(ctx: any): void;
    enterReturnOkErrorType(ctx: any): void;
    exitReturnOkErrorType(ctx: any): void;
    enterPackagePortIdentifier(ctx: any): void;
    exitPackagePortIdentifier(ctx: any): void;
    enterPackagePortDeclaration(ctx: any): void;
    exitPackagePortDeclaration(ctx: any): void;
    enterPublicMethodDeclarationExpression(ctx: any): void;
    exitPublicMethodDeclarationExpression(ctx: any): void;
    enterPrivateMethodDeclarationExpression(ctx: any): void;
    exitPrivateMethodDeclarationExpression(ctx: any): void;
    enterPrivateMethodDeclaration(ctx: any): void;
    exitPrivateMethodDeclaration(ctx: any): void;
    enterPublicMethodDeclaration(ctx: any): void;
    exitPublicMethodDeclaration(ctx: any): void;
    enterReturnPublicMethodType(ctx: any): void;
    exitReturnPublicMethodType(ctx: any): void;
    enterReturnPrivateMethodType(ctx: any): void;
    exitReturnPrivateMethodType(ctx: any): void;
    enterPropertyMemberBase(ctx: any): void;
    exitPropertyMemberBase(ctx: any): void;
    enterIndexMemberDeclaration(ctx: any): void;
    exitIndexMemberDeclaration(ctx: any): void;
    enterGeneratorMethod(ctx: any): void;
    exitGeneratorMethod(ctx: any): void;
    enterGeneratorFunctionDeclaration(ctx: any): void;
    exitGeneratorFunctionDeclaration(ctx: any): void;
    enterGeneratorBlock(ctx: any): void;
    exitGeneratorBlock(ctx: any): void;
    enterGeneratorDefinition(ctx: any): void;
    exitGeneratorDefinition(ctx: any): void;
    enterIteratorBlock(ctx: any): void;
    exitIteratorBlock(ctx: any): void;
    enterIteratorDefinition(ctx: any): void;
    exitIteratorDefinition(ctx: any): void;
    enterFormalParameterList(ctx: any): void;
    exitFormalParameterList(ctx: any): void;
    enterFormalParameterArg(ctx: any): void;
    exitFormalParameterArg(ctx: any): void;
    enterLastFormalParameterArg(ctx: any): void;
    exitLastFormalParameterArg(ctx: any): void;
    enterFunctionBody(ctx: any): void;
    exitFunctionBody(ctx: any): void;
    enterArrayLiteral(ctx: any): void;
    exitArrayLiteral(ctx: any): void;
    enterElementList(ctx: any): void;
    exitElementList(ctx: any): void;
    enterObjectLiteral(ctx: any): void;
    exitObjectLiteral(ctx: any): void;
    enterRegularVariableEvaluationORliteralORexpression(ctx: any): void;
    exitRegularVariableEvaluationORliteralORexpression(ctx: any): void;
    enterPropertyExpressionAssignment(ctx: any): void;
    exitPropertyExpressionAssignment(ctx: any): void;
    enterComputedPropertyExpressionAssignment(ctx: any): void;
    exitComputedPropertyExpressionAssignment(ctx: any): void;
    enterPropertyGetter(ctx: any): void;
    exitPropertyGetter(ctx: any): void;
    enterPropertySetter(ctx: any): void;
    exitPropertySetter(ctx: any): void;
    enterMethodProperty(ctx: any): void;
    exitMethodProperty(ctx: any): void;
    enterPropertyShorthand(ctx: any): void;
    exitPropertyShorthand(ctx: any): void;
    enterRestParameterInObject(ctx: any): void;
    exitRestParameterInObject(ctx: any): void;
    enterGetAccessor(ctx: any): void;
    exitGetAccessor(ctx: any): void;
    enterSetAccessor(ctx: any): void;
    exitSetAccessor(ctx: any): void;
    enterPropertyName(ctx: any): void;
    exitPropertyName(ctx: any): void;
    enterArguments(ctx: any): void;
    exitArguments(ctx: any): void;
    enterArgumentList(ctx: any): void;
    exitArgumentList(ctx: any): void;
    enterArgument(ctx: any): void;
    exitArgument(ctx: any): void;
    enterExpressionSequence(ctx: any): void;
    exitExpressionSequence(ctx: any): void;
    enterFunctionExpressionDeclaration(ctx: any): void;
    exitFunctionExpressionDeclaration(ctx: any): void;
    enterParenthesizedExpression(ctx: any): void;
    exitParenthesizedExpression(ctx: any): void;
    enterToStringExpression(ctx: any): void;
    exitToStringExpression(ctx: any): void;
    enterAdditiveExpression(ctx: any): void;
    exitAdditiveExpression(ctx: any): void;
    enterRelationalExpression(ctx: any): void;
    exitRelationalExpression(ctx: any): void;
    enterLogicalAndExpression(ctx: any): void;
    exitLogicalAndExpression(ctx: any): void;
    enterLiteralExpression(ctx: any): void;
    exitLiteralExpression(ctx: any): void;
    enterLogicalOrExpression(ctx: any): void;
    exitLogicalOrExpression(ctx: any): void;
    enterArrayLiteralExpression(ctx: any): void;
    exitArrayLiteralExpression(ctx: any): void;
    enterMemberDotExpression(ctx: any): void;
    exitMemberDotExpression(ctx: any): void;
    enterNotExpression(ctx: any): void;
    exitNotExpression(ctx: any): void;
    enterEvaluationExpression(ctx: any): void;
    exitEvaluationExpression(ctx: any): void;
    enterIdentifierExpression(ctx: any): void;
    exitIdentifierExpression(ctx: any): void;
    enterThisExpression(ctx: any): void;
    exitThisExpression(ctx: any): void;
    enterAssignmentExpression(ctx: any): void;
    exitAssignmentExpression(ctx: any): void;
    enterMethodCallExpression(ctx: any): void;
    exitMethodCallExpression(ctx: any): void;
    enterLogicalXorExpression(ctx: any): void;
    exitLogicalXorExpression(ctx: any): void;
    enterGetClassExpression(ctx: any): void;
    exitGetClassExpression(ctx: any): void;
    enterEqualityExpression(ctx: any): void;
    exitEqualityExpression(ctx: any): void;
    enterMultiplicativeExpression(ctx: any): void;
    exitMultiplicativeExpression(ctx: any): void;
    enterAsExpression(ctx: any): void;
    exitAsExpression(ctx: any): void;
    enterArrowFunctionDeclaration(ctx: any): void;
    exitArrowFunctionDeclaration(ctx: any): void;
    enterArrowFunctionParameters(ctx: any): void;
    exitArrowFunctionParameters(ctx: any): void;
    enterArrowFunctionBody(ctx: any): void;
    exitArrowFunctionBody(ctx: any): void;
    enterAssignmentOperator(ctx: any): void;
    exitAssignmentOperator(ctx: any): void;
    enterNullLiteral(ctx: any): void;
    exitNullLiteral(ctx: any): void;
    enterBooleanLiteral(ctx: any): void;
    exitBooleanLiteral(ctx: any): void;
    enterStringLiteral(ctx: any): void;
    exitStringLiteral(ctx: any): void;
    enterTemplateStringLiteralLabel(ctx: any): void;
    exitTemplateStringLiteralLabel(ctx: any): void;
    enterRegularExpressionLiteral(ctx: any): void;
    exitRegularExpressionLiteral(ctx: any): void;
    enterNumericLiteralLabel(ctx: any): void;
    exitNumericLiteralLabel(ctx: any): void;
    enterTemplateStringLiteral(ctx: any): void;
    exitTemplateStringLiteral(ctx: any): void;
    enterTemplateStringAtom(ctx: any): void;
    exitTemplateStringAtom(ctx: any): void;
    enterIntegerLiteral(ctx: any): void;
    exitIntegerLiteral(ctx: any): void;
    enterDecimalLiteral(ctx: any): void;
    exitDecimalLiteral(ctx: any): void;
    enterIdentifierName(ctx: any): void;
    exitIdentifierName(ctx: any): void;
    enterIdentifierOrKeyWord(ctx: any): void;
    exitIdentifierOrKeyWord(ctx: any): void;
    enterReservedWord(ctx: any): void;
    exitReservedWord(ctx: any): void;
    enterKeyword(ctx: any): void;
    exitKeyword(ctx: any): void;
    enterGetter(ctx: any): void;
    exitGetter(ctx: any): void;
    enterSetter(ctx: any): void;
    exitSetter(ctx: any): void;
    enterEos(ctx: any): void;
    exitEos(ctx: any): void;
    enterIsInstanceOf(ctx: any): void;
    exitIsInstanceOf(ctx: any): void;
    enterClassTypes(ctx: any): void;
    exitClassTypes(ctx: any): void;
}
import antlr4 from "antlr4";
