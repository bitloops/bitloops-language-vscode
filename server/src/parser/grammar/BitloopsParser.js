// Generated from src/parser/grammar/BitloopsParser.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import BitloopsParserListener from './BitloopsParserListener.js';
import BitloopsParserVisitor from './BitloopsParserVisitor.js';

const serializedATN = [4,1,227,2086,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,1,0,1,0,1,0,1,1,1,1,3,1,412,8,1,1,2,1,2,1,2,5,2,417,8,2,10,2,
12,2,420,9,2,1,2,1,2,1,3,1,3,1,3,5,3,427,8,3,10,3,12,3,430,9,3,1,3,3,3,433,
8,3,1,4,1,4,1,4,1,4,1,5,1,5,3,5,441,8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,
1,7,1,7,1,7,1,7,1,7,1,7,3,7,457,8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
1,12,1,12,1,13,1,13,1,13,1,13,5,13,473,8,13,10,13,12,13,476,9,13,3,13,478,
8,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,3,16,492,
8,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,3,
23,507,8,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,24,516,8,24,1,24,1,24,1,
24,5,24,521,8,24,10,24,12,24,524,9,24,1,25,1,25,1,26,1,26,1,27,1,27,3,27,
532,8,27,1,28,5,28,535,8,28,10,28,12,28,538,9,28,1,29,1,29,3,29,542,8,29,
1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,4,31,554,8,31,11,31,12,
31,555,1,31,1,31,3,31,560,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,569,
8,33,10,33,12,33,572,9,33,1,33,1,33,3,33,576,8,33,3,33,578,8,33,1,34,1,34,
1,34,5,34,583,8,34,10,34,12,34,586,9,34,1,35,1,35,3,35,590,8,35,1,36,3,36,
593,8,36,1,36,3,36,596,8,36,1,36,1,36,1,36,3,36,601,8,36,1,36,3,36,604,8,
36,1,36,3,36,607,8,36,1,37,1,37,1,37,3,37,612,8,37,1,38,3,38,615,8,38,1,
38,3,38,618,8,38,1,38,1,38,3,38,622,8,38,1,39,1,39,1,40,1,40,3,40,628,8,
40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,3,42,639,8,42,1,43,1,43,
1,43,5,43,644,8,43,10,43,12,43,647,9,43,1,44,1,44,1,44,3,44,652,8,44,1,45,
1,45,1,45,1,45,3,45,658,8,45,1,45,1,45,1,46,1,46,4,46,664,8,46,11,46,12,
46,665,1,46,5,46,669,8,46,10,46,12,46,672,9,46,1,47,1,47,1,47,1,47,1,47,
1,48,4,48,680,8,48,11,48,12,48,681,1,49,1,49,1,49,3,49,687,8,49,1,50,1,50,
1,50,1,50,1,50,1,50,3,50,695,8,50,1,50,1,50,1,50,5,50,700,8,50,10,50,12,
50,703,9,50,1,51,1,51,1,51,1,52,5,52,709,8,52,10,52,12,52,712,9,52,1,53,
1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,
53,729,8,53,1,54,1,54,1,54,1,54,1,54,3,54,736,8,54,1,54,1,54,1,54,1,54,1,
54,3,54,743,8,54,1,54,1,54,1,54,1,54,3,54,749,8,54,1,54,1,54,3,54,753,8,
54,1,54,1,54,1,54,1,54,3,54,759,8,54,1,54,1,54,3,54,763,8,54,1,54,1,54,1,
54,1,54,3,54,769,8,54,1,54,1,54,3,54,773,8,54,1,54,1,54,1,54,1,54,3,54,779,
8,54,1,54,1,54,3,54,783,8,54,1,54,1,54,1,54,1,54,1,54,3,54,790,8,54,1,54,
1,54,1,54,1,54,1,54,3,54,797,8,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
54,1,54,1,54,3,54,824,8,54,1,54,1,54,1,54,1,54,1,54,3,54,831,8,54,1,54,1,
54,1,54,1,54,1,54,3,54,838,8,54,1,54,1,54,1,54,1,54,1,54,3,54,845,8,54,1,
54,1,54,1,54,1,54,1,54,3,54,852,8,54,1,54,1,54,1,54,1,54,1,54,3,54,859,8,
54,1,54,1,54,1,54,1,54,1,54,3,54,866,8,54,1,54,1,54,1,54,1,54,1,54,3,54,
873,8,54,1,54,1,54,1,54,1,54,1,54,3,54,880,8,54,1,54,1,54,1,54,1,54,1,54,
3,54,887,8,54,1,54,1,54,1,54,1,54,1,54,3,54,894,8,54,1,54,1,54,1,54,1,54,
1,54,3,54,901,8,54,1,54,1,54,1,54,1,54,1,54,3,54,908,8,54,1,54,1,54,1,54,
1,54,1,54,3,54,915,8,54,1,54,1,54,1,54,1,54,1,54,3,54,922,8,54,3,54,924,
8,54,1,55,1,55,1,55,3,55,929,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
3,56,939,8,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,3,59,949,8,59,1,59,
1,59,1,59,3,59,954,8,59,1,60,1,60,1,60,1,60,1,60,3,60,961,8,60,1,61,1,61,
1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,
61,979,8,61,1,62,1,62,1,62,1,62,1,62,3,62,986,8,62,1,63,1,63,1,63,5,63,991,
8,63,10,63,12,63,994,9,63,1,64,1,64,1,64,1,65,1,65,3,65,1001,8,65,1,65,1,
65,1,66,4,66,1006,8,66,11,66,12,66,1007,1,66,3,66,1011,8,66,1,67,1,67,3,
67,1015,8,67,1,67,1,67,3,67,1019,8,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,
3,68,1028,8,68,1,68,1,68,1,68,1,68,5,68,1034,8,68,10,68,12,68,1037,9,68,
1,68,1,68,1,69,1,69,1,69,5,69,1044,8,69,10,69,12,69,1047,9,69,1,70,1,70,
1,71,1,71,3,71,1053,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1062,8,
72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
1,73,1,73,1,73,3,73,1081,8,73,1,73,1,73,3,73,1085,8,73,1,73,1,73,3,73,1089,
8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1099,8,73,1,73,1,73,3,
73,1103,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1113,8,73,3,73,
1115,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1127,8,
73,3,73,1129,8,73,1,73,1,73,1,73,1,73,3,73,1135,8,73,1,74,1,74,1,75,1,75,
3,75,1141,8,75,1,75,1,75,1,76,1,76,3,76,1147,8,76,1,76,1,76,1,77,1,77,1,
77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,3,79,1165,8,79,
1,79,1,79,3,79,1169,8,79,1,79,1,79,1,80,4,80,1174,8,80,11,80,12,80,1175,
1,81,1,81,1,81,1,81,1,81,3,81,1183,8,81,1,81,1,81,3,81,1187,8,81,1,81,1,
81,1,81,1,81,3,81,1193,8,81,1,81,3,81,1196,8,81,3,81,1198,8,81,1,82,1,82,
1,82,1,82,3,82,1204,8,82,1,82,1,82,3,82,1208,8,82,1,82,1,82,1,82,3,82,1213,
8,82,1,82,3,82,1216,8,82,3,82,1218,8,82,1,83,1,83,1,83,1,83,1,84,1,84,1,
84,1,84,1,85,1,85,1,85,1,85,3,85,1232,8,85,1,85,3,85,1235,8,85,1,86,1,86,
1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,88,1,88,1,88,1,89,1,89,1,90,1,90,1,
90,1,90,1,90,1,90,1,91,1,91,1,91,1,92,1,92,1,92,3,92,1263,8,92,1,92,1,92,
1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,3,93,1276,8,93,1,94,1,94,1,
95,1,95,1,95,1,95,3,95,1284,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1301,8,97,1,98,5,98,1304,8,98,10,
98,12,98,1307,9,98,1,99,5,99,1310,8,99,10,99,12,99,1313,9,99,1,100,5,100,
1316,8,100,10,100,12,100,1319,9,100,1,101,1,101,3,101,1323,8,101,1,101,1,
101,1,101,1,101,1,101,1,101,1,102,1,102,1,103,1,103,1,103,3,103,1336,8,103,
1,103,1,103,1,103,1,103,3,103,1342,8,103,1,104,1,104,1,104,1,104,1,104,1,
104,3,104,1350,8,104,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1358,8,105,
1,106,1,106,1,106,1,106,1,106,1,106,1,106,3,106,1367,8,106,1,106,1,106,1,
106,1,106,1,106,1,106,1,106,1,106,3,106,1377,8,106,1,106,1,106,1,106,1,106,
1,106,1,106,1,106,3,106,1386,8,106,1,106,1,106,1,106,1,106,1,106,1,106,1,
106,1,106,3,106,1396,8,106,3,106,1398,8,106,1,107,1,107,1,108,1,108,1,109,
1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,1,111,5,111,1414,8,111,10,
111,12,111,1417,9,111,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1425,8,112,
1,113,1,113,1,113,1,113,1,113,1,113,3,113,1433,8,113,1,114,1,114,1,114,1,
114,1,114,1,114,3,114,1441,8,114,1,115,1,115,1,116,1,116,1,116,1,116,1,116,
1,116,1,116,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,1,118,1,118,
1,118,1,118,1,118,3,118,1465,8,118,1,119,1,119,1,119,1,120,1,120,1,121,1,
121,1,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,3,122,1482,8,122,1,122,
1,122,3,122,1486,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,1,124,1,
124,1,124,3,124,1498,8,124,1,124,1,124,3,124,1502,8,124,1,124,1,124,3,124,
1506,8,124,1,125,1,125,1,125,3,125,1511,8,125,1,125,1,125,3,125,1515,8,125,
1,125,1,125,3,125,1519,8,125,1,126,1,126,1,127,1,127,1,128,1,128,3,128,1527,
8,128,1,128,1,128,1,128,1,128,1,128,1,128,1,129,1,129,1,129,1,129,1,130,
1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,131,3,131,
1551,8,131,1,132,1,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,
133,1563,8,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,1,133,3,133,1573,
8,133,3,133,1575,8,133,1,134,1,134,3,134,1579,8,134,1,135,1,135,1,135,1,
135,1,135,1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,138,1,138,1,139,1,
139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,140,1,140,1,141,1,
141,1,142,1,142,1,143,1,143,1,143,5,143,1614,8,143,10,143,12,143,1617,9,
143,1,144,1,144,1,145,1,145,1,145,5,145,1624,8,145,10,145,12,145,1627,9,
145,1,146,1,146,1,147,1,147,1,148,1,148,1,149,1,149,1,149,1,149,1,149,1,
150,1,150,1,150,3,150,1643,8,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,
1,151,1,152,1,152,1,153,1,153,1,153,1,153,1,153,1,153,1,154,1,154,3,154,
1663,8,154,1,155,3,155,1666,8,155,1,155,1,155,3,155,1670,8,155,1,155,1,155,
1,155,1,155,1,155,1,156,3,156,1678,8,156,1,156,1,156,3,156,1682,8,156,1,
156,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,158,1,158,1,158,3,158,1695,
8,158,1,159,3,159,1698,8,159,1,159,3,159,1701,8,159,1,160,1,160,1,160,1,
161,3,161,1707,8,161,1,161,1,161,1,161,3,161,1712,8,161,1,161,1,161,1,161,
1,161,1,161,1,162,1,162,1,162,3,162,1722,8,162,1,162,1,162,3,162,1726,8,
162,1,162,1,162,1,162,1,162,1,162,1,163,1,163,1,163,1,163,5,163,1737,8,163,
10,163,12,163,1740,9,163,1,163,3,163,1743,8,163,1,163,1,163,1,164,1,164,
1,164,1,165,1,165,1,165,1,165,5,165,1754,8,165,10,165,12,165,1757,9,165,
1,165,3,165,1760,8,165,1,165,1,165,1,166,1,166,1,166,1,166,1,166,3,166,1769,
8,166,1,166,1,166,1,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,
5,167,1782,8,167,10,167,12,167,1785,9,167,1,167,1,167,3,167,1789,8,167,1,
167,3,167,1792,8,167,1,167,3,167,1795,8,167,1,168,3,168,1798,8,168,1,168,
3,168,1801,8,168,1,168,1,168,3,168,1805,8,168,1,168,1,168,3,168,1809,8,168,
1,169,1,169,1,169,1,170,3,170,1815,8,170,1,171,1,171,3,171,1819,8,171,1,
171,1,171,1,172,1,172,1,172,5,172,1826,8,172,10,172,12,172,1829,9,172,1,
173,1,173,1,173,1,173,5,173,1835,8,173,10,173,12,173,1838,9,173,1,173,3,
173,1841,8,173,3,173,1843,8,173,1,173,1,173,1,174,1,174,1,175,1,175,1,175,
1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
3,175,1864,8,175,1,176,1,176,1,176,1,176,3,176,1870,8,176,1,176,1,176,1,
176,1,176,1,177,1,177,1,177,1,177,3,177,1880,8,177,1,177,3,177,1883,8,177,
1,177,1,177,1,177,1,177,1,177,1,178,1,178,1,178,3,178,1893,8,178,1,179,1,
179,1,179,3,179,1898,8,179,3,179,1900,8,179,1,179,1,179,1,180,1,180,1,180,
5,180,1907,8,180,10,180,12,180,1910,9,180,1,181,1,181,1,182,1,182,1,182,
5,182,1917,8,182,10,182,12,182,1920,9,182,1,183,1,183,3,183,1924,8,183,1,
183,1,183,3,183,1928,8,183,1,183,1,183,3,183,1932,8,183,1,183,1,183,1,183,
1,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
1,184,3,184,1950,8,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,
184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,
184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,
184,1,184,1,184,1,184,1,184,1,184,1,184,5,184,1991,8,184,10,184,12,184,1994,
9,184,1,185,1,185,1,185,3,185,1999,8,185,1,185,3,185,2002,8,185,1,186,3,
186,2005,8,186,1,186,1,186,3,186,2009,8,186,1,186,1,186,1,186,1,187,1,187,
1,187,3,187,2017,8,187,1,187,3,187,2020,8,187,1,188,1,188,1,188,1,188,1,
188,3,188,2027,8,188,1,189,1,189,1,190,1,190,1,190,1,190,1,190,1,190,3,190,
2037,8,190,1,191,1,191,5,191,2041,8,191,10,191,12,191,2044,9,191,1,191,1,
191,1,192,1,192,1,192,1,192,1,192,3,192,2053,8,192,1,193,1,193,3,193,2057,
8,193,1,194,1,194,1,195,1,195,1,196,1,196,1,196,3,196,2066,8,196,1,197,1,
197,1,198,1,198,1,198,1,199,1,199,1,199,1,200,1,200,1,201,1,201,1,201,1,
201,3,201,2082,8,201,1,202,1,202,1,202,0,3,48,100,368,203,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,
216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,
252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,
288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,
324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,
396,398,400,402,404,0,17,2,0,76,76,132,148,5,0,76,76,132,132,135,135,145,
146,149,149,1,0,128,129,2,0,135,135,146,146,3,0,72,72,98,98,127,127,3,0,
205,205,211,211,216,217,1,0,191,196,1,0,199,201,2,0,13,13,15,15,1,0,24,26,
1,0,20,21,1,0,30,33,1,0,34,35,1,0,44,54,2,0,150,150,217,217,7,0,65,90,92,
94,97,98,106,106,127,131,146,146,150,152,1,1,11,11,2202,0,406,1,0,0,0,2,
411,1,0,0,0,4,413,1,0,0,0,6,423,1,0,0,0,8,434,1,0,0,0,10,438,1,0,0,0,12,
444,1,0,0,0,14,456,1,0,0,0,16,458,1,0,0,0,18,460,1,0,0,0,20,462,1,0,0,0,
22,464,1,0,0,0,24,466,1,0,0,0,26,468,1,0,0,0,28,481,1,0,0,0,30,483,1,0,0,
0,32,491,1,0,0,0,34,493,1,0,0,0,36,495,1,0,0,0,38,497,1,0,0,0,40,499,1,0,
0,0,42,501,1,0,0,0,44,503,1,0,0,0,46,506,1,0,0,0,48,515,1,0,0,0,50,525,1,
0,0,0,52,527,1,0,0,0,54,531,1,0,0,0,56,536,1,0,0,0,58,539,1,0,0,0,60,546,
1,0,0,0,62,559,1,0,0,0,64,561,1,0,0,0,66,577,1,0,0,0,68,579,1,0,0,0,70,589,
1,0,0,0,72,592,1,0,0,0,74,608,1,0,0,0,76,614,1,0,0,0,78,623,1,0,0,0,80,627,
1,0,0,0,82,629,1,0,0,0,84,636,1,0,0,0,86,640,1,0,0,0,88,648,1,0,0,0,90,653,
1,0,0,0,92,661,1,0,0,0,94,673,1,0,0,0,96,679,1,0,0,0,98,683,1,0,0,0,100,
694,1,0,0,0,102,704,1,0,0,0,104,710,1,0,0,0,106,728,1,0,0,0,108,923,1,0,
0,0,110,925,1,0,0,0,112,938,1,0,0,0,114,940,1,0,0,0,116,942,1,0,0,0,118,
945,1,0,0,0,120,955,1,0,0,0,122,978,1,0,0,0,124,980,1,0,0,0,126,987,1,0,
0,0,128,995,1,0,0,0,130,998,1,0,0,0,132,1005,1,0,0,0,134,1014,1,0,0,0,136,
1027,1,0,0,0,138,1040,1,0,0,0,140,1048,1,0,0,0,142,1050,1,0,0,0,144,1054,
1,0,0,0,146,1134,1,0,0,0,148,1136,1,0,0,0,150,1138,1,0,0,0,152,1144,1,0,
0,0,154,1150,1,0,0,0,156,1156,1,0,0,0,158,1162,1,0,0,0,160,1173,1,0,0,0,
162,1197,1,0,0,0,164,1217,1,0,0,0,166,1219,1,0,0,0,168,1223,1,0,0,0,170,
1227,1,0,0,0,172,1236,1,0,0,0,174,1242,1,0,0,0,176,1245,1,0,0,0,178,1248,
1,0,0,0,180,1250,1,0,0,0,182,1256,1,0,0,0,184,1259,1,0,0,0,186,1270,1,0,
0,0,188,1277,1,0,0,0,190,1279,1,0,0,0,192,1285,1,0,0,0,194,1292,1,0,0,0,
196,1305,1,0,0,0,198,1311,1,0,0,0,200,1317,1,0,0,0,202,1320,1,0,0,0,204,
1330,1,0,0,0,206,1332,1,0,0,0,208,1343,1,0,0,0,210,1351,1,0,0,0,212,1397,
1,0,0,0,214,1399,1,0,0,0,216,1401,1,0,0,0,218,1403,1,0,0,0,220,1406,1,0,
0,0,222,1410,1,0,0,0,224,1424,1,0,0,0,226,1426,1,0,0,0,228,1434,1,0,0,0,
230,1442,1,0,0,0,232,1444,1,0,0,0,234,1451,1,0,0,0,236,1464,1,0,0,0,238,
1466,1,0,0,0,240,1469,1,0,0,0,242,1471,1,0,0,0,244,1478,1,0,0,0,246,1487,
1,0,0,0,248,1494,1,0,0,0,250,1507,1,0,0,0,252,1520,1,0,0,0,254,1522,1,0,
0,0,256,1524,1,0,0,0,258,1534,1,0,0,0,260,1538,1,0,0,0,262,1546,1,0,0,0,
264,1552,1,0,0,0,266,1574,1,0,0,0,268,1576,1,0,0,0,270,1580,1,0,0,0,272,
1585,1,0,0,0,274,1590,1,0,0,0,276,1592,1,0,0,0,278,1594,1,0,0,0,280,1604,
1,0,0,0,282,1606,1,0,0,0,284,1608,1,0,0,0,286,1610,1,0,0,0,288,1618,1,0,
0,0,290,1620,1,0,0,0,292,1628,1,0,0,0,294,1630,1,0,0,0,296,1632,1,0,0,0,
298,1634,1,0,0,0,300,1639,1,0,0,0,302,1646,1,0,0,0,304,1652,1,0,0,0,306,
1654,1,0,0,0,308,1662,1,0,0,0,310,1665,1,0,0,0,312,1677,1,0,0,0,314,1688,
1,0,0,0,316,1694,1,0,0,0,318,1697,1,0,0,0,320,1702,1,0,0,0,322,1706,1,0,
0,0,324,1718,1,0,0,0,326,1732,1,0,0,0,328,1746,1,0,0,0,330,1749,1,0,0,0,
332,1763,1,0,0,0,334,1794,1,0,0,0,336,1797,1,0,0,0,338,1810,1,0,0,0,340,
1814,1,0,0,0,342,1816,1,0,0,0,344,1822,1,0,0,0,346,1830,1,0,0,0,348,1846,
1,0,0,0,350,1863,1,0,0,0,352,1865,1,0,0,0,354,1875,1,0,0,0,356,1892,1,0,
0,0,358,1894,1,0,0,0,360,1903,1,0,0,0,362,1911,1,0,0,0,364,1913,1,0,0,0,
366,1921,1,0,0,0,368,1949,1,0,0,0,370,2001,1,0,0,0,372,2004,1,0,0,0,374,
2019,1,0,0,0,376,2026,1,0,0,0,378,2028,1,0,0,0,380,2036,1,0,0,0,382,2038,
1,0,0,0,384,2052,1,0,0,0,386,2056,1,0,0,0,388,2058,1,0,0,0,390,2060,1,0,
0,0,392,2065,1,0,0,0,394,2067,1,0,0,0,396,2069,1,0,0,0,398,2072,1,0,0,0,
400,2075,1,0,0,0,402,2077,1,0,0,0,404,2083,1,0,0,0,406,407,5,13,0,0,407,
408,3,368,184,0,408,1,1,0,0,0,409,412,3,342,171,0,410,412,3,346,173,0,411,
409,1,0,0,0,411,410,1,0,0,0,412,3,1,0,0,0,413,418,3,46,23,0,414,415,5,11,
0,0,415,417,3,46,23,0,416,414,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,
419,1,0,0,0,419,421,1,0,0,0,420,418,1,0,0,0,421,422,5,11,0,0,422,5,1,0,0,
0,423,428,3,8,4,0,424,425,5,12,0,0,425,427,3,8,4,0,426,424,1,0,0,0,427,430,
1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,
431,433,5,12,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,7,1,0,0,0,434,435,5,
217,0,0,435,436,5,15,0,0,436,437,3,368,184,0,437,9,1,0,0,0,438,440,5,8,0,
0,439,441,3,4,2,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,443,
5,10,0,0,443,11,1,0,0,0,444,445,5,210,0,0,445,13,1,0,0,0,446,457,5,208,0,
0,447,457,3,284,142,0,448,457,5,207,0,0,449,457,5,206,0,0,450,457,3,12,6,
0,451,457,5,204,0,0,452,457,5,205,0,0,453,457,5,213,0,0,454,457,5,211,0,
0,455,457,5,216,0,0,456,446,1,0,0,0,456,447,1,0,0,0,456,448,1,0,0,0,456,
449,1,0,0,0,456,450,1,0,0,0,456,451,1,0,0,0,456,452,1,0,0,0,456,453,1,0,
0,0,456,454,1,0,0,0,456,455,1,0,0,0,457,15,1,0,0,0,458,459,7,0,0,0,459,17,
1,0,0,0,460,461,5,217,0,0,461,19,1,0,0,0,462,463,5,216,0,0,463,21,1,0,0,
0,464,465,5,216,0,0,465,23,1,0,0,0,466,467,3,288,144,0,467,25,1,0,0,0,468,
477,5,6,0,0,469,474,3,360,180,0,470,471,5,12,0,0,471,473,3,360,180,0,472,
470,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,478,1,0,
0,0,476,474,1,0,0,0,477,469,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,
480,5,7,0,0,480,27,1,0,0,0,481,482,5,6,0,0,482,29,1,0,0,0,483,484,5,7,0,
0,484,31,1,0,0,0,485,492,5,217,0,0,486,492,3,44,22,0,487,492,3,42,21,0,488,
492,3,24,12,0,489,492,5,153,0,0,490,492,5,88,0,0,491,485,1,0,0,0,491,486,
1,0,0,0,491,487,1,0,0,0,491,488,1,0,0,0,491,489,1,0,0,0,491,490,1,0,0,0,
492,33,1,0,0,0,493,494,5,218,0,0,494,35,1,0,0,0,495,496,5,58,0,0,496,37,
1,0,0,0,497,498,5,59,0,0,498,39,1,0,0,0,499,500,5,57,0,0,500,41,1,0,0,0,
501,502,5,216,0,0,502,43,1,0,0,0,503,504,5,203,0,0,504,45,1,0,0,0,505,507,
5,64,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,3,48,24,
0,509,510,3,18,9,0,510,47,1,0,0,0,511,512,6,24,-1,0,512,516,3,16,8,0,513,
516,3,50,25,0,514,516,3,14,7,0,515,511,1,0,0,0,515,513,1,0,0,0,515,514,1,
0,0,0,516,522,1,0,0,0,517,518,10,2,0,0,518,519,5,4,0,0,519,521,5,5,0,0,520,
517,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,49,1,0,0,
0,524,522,1,0,0,0,525,526,5,185,0,0,526,51,1,0,0,0,527,528,7,1,0,0,528,53,
1,0,0,0,529,532,5,217,0,0,530,532,3,92,46,0,531,529,1,0,0,0,531,530,1,0,
0,0,532,55,1,0,0,0,533,535,3,58,29,0,534,533,1,0,0,0,535,538,1,0,0,0,536,
534,1,0,0,0,536,537,1,0,0,0,537,57,1,0,0,0,538,536,1,0,0,0,539,541,3,18,
9,0,540,542,3,334,167,0,541,540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,
543,544,3,64,32,0,544,545,5,11,0,0,545,59,1,0,0,0,546,547,5,68,0,0,547,548,
3,62,31,0,548,61,1,0,0,0,549,560,5,217,0,0,550,551,3,388,194,0,551,552,5,
17,0,0,552,554,1,0,0,0,553,550,1,0,0,0,554,555,1,0,0,0,555,553,1,0,0,0,555,
556,1,0,0,0,556,557,1,0,0,0,557,558,3,388,194,0,558,560,1,0,0,0,559,549,
1,0,0,0,559,553,1,0,0,0,560,63,1,0,0,0,561,562,5,15,0,0,562,563,3,48,24,
0,563,65,1,0,0,0,564,578,3,74,37,0,565,570,3,70,35,0,566,567,5,12,0,0,567,
569,3,70,35,0,568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,
0,0,0,571,575,1,0,0,0,572,570,1,0,0,0,573,574,5,12,0,0,574,576,3,74,37,0,
575,573,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,564,1,0,0,0,577,565,
1,0,0,0,578,67,1,0,0,0,579,584,3,76,38,0,580,581,5,12,0,0,581,583,3,76,38,
0,582,580,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,0,0,0,585,69,
1,0,0,0,586,584,1,0,0,0,587,590,3,76,38,0,588,590,3,72,36,0,589,587,1,0,
0,0,589,588,1,0,0,0,590,71,1,0,0,0,591,593,3,96,48,0,592,591,1,0,0,0,592,
593,1,0,0,0,593,595,1,0,0,0,594,596,3,78,39,0,595,594,1,0,0,0,595,596,1,
0,0,0,596,597,1,0,0,0,597,606,3,80,40,0,598,600,5,14,0,0,599,601,3,64,32,
0,600,599,1,0,0,0,600,601,1,0,0,0,601,607,1,0,0,0,602,604,3,64,32,0,603,
602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,0,0,605,607,3,0,0,0,606,598,1,0,
0,0,606,603,1,0,0,0,607,73,1,0,0,0,608,609,5,16,0,0,609,611,3,368,184,0,
610,612,3,64,32,0,611,610,1,0,0,0,611,612,1,0,0,0,612,75,1,0,0,0,613,615,
3,96,48,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,618,3,78,39,
0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,621,3,80,40,0,620,
622,3,64,32,0,621,620,1,0,0,0,621,622,1,0,0,0,622,77,1,0,0,0,623,624,7,2,
0,0,624,79,1,0,0,0,625,628,3,388,194,0,626,628,3,2,1,0,627,625,1,0,0,0,627,
626,1,0,0,0,628,81,1,0,0,0,629,630,5,4,0,0,630,631,5,217,0,0,631,632,5,15,
0,0,632,633,7,3,0,0,633,634,5,5,0,0,634,635,3,64,32,0,635,83,1,0,0,0,636,
638,3,86,43,0,637,639,5,12,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,85,1,
0,0,0,640,645,3,88,44,0,641,642,5,12,0,0,642,644,3,88,44,0,643,641,1,0,0,
0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,87,1,0,0,0,647,645,
1,0,0,0,648,651,3,356,178,0,649,650,5,13,0,0,650,652,3,368,184,0,651,649,
1,0,0,0,651,652,1,0,0,0,652,89,1,0,0,0,653,654,5,155,0,0,654,655,3,92,46,
0,655,657,5,8,0,0,656,658,3,132,66,0,657,656,1,0,0,0,657,658,1,0,0,0,658,
659,1,0,0,0,659,660,5,10,0,0,660,91,1,0,0,0,661,670,5,217,0,0,662,664,5,
17,0,0,663,662,1,0,0,0,664,665,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,
667,1,0,0,0,667,669,5,217,0,0,668,663,1,0,0,0,669,672,1,0,0,0,670,668,1,
0,0,0,670,671,1,0,0,0,671,93,1,0,0,0,672,670,1,0,0,0,673,674,5,217,0,0,674,
675,5,13,0,0,675,676,3,92,46,0,676,677,5,11,0,0,677,95,1,0,0,0,678,680,3,
98,49,0,679,678,1,0,0,0,680,681,1,0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,
682,97,1,0,0,0,683,686,5,189,0,0,684,687,3,100,50,0,685,687,3,102,51,0,686,
684,1,0,0,0,686,685,1,0,0,0,687,99,1,0,0,0,688,689,6,50,-1,0,689,695,5,217,
0,0,690,691,5,6,0,0,691,692,3,368,184,0,692,693,5,7,0,0,693,695,1,0,0,0,
694,688,1,0,0,0,694,690,1,0,0,0,695,701,1,0,0,0,696,697,10,2,0,0,697,698,
5,17,0,0,698,700,3,388,194,0,699,696,1,0,0,0,700,703,1,0,0,0,701,699,1,0,
0,0,701,702,1,0,0,0,702,101,1,0,0,0,703,701,1,0,0,0,704,705,3,100,50,0,705,
706,3,358,179,0,706,103,1,0,0,0,707,709,3,106,53,0,708,707,1,0,0,0,709,712,
1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,105,1,0,0,0,712,710,1,0,0,0,
713,729,3,226,113,0,714,729,3,248,124,0,715,729,3,250,125,0,716,729,3,266,
133,0,717,729,3,108,54,0,718,729,3,208,104,0,719,729,3,228,114,0,720,729,
3,206,103,0,721,729,3,306,153,0,722,729,3,194,97,0,723,729,3,184,92,0,724,
729,3,190,95,0,725,729,3,186,93,0,726,729,3,212,106,0,727,729,3,210,105,
0,728,713,1,0,0,0,728,714,1,0,0,0,728,715,1,0,0,0,728,716,1,0,0,0,728,717,
1,0,0,0,728,718,1,0,0,0,728,719,1,0,0,0,728,720,1,0,0,0,728,721,1,0,0,0,
728,722,1,0,0,0,728,723,1,0,0,0,728,724,1,0,0,0,728,725,1,0,0,0,728,726,
1,0,0,0,728,727,1,0,0,0,729,107,1,0,0,0,730,731,5,160,0,0,731,732,5,8,0,
0,732,733,3,340,170,0,733,735,5,10,0,0,734,736,5,11,0,0,735,734,1,0,0,0,
735,736,1,0,0,0,736,924,1,0,0,0,737,738,5,159,0,0,738,739,5,8,0,0,739,740,
3,132,66,0,740,742,5,10,0,0,741,743,5,11,0,0,742,741,1,0,0,0,742,743,1,0,
0,0,743,924,1,0,0,0,744,745,5,158,0,0,745,746,5,8,0,0,746,748,3,122,61,0,
747,749,5,11,0,0,748,747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,0,0,750,752,
5,10,0,0,751,753,5,11,0,0,752,751,1,0,0,0,752,753,1,0,0,0,753,924,1,0,0,
0,754,755,5,162,0,0,755,756,5,8,0,0,756,758,3,242,121,0,757,759,5,11,0,0,
758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,762,5,10,0,0,761,763,
5,11,0,0,762,761,1,0,0,0,762,763,1,0,0,0,763,924,1,0,0,0,764,765,5,163,0,
0,765,766,5,8,0,0,766,768,3,232,116,0,767,769,5,11,0,0,768,767,1,0,0,0,768,
769,1,0,0,0,769,770,1,0,0,0,770,772,5,10,0,0,771,773,5,11,0,0,772,771,1,
0,0,0,772,773,1,0,0,0,773,924,1,0,0,0,774,775,5,164,0,0,775,776,5,8,0,0,
776,778,3,112,56,0,777,779,5,11,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,
780,1,0,0,0,780,782,5,10,0,0,781,783,5,11,0,0,782,781,1,0,0,0,782,783,1,
0,0,0,783,924,1,0,0,0,784,785,5,177,0,0,785,786,5,8,0,0,786,787,3,402,201,
0,787,789,5,10,0,0,788,790,5,11,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,
924,1,0,0,0,791,792,5,157,0,0,792,793,5,8,0,0,793,794,3,334,167,0,794,796,
5,10,0,0,795,797,5,11,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,924,1,0,0,
0,798,799,5,157,0,0,799,800,5,8,0,0,800,801,3,258,129,0,801,802,5,10,0,0,
802,924,1,0,0,0,803,804,5,157,0,0,804,805,5,8,0,0,805,806,3,260,130,0,806,
807,5,10,0,0,807,924,1,0,0,0,808,809,5,157,0,0,809,810,5,8,0,0,810,811,3,
262,131,0,811,812,5,10,0,0,812,924,1,0,0,0,813,814,5,183,0,0,814,815,5,8,
0,0,815,816,3,244,122,0,816,817,5,10,0,0,817,924,1,0,0,0,818,819,5,165,0,
0,819,820,5,8,0,0,820,821,3,302,151,0,821,823,5,10,0,0,822,824,5,11,0,0,
823,822,1,0,0,0,823,824,1,0,0,0,824,924,1,0,0,0,825,826,5,167,0,0,826,827,
5,8,0,0,827,828,3,118,59,0,828,830,5,10,0,0,829,831,5,11,0,0,830,829,1,0,
0,0,830,831,1,0,0,0,831,924,1,0,0,0,832,833,5,166,0,0,833,834,5,8,0,0,834,
835,3,368,184,0,835,837,5,10,0,0,836,838,5,11,0,0,837,836,1,0,0,0,837,838,
1,0,0,0,838,924,1,0,0,0,839,840,5,168,0,0,840,841,5,8,0,0,841,842,3,56,28,
0,842,844,5,10,0,0,843,845,5,11,0,0,844,843,1,0,0,0,844,845,1,0,0,0,845,
924,1,0,0,0,846,847,5,169,0,0,847,848,5,8,0,0,848,849,3,202,101,0,849,851,
5,10,0,0,850,852,5,11,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,924,1,0,0,
0,853,854,5,170,0,0,854,855,5,8,0,0,855,856,3,310,155,0,856,858,5,10,0,0,
857,859,5,11,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,924,1,0,0,0,860,861,
5,171,0,0,861,862,5,8,0,0,862,863,3,312,156,0,863,865,5,10,0,0,864,866,5,
11,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,924,1,0,0,0,867,868,5,172,0,0,
868,869,5,8,0,0,869,870,3,194,97,0,870,872,5,10,0,0,871,873,5,11,0,0,872,
871,1,0,0,0,872,873,1,0,0,0,873,924,1,0,0,0,874,875,5,173,0,0,875,876,5,
8,0,0,876,877,3,190,95,0,877,879,5,10,0,0,878,880,5,11,0,0,879,878,1,0,0,
0,879,880,1,0,0,0,880,924,1,0,0,0,881,882,5,174,0,0,882,883,5,8,0,0,883,
884,3,114,57,0,884,886,5,10,0,0,885,887,5,11,0,0,886,885,1,0,0,0,886,887,
1,0,0,0,887,924,1,0,0,0,888,889,5,175,0,0,889,890,5,8,0,0,890,891,3,120,
60,0,891,893,5,10,0,0,892,894,5,11,0,0,893,892,1,0,0,0,893,894,1,0,0,0,894,
924,1,0,0,0,895,896,5,178,0,0,896,897,5,8,0,0,897,898,3,234,117,0,898,900,
5,10,0,0,899,901,5,11,0,0,900,899,1,0,0,0,900,901,1,0,0,0,901,924,1,0,0,
0,902,903,5,179,0,0,903,904,5,8,0,0,904,905,3,238,119,0,905,907,5,10,0,0,
906,908,5,11,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,924,1,0,0,0,909,910,
5,182,0,0,910,911,5,8,0,0,911,912,3,124,62,0,912,914,5,10,0,0,913,915,5,
11,0,0,914,913,1,0,0,0,914,915,1,0,0,0,915,924,1,0,0,0,916,917,5,184,0,0,
917,918,5,8,0,0,918,919,3,48,24,0,919,921,5,10,0,0,920,922,5,11,0,0,921,
920,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,730,1,0,0,0,923,737,1,0,
0,0,923,744,1,0,0,0,923,754,1,0,0,0,923,764,1,0,0,0,923,774,1,0,0,0,923,
784,1,0,0,0,923,791,1,0,0,0,923,798,1,0,0,0,923,803,1,0,0,0,923,808,1,0,
0,0,923,813,1,0,0,0,923,818,1,0,0,0,923,825,1,0,0,0,923,832,1,0,0,0,923,
839,1,0,0,0,923,846,1,0,0,0,923,853,1,0,0,0,923,860,1,0,0,0,923,867,1,0,
0,0,923,874,1,0,0,0,923,881,1,0,0,0,923,888,1,0,0,0,923,895,1,0,0,0,923,
902,1,0,0,0,923,909,1,0,0,0,923,916,1,0,0,0,924,109,1,0,0,0,925,926,5,206,
0,0,926,928,3,26,13,0,927,929,5,11,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,
111,1,0,0,0,930,939,3,402,201,0,931,939,3,244,122,0,932,939,3,110,55,0,933,
939,3,232,116,0,934,939,3,234,117,0,935,939,3,238,119,0,936,939,3,246,123,
0,937,939,3,242,121,0,938,930,1,0,0,0,938,931,1,0,0,0,938,932,1,0,0,0,938,
933,1,0,0,0,938,934,1,0,0,0,938,935,1,0,0,0,938,936,1,0,0,0,938,937,1,0,
0,0,939,113,1,0,0,0,940,941,3,368,184,0,941,115,1,0,0,0,942,943,5,75,0,0,
943,944,3,368,184,0,944,117,1,0,0,0,945,946,5,98,0,0,946,948,3,18,9,0,947,
949,3,64,32,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,5,
13,0,0,951,953,3,368,184,0,952,954,5,11,0,0,953,952,1,0,0,0,953,954,1,0,
0,0,954,119,1,0,0,0,955,956,3,18,9,0,956,957,3,64,32,0,957,958,5,13,0,0,
958,960,3,368,184,0,959,961,5,11,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,
121,1,0,0,0,962,979,3,130,65,0,963,979,3,368,184,0,964,979,3,118,59,0,965,
979,3,120,60,0,966,979,3,140,70,0,967,979,3,208,104,0,968,979,3,90,45,0,
969,979,3,144,72,0,970,979,3,152,76,0,971,979,3,156,78,0,972,979,3,146,73,
0,973,979,3,116,58,0,974,979,3,168,84,0,975,979,3,170,85,0,976,979,3,372,
186,0,977,979,3,124,62,0,978,962,1,0,0,0,978,963,1,0,0,0,978,964,1,0,0,0,
978,965,1,0,0,0,978,966,1,0,0,0,978,967,1,0,0,0,978,968,1,0,0,0,978,969,
1,0,0,0,978,970,1,0,0,0,978,971,1,0,0,0,978,972,1,0,0,0,978,973,1,0,0,0,
978,974,1,0,0,0,978,975,1,0,0,0,978,976,1,0,0,0,978,977,1,0,0,0,979,123,
1,0,0,0,980,981,5,96,0,0,981,982,5,6,0,0,982,983,3,126,63,0,983,985,5,7,
0,0,984,986,5,11,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,125,1,0,0,0,987,
992,3,128,64,0,988,989,5,12,0,0,989,991,3,128,64,0,990,988,1,0,0,0,991,994,
1,0,0,0,992,990,1,0,0,0,992,993,1,0,0,0,993,127,1,0,0,0,994,992,1,0,0,0,
995,996,3,296,148,0,996,997,3,358,179,0,997,129,1,0,0,0,998,1000,5,8,0,0,
999,1001,3,132,66,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,
1002,1003,5,10,0,0,1003,131,1,0,0,0,1004,1006,3,122,61,0,1005,1004,1,0,0,
0,1006,1007,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,
0,1009,1011,5,11,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,133,1,0,0,
0,1012,1015,5,24,0,0,1013,1015,3,136,68,0,1014,1012,1,0,0,0,1014,1013,1,
0,0,0,1015,1018,1,0,0,0,1016,1017,5,91,0,0,1017,1019,3,388,194,0,1018,1016,
1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1021,5,92,0,0,1021,1022,
5,218,0,0,1022,1023,3,400,200,0,1023,135,1,0,0,0,1024,1025,3,388,194,0,1025,
1026,5,12,0,0,1026,1028,1,0,0,0,1027,1024,1,0,0,0,1027,1028,1,0,0,0,1028,
1029,1,0,0,0,1029,1030,5,8,0,0,1030,1035,3,388,194,0,1031,1032,5,12,0,0,
1032,1034,3,388,194,0,1033,1031,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,
0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1035,1,0,0,0,1038,1039,5,10,
0,0,1039,137,1,0,0,0,1040,1045,3,120,60,0,1041,1042,5,12,0,0,1042,1044,3,
120,60,0,1043,1041,1,0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1045,1046,
1,0,0,0,1046,139,1,0,0,0,1047,1045,1,0,0,0,1048,1049,5,11,0,0,1049,141,1,
0,0,0,1050,1052,3,364,182,0,1051,1053,5,11,0,0,1052,1051,1,0,0,0,1052,1053,
1,0,0,0,1053,143,1,0,0,0,1054,1055,5,86,0,0,1055,1056,5,6,0,0,1056,1057,
3,114,57,0,1057,1058,5,7,0,0,1058,1061,3,122,61,0,1059,1060,5,70,0,0,1060,
1062,3,122,61,0,1061,1059,1,0,0,0,1061,1062,1,0,0,0,1062,145,1,0,0,0,1063,
1064,5,66,0,0,1064,1065,3,122,61,0,1065,1066,5,80,0,0,1066,1067,5,6,0,0,
1067,1068,3,364,182,0,1068,1069,5,7,0,0,1069,1070,3,400,200,0,1070,1135,
1,0,0,0,1071,1072,5,80,0,0,1072,1073,5,6,0,0,1073,1074,3,364,182,0,1074,
1075,5,7,0,0,1075,1076,3,122,61,0,1076,1135,1,0,0,0,1077,1078,5,78,0,0,1078,
1080,5,6,0,0,1079,1081,3,364,182,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,
1082,1,0,0,0,1082,1084,5,11,0,0,1083,1085,3,364,182,0,1084,1083,1,0,0,0,
1084,1085,1,0,0,0,1085,1086,1,0,0,0,1086,1088,5,11,0,0,1087,1089,3,364,182,
0,1088,1087,1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1091,5,7,0,
0,1091,1135,3,122,61,0,1092,1093,5,78,0,0,1093,1094,5,6,0,0,1094,1095,3,
148,74,0,1095,1096,3,138,69,0,1096,1098,5,11,0,0,1097,1099,3,364,182,0,1098,
1097,1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1102,5,11,0,0,1101,
1103,3,364,182,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,1103,1104,1,0,0,0,1104,
1105,5,7,0,0,1105,1106,3,122,61,0,1106,1135,1,0,0,0,1107,1108,5,78,0,0,1108,
1109,5,6,0,0,1109,1114,3,368,184,0,1110,1115,5,89,0,0,1111,1113,5,217,0,
0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1115,1,0,0,0,1114,1110,1,0,0,
0,1114,1112,1,0,0,0,1115,1116,1,0,0,0,1116,1117,3,364,182,0,1117,1118,5,
7,0,0,1118,1119,3,122,61,0,1119,1135,1,0,0,0,1120,1121,5,78,0,0,1121,1122,
5,6,0,0,1122,1123,3,148,74,0,1123,1128,3,120,60,0,1124,1129,5,89,0,0,1125,
1127,5,217,0,0,1126,1125,1,0,0,0,1126,1127,1,0,0,0,1127,1129,1,0,0,0,1128,
1124,1,0,0,0,1128,1126,1,0,0,0,1129,1130,1,0,0,0,1130,1131,3,364,182,0,1131,
1132,5,7,0,0,1132,1133,3,122,61,0,1133,1135,1,0,0,0,1134,1063,1,0,0,0,1134,
1071,1,0,0,0,1134,1077,1,0,0,0,1134,1092,1,0,0,0,1134,1107,1,0,0,0,1134,
1120,1,0,0,0,1135,147,1,0,0,0,1136,1137,7,4,0,0,1137,149,1,0,0,0,1138,1140,
5,77,0,0,1139,1141,5,217,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,
1,0,0,0,1142,1143,3,400,200,0,1143,151,1,0,0,0,1144,1146,5,65,0,0,1145,1147,
5,217,0,0,1146,1145,1,0,0,0,1146,1147,1,0,0,0,1147,1148,1,0,0,0,1148,1149,
3,400,200,0,1149,153,1,0,0,0,1150,1151,5,84,0,0,1151,1152,5,6,0,0,1152,1153,
3,364,182,0,1153,1154,5,7,0,0,1154,1155,3,122,61,0,1155,155,1,0,0,0,1156,
1157,5,79,0,0,1157,1158,5,6,0,0,1158,1159,3,114,57,0,1159,1160,5,7,0,0,1160,
1161,3,158,79,0,1161,157,1,0,0,0,1162,1164,5,8,0,0,1163,1165,3,160,80,0,
1164,1163,1,0,0,0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,1166,1168,3,164,82,
0,1167,1169,3,160,80,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,0,
0,0,1170,1171,5,10,0,0,1171,159,1,0,0,0,1172,1174,3,162,81,0,1173,1172,1,
0,0,0,1174,1175,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,161,1,0,
0,0,1177,1178,5,69,0,0,1178,1179,3,368,184,0,1179,1180,5,15,0,0,1180,1182,
5,8,0,0,1181,1183,3,132,66,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,
1,0,0,0,1184,1186,5,10,0,0,1185,1187,5,11,0,0,1186,1185,1,0,0,0,1186,1187,
1,0,0,0,1187,1198,1,0,0,0,1188,1189,5,69,0,0,1189,1190,3,368,184,0,1190,
1192,5,15,0,0,1191,1193,3,132,66,0,1192,1191,1,0,0,0,1192,1193,1,0,0,0,1193,
1195,1,0,0,0,1194,1196,5,11,0,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,
1198,1,0,0,0,1197,1177,1,0,0,0,1197,1188,1,0,0,0,1198,163,1,0,0,0,1199,1200,
5,85,0,0,1200,1201,5,15,0,0,1201,1203,5,8,0,0,1202,1204,3,132,66,0,1203,
1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1207,5,10,0,0,1206,
1208,5,11,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,1218,1,0,0,0,1209,
1210,5,85,0,0,1210,1212,5,15,0,0,1211,1213,3,132,66,0,1212,1211,1,0,0,0,
1212,1213,1,0,0,0,1213,1215,1,0,0,0,1214,1216,5,11,0,0,1215,1214,1,0,0,0,
1215,1216,1,0,0,0,1216,1218,1,0,0,0,1217,1199,1,0,0,0,1217,1209,1,0,0,0,
1218,165,1,0,0,0,1219,1220,5,217,0,0,1220,1221,5,15,0,0,1221,1222,3,122,
61,0,1222,167,1,0,0,0,1223,1224,5,87,0,0,1224,1225,3,364,182,0,1225,1226,
3,400,200,0,1226,169,1,0,0,0,1227,1228,5,90,0,0,1228,1234,3,130,65,0,1229,
1231,3,172,86,0,1230,1232,3,174,87,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,
1232,1235,1,0,0,0,1233,1235,3,174,87,0,1234,1229,1,0,0,0,1234,1233,1,0,0,
0,1235,171,1,0,0,0,1236,1237,5,73,0,0,1237,1238,5,6,0,0,1238,1239,5,217,
0,0,1239,1240,5,7,0,0,1240,1241,3,130,65,0,1241,173,1,0,0,0,1242,1243,5,
74,0,0,1243,1244,3,130,65,0,1244,175,1,0,0,0,1245,1246,5,81,0,0,1246,1247,
3,400,200,0,1247,177,1,0,0,0,1248,1249,3,4,2,0,1249,179,1,0,0,0,1250,1251,
5,124,0,0,1251,1252,5,6,0,0,1252,1253,3,368,184,0,1253,1254,5,7,0,0,1254,
1255,5,11,0,0,1255,181,1,0,0,0,1256,1257,3,340,170,0,1257,1258,3,180,90,
0,1258,183,1,0,0,0,1259,1260,5,123,0,0,1260,1262,3,296,148,0,1261,1263,3,
334,167,0,1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,
5,95,0,0,1265,1266,5,206,0,0,1266,1267,5,8,0,0,1267,1268,3,182,91,0,1268,
1269,5,10,0,0,1269,185,1,0,0,0,1270,1271,5,125,0,0,1271,1272,5,109,0,0,1272,
1273,3,294,147,0,1273,1275,3,192,96,0,1274,1276,5,11,0,0,1275,1274,1,0,0,
0,1275,1276,1,0,0,0,1276,187,1,0,0,0,1277,1278,3,118,59,0,1278,189,1,0,0,
0,1279,1280,5,109,0,0,1280,1281,3,294,147,0,1281,1283,3,192,96,0,1282,1284,
5,11,0,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,191,1,0,0,0,1285,1286,
5,8,0,0,1286,1287,3,196,98,0,1287,1288,3,202,101,0,1288,1289,3,198,99,0,
1289,1290,3,200,100,0,1290,1291,5,10,0,0,1291,193,1,0,0,0,1292,1293,5,107,
0,0,1293,1294,3,292,146,0,1294,1295,5,8,0,0,1295,1296,3,196,98,0,1296,1297,
3,202,101,0,1297,1298,3,200,100,0,1298,1300,5,10,0,0,1299,1301,5,11,0,0,
1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,195,1,0,0,0,1302,1304,3,188,94,
0,1303,1302,1,0,0,0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,
0,1306,197,1,0,0,0,1307,1305,1,0,0,0,1308,1310,3,312,156,0,1309,1308,1,0,
0,0,1310,1313,1,0,0,0,1311,1309,1,0,0,0,1311,1312,1,0,0,0,1312,199,1,0,0,
0,1313,1311,1,0,0,0,1314,1316,3,310,155,0,1315,1314,1,0,0,0,1316,1319,1,
0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,201,1,0,0,0,1319,1317,1,0,
0,0,1320,1322,5,126,0,0,1321,1323,3,334,167,0,1322,1321,1,0,0,0,1322,1323,
1,0,0,0,1323,1324,1,0,0,0,1324,1325,5,15,0,0,1325,1326,3,302,151,0,1326,
1327,5,8,0,0,1327,1328,3,340,170,0,1328,1329,5,10,0,0,1329,203,1,0,0,0,1330,
1331,5,208,0,0,1331,205,1,0,0,0,1332,1333,5,106,0,0,1333,1335,3,204,102,
0,1334,1336,3,334,167,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,
0,0,0,1337,1338,5,8,0,0,1338,1339,3,256,128,0,1339,1341,5,10,0,0,1340,1342,
5,11,0,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,207,1,0,0,0,1343,1344,
5,100,0,0,1344,1345,5,210,0,0,1345,1346,5,8,0,0,1346,1347,3,4,2,0,1347,1349,
5,10,0,0,1348,1350,5,11,0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,209,
1,0,0,0,1351,1352,5,101,0,0,1352,1353,5,211,0,0,1353,1354,5,8,0,0,1354,1355,
3,4,2,0,1355,1357,5,10,0,0,1356,1358,5,11,0,0,1357,1356,1,0,0,0,1357,1358,
1,0,0,0,1358,211,1,0,0,0,1359,1360,5,99,0,0,1360,1361,3,214,107,0,1361,1362,
5,30,0,0,1362,1363,5,211,0,0,1363,1364,5,31,0,0,1364,1366,3,218,109,0,1365,
1367,5,11,0,0,1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1398,1,0,0,0,1368,
1369,5,99,0,0,1369,1370,3,214,107,0,1370,1371,5,30,0,0,1371,1372,5,211,0,
0,1372,1373,5,31,0,0,1373,1374,3,218,109,0,1374,1376,3,220,110,0,1375,1377,
5,11,0,0,1376,1375,1,0,0,0,1376,1377,1,0,0,0,1377,1398,1,0,0,0,1378,1379,
5,99,0,0,1379,1380,3,214,107,0,1380,1381,5,30,0,0,1381,1382,3,216,108,0,
1382,1383,5,31,0,0,1383,1385,3,218,109,0,1384,1386,5,11,0,0,1385,1384,1,
0,0,0,1385,1386,1,0,0,0,1386,1398,1,0,0,0,1387,1388,5,99,0,0,1388,1389,3,
214,107,0,1389,1390,5,30,0,0,1390,1391,3,216,108,0,1391,1392,5,31,0,0,1392,
1393,3,218,109,0,1393,1395,3,220,110,0,1394,1396,5,11,0,0,1395,1394,1,0,
0,0,1395,1396,1,0,0,0,1396,1398,1,0,0,0,1397,1359,1,0,0,0,1397,1368,1,0,
0,0,1397,1378,1,0,0,0,1397,1387,1,0,0,0,1398,213,1,0,0,0,1399,1400,5,213,
0,0,1400,215,1,0,0,0,1401,1402,7,5,0,0,1402,217,1,0,0,0,1403,1404,5,97,0,
0,1404,1405,3,222,111,0,1405,219,1,0,0,0,1406,1407,5,8,0,0,1407,1408,3,56,
28,0,1408,1409,5,10,0,0,1409,221,1,0,0,0,1410,1415,3,224,112,0,1411,1412,
5,12,0,0,1412,1414,3,224,112,0,1413,1411,1,0,0,0,1414,1417,1,0,0,0,1415,
1413,1,0,0,0,1415,1416,1,0,0,0,1416,223,1,0,0,0,1417,1415,1,0,0,0,1418,1425,
5,213,0,0,1419,1425,5,216,0,0,1420,1421,5,216,0,0,1421,1422,5,30,0,0,1422,
1423,5,216,0,0,1423,1425,5,31,0,0,1424,1418,1,0,0,0,1424,1419,1,0,0,0,1424,
1420,1,0,0,0,1425,225,1,0,0,0,1426,1427,5,102,0,0,1427,1428,5,203,0,0,1428,
1429,5,8,0,0,1429,1430,3,4,2,0,1430,1432,5,10,0,0,1431,1433,5,11,0,0,1432,
1431,1,0,0,0,1432,1433,1,0,0,0,1433,227,1,0,0,0,1434,1435,5,149,0,0,1435,
1436,5,216,0,0,1436,1437,5,8,0,0,1437,1438,3,4,2,0,1438,1440,5,10,0,0,1439,
1441,5,11,0,0,1440,1439,1,0,0,0,1440,1441,1,0,0,0,1441,229,1,0,0,0,1442,
1443,3,284,142,0,1443,231,1,0,0,0,1444,1445,3,230,115,0,1445,1446,5,6,0,
0,1446,1447,5,8,0,0,1447,1448,3,6,3,0,1448,1449,5,10,0,0,1449,1450,5,7,0,
0,1450,233,1,0,0,0,1451,1452,3,292,146,0,1452,1453,3,236,118,0,1453,235,
1,0,0,0,1454,1455,5,6,0,0,1455,1456,5,8,0,0,1456,1457,3,6,3,0,1457,1458,
5,10,0,0,1458,1459,5,7,0,0,1459,1465,1,0,0,0,1460,1461,5,6,0,0,1461,1462,
3,368,184,0,1462,1463,5,7,0,0,1463,1465,1,0,0,0,1464,1454,1,0,0,0,1464,1460,
1,0,0,0,1465,237,1,0,0,0,1466,1467,3,294,147,0,1467,1468,3,236,118,0,1468,
239,1,0,0,0,1469,1470,5,216,0,0,1470,241,1,0,0,0,1471,1472,3,240,120,0,1472,
1473,5,6,0,0,1473,1474,5,8,0,0,1474,1475,3,6,3,0,1475,1476,5,10,0,0,1476,
1477,5,7,0,0,1477,243,1,0,0,0,1478,1481,3,50,25,0,1479,1480,5,17,0,0,1480,
1482,3,18,9,0,1481,1479,1,0,0,0,1481,1482,1,0,0,0,1482,1483,1,0,0,0,1483,
1485,3,26,13,0,1484,1486,5,11,0,0,1485,1484,1,0,0,0,1485,1486,1,0,0,0,1486,
245,1,0,0,0,1487,1488,5,8,0,0,1488,1489,5,6,0,0,1489,1490,3,12,6,0,1490,
1491,3,6,3,0,1491,1492,5,10,0,0,1492,1493,5,7,0,0,1493,247,1,0,0,0,1494,
1495,5,114,0,0,1495,1497,3,252,126,0,1496,1498,3,334,167,0,1497,1496,1,0,
0,0,1497,1498,1,0,0,0,1498,1499,1,0,0,0,1499,1501,5,8,0,0,1500,1502,3,6,
3,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1505,5,10,
0,0,1504,1506,5,11,0,0,1505,1504,1,0,0,0,1505,1506,1,0,0,0,1506,249,1,0,
0,0,1507,1508,5,115,0,0,1508,1510,3,254,127,0,1509,1511,3,334,167,0,1510,
1509,1,0,0,0,1510,1511,1,0,0,0,1511,1512,1,0,0,0,1512,1514,5,8,0,0,1513,
1515,3,6,3,0,1514,1513,1,0,0,0,1514,1515,1,0,0,0,1515,1516,1,0,0,0,1516,
1518,5,10,0,0,1517,1519,5,11,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,
251,1,0,0,0,1520,1521,5,214,0,0,1521,253,1,0,0,0,1522,1523,5,214,0,0,1523,
255,1,0,0,0,1524,1526,5,153,0,0,1525,1527,3,334,167,0,1526,1525,1,0,0,0,
1526,1527,1,0,0,0,1527,1528,1,0,0,0,1528,1529,5,15,0,0,1529,1530,3,302,151,
0,1530,1531,5,8,0,0,1531,1532,3,340,170,0,1532,1533,5,10,0,0,1533,257,1,
0,0,0,1534,1535,5,217,0,0,1535,1536,5,12,0,0,1536,1537,5,217,0,0,1537,259,
1,0,0,0,1538,1539,5,153,0,0,1539,1540,5,6,0,0,1540,1541,3,258,129,0,1541,
1542,5,7,0,0,1542,1543,5,8,0,0,1543,1544,3,340,170,0,1544,1545,5,10,0,0,
1545,261,1,0,0,0,1546,1547,5,190,0,0,1547,1548,5,15,0,0,1548,1550,3,264,
132,0,1549,1551,5,11,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,263,1,
0,0,0,1552,1553,7,6,0,0,1553,265,1,0,0,0,1554,1555,5,103,0,0,1555,1556,5,
207,0,0,1556,1557,3,334,167,0,1557,1558,5,8,0,0,1558,1559,3,262,131,0,1559,
1560,3,260,130,0,1560,1562,5,10,0,0,1561,1563,5,11,0,0,1562,1561,1,0,0,0,
1562,1563,1,0,0,0,1563,1575,1,0,0,0,1564,1565,5,104,0,0,1565,1566,5,207,
0,0,1566,1567,3,334,167,0,1567,1568,5,8,0,0,1568,1569,3,268,134,0,1569,1570,
3,278,139,0,1570,1572,5,10,0,0,1571,1573,5,11,0,0,1572,1571,1,0,0,0,1572,
1573,1,0,0,0,1573,1575,1,0,0,0,1574,1554,1,0,0,0,1574,1564,1,0,0,0,1575,
267,1,0,0,0,1576,1578,3,270,135,0,1577,1579,3,272,136,0,1578,1577,1,0,0,
0,1578,1579,1,0,0,0,1579,269,1,0,0,0,1580,1581,5,197,0,0,1581,1582,5,15,
0,0,1582,1583,3,276,138,0,1583,1584,5,11,0,0,1584,271,1,0,0,0,1585,1586,
5,198,0,0,1586,1587,5,15,0,0,1587,1588,3,274,137,0,1588,1589,5,11,0,0,1589,
273,1,0,0,0,1590,1591,5,203,0,0,1591,275,1,0,0,0,1592,1593,7,7,0,0,1593,
277,1,0,0,0,1594,1595,5,153,0,0,1595,1596,5,6,0,0,1596,1597,3,280,140,0,
1597,1598,5,7,0,0,1598,1599,5,15,0,0,1599,1600,3,282,141,0,1600,1601,5,8,
0,0,1601,1602,3,340,170,0,1602,1603,5,10,0,0,1603,279,1,0,0,0,1604,1605,
5,217,0,0,1605,281,1,0,0,0,1606,1607,5,203,0,0,1607,283,1,0,0,0,1608,1609,
5,203,0,0,1609,285,1,0,0,0,1610,1615,3,284,142,0,1611,1612,5,40,0,0,1612,
1614,3,284,142,0,1613,1611,1,0,0,0,1614,1617,1,0,0,0,1615,1613,1,0,0,0,1615,
1616,1,0,0,0,1616,287,1,0,0,0,1617,1615,1,0,0,0,1618,1619,5,206,0,0,1619,
289,1,0,0,0,1620,1625,3,288,144,0,1621,1622,5,40,0,0,1622,1624,3,288,144,
0,1623,1621,1,0,0,0,1624,1627,1,0,0,0,1625,1623,1,0,0,0,1625,1626,1,0,0,
0,1626,291,1,0,0,0,1627,1625,1,0,0,0,1628,1629,5,204,0,0,1629,293,1,0,0,
0,1630,1631,5,205,0,0,1631,295,1,0,0,0,1632,1633,5,212,0,0,1633,297,1,0,
0,0,1634,1635,5,118,0,0,1635,1636,5,6,0,0,1636,1637,3,48,24,0,1637,1638,
5,7,0,0,1638,299,1,0,0,0,1639,1640,5,119,0,0,1640,1642,5,6,0,0,1641,1643,
3,290,145,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1645,
5,7,0,0,1645,301,1,0,0,0,1646,1647,5,6,0,0,1647,1648,3,298,149,0,1648,1649,
5,12,0,0,1649,1650,3,300,150,0,1650,1651,5,7,0,0,1651,303,1,0,0,0,1652,1653,
5,209,0,0,1653,305,1,0,0,0,1654,1655,5,121,0,0,1655,1656,3,304,152,0,1656,
1657,5,8,0,0,1657,1658,3,56,28,0,1658,1659,5,10,0,0,1659,307,1,0,0,0,1660,
1663,3,312,156,0,1661,1663,3,310,155,0,1662,1660,1,0,0,0,1662,1661,1,0,0,
0,1663,309,1,0,0,0,1664,1666,5,128,0,0,1665,1664,1,0,0,0,1665,1666,1,0,0,
0,1666,1667,1,0,0,0,1667,1669,3,18,9,0,1668,1670,3,334,167,0,1669,1668,1,
0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1672,3,316,158,0,1672,1673,
5,8,0,0,1673,1674,3,340,170,0,1674,1675,5,10,0,0,1675,311,1,0,0,0,1676,1678,
5,129,0,0,1677,1676,1,0,0,0,1677,1678,1,0,0,0,1678,1679,1,0,0,0,1679,1681,
3,18,9,0,1680,1682,3,334,167,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,
1683,1,0,0,0,1683,1684,3,314,157,0,1684,1685,5,8,0,0,1685,1686,3,340,170,
0,1686,1687,5,10,0,0,1687,313,1,0,0,0,1688,1689,5,15,0,0,1689,1690,3,302,
151,0,1690,315,1,0,0,0,1691,1695,3,64,32,0,1692,1693,5,15,0,0,1693,1695,
3,302,151,0,1694,1691,1,0,0,0,1694,1692,1,0,0,0,1695,317,1,0,0,0,1696,1698,
3,78,39,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1700,1,0,0,0,1699,1701,
5,131,0,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,319,1,0,0,0,1702,1703,
3,82,41,0,1703,1704,5,11,0,0,1704,321,1,0,0,0,1705,1707,5,24,0,0,1706,1705,
1,0,0,0,1706,1707,1,0,0,0,1707,1708,1,0,0,0,1708,1709,5,217,0,0,1709,1711,
5,6,0,0,1710,1712,3,334,167,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,1713,
1,0,0,0,1713,1714,5,7,0,0,1714,1715,5,8,0,0,1715,1716,3,340,170,0,1716,1717,
5,10,0,0,1717,323,1,0,0,0,1718,1719,5,82,0,0,1719,1721,5,24,0,0,1720,1722,
5,217,0,0,1721,1720,1,0,0,0,1721,1722,1,0,0,0,1722,1723,1,0,0,0,1723,1725,
5,6,0,0,1724,1726,3,334,167,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,1727,
1,0,0,0,1727,1728,5,7,0,0,1728,1729,5,8,0,0,1729,1730,3,340,170,0,1730,1731,
5,10,0,0,1731,325,1,0,0,0,1732,1733,5,8,0,0,1733,1738,3,328,164,0,1734,1735,
5,12,0,0,1735,1737,3,328,164,0,1736,1734,1,0,0,0,1737,1740,1,0,0,0,1738,
1736,1,0,0,0,1738,1739,1,0,0,0,1739,1742,1,0,0,0,1740,1738,1,0,0,0,1741,
1743,5,12,0,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,1744,1,0,0,0,1744,
1745,5,10,0,0,1745,327,1,0,0,0,1746,1747,5,24,0,0,1747,1748,3,332,166,0,
1748,329,1,0,0,0,1749,1750,5,8,0,0,1750,1755,3,332,166,0,1751,1752,5,12,
0,0,1752,1754,3,332,166,0,1753,1751,1,0,0,0,1754,1757,1,0,0,0,1755,1753,
1,0,0,0,1755,1756,1,0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1758,1760,
5,12,0,0,1759,1758,1,0,0,0,1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,
5,10,0,0,1762,331,1,0,0,0,1763,1764,5,4,0,0,1764,1765,3,368,184,0,1765,1766,
5,5,0,0,1766,1768,5,6,0,0,1767,1769,3,334,167,0,1768,1767,1,0,0,0,1768,1769,
1,0,0,0,1769,1770,1,0,0,0,1770,1771,5,7,0,0,1771,1772,5,8,0,0,1772,1773,
3,340,170,0,1773,1774,5,10,0,0,1774,333,1,0,0,0,1775,1776,5,6,0,0,1776,1795,
5,7,0,0,1777,1791,5,6,0,0,1778,1783,3,336,168,0,1779,1780,5,12,0,0,1780,
1782,3,336,168,0,1781,1779,1,0,0,0,1782,1785,1,0,0,0,1783,1781,1,0,0,0,1783,
1784,1,0,0,0,1784,1788,1,0,0,0,1785,1783,1,0,0,0,1786,1787,5,12,0,0,1787,
1789,3,338,169,0,1788,1786,1,0,0,0,1788,1789,1,0,0,0,1789,1792,1,0,0,0,1790,
1792,3,338,169,0,1791,1778,1,0,0,0,1791,1790,1,0,0,0,1791,1792,1,0,0,0,1792,
1793,1,0,0,0,1793,1795,5,7,0,0,1794,1775,1,0,0,0,1794,1777,1,0,0,0,1795,
335,1,0,0,0,1796,1798,3,98,49,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,
1800,1,0,0,0,1799,1801,3,78,39,0,1800,1799,1,0,0,0,1800,1801,1,0,0,0,1801,
1802,1,0,0,0,1802,1804,3,390,195,0,1803,1805,3,64,32,0,1804,1803,1,0,0,0,
1804,1805,1,0,0,0,1805,1808,1,0,0,0,1806,1807,5,13,0,0,1807,1809,3,368,184,
0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,337,1,0,0,0,1810,1811,5,16,0,
0,1811,1812,5,217,0,0,1812,339,1,0,0,0,1813,1815,3,132,66,0,1814,1813,1,
0,0,0,1814,1815,1,0,0,0,1815,341,1,0,0,0,1816,1818,5,4,0,0,1817,1819,3,344,
172,0,1818,1817,1,0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1821,5,
5,0,0,1821,343,1,0,0,0,1822,1827,3,368,184,0,1823,1824,5,12,0,0,1824,1826,
3,368,184,0,1825,1823,1,0,0,0,1826,1829,1,0,0,0,1827,1825,1,0,0,0,1827,1828,
1,0,0,0,1828,345,1,0,0,0,1829,1827,1,0,0,0,1830,1842,5,8,0,0,1831,1836,3,
350,175,0,1832,1833,5,12,0,0,1833,1835,3,350,175,0,1834,1832,1,0,0,0,1835,
1838,1,0,0,0,1836,1834,1,0,0,0,1836,1837,1,0,0,0,1837,1840,1,0,0,0,1838,
1836,1,0,0,0,1839,1841,5,12,0,0,1840,1839,1,0,0,0,1840,1841,1,0,0,0,1841,
1843,1,0,0,0,1842,1831,1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,
1845,5,10,0,0,1845,347,1,0,0,0,1846,1847,3,368,184,0,1847,349,1,0,0,0,1848,
1849,3,356,178,0,1849,1850,7,8,0,0,1850,1851,3,348,174,0,1851,1864,1,0,0,
0,1852,1853,5,4,0,0,1853,1854,3,348,174,0,1854,1855,5,5,0,0,1855,1856,5,
15,0,0,1856,1857,3,348,174,0,1857,1864,1,0,0,0,1858,1864,3,352,176,0,1859,
1864,3,354,177,0,1860,1864,3,322,161,0,1861,1864,3,390,195,0,1862,1864,3,
74,37,0,1863,1848,1,0,0,0,1863,1852,1,0,0,0,1863,1858,1,0,0,0,1863,1859,
1,0,0,0,1863,1860,1,0,0,0,1863,1861,1,0,0,0,1863,1862,1,0,0,0,1864,351,1,
0,0,0,1865,1866,3,396,198,0,1866,1867,5,6,0,0,1867,1869,5,7,0,0,1868,1870,
3,64,32,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,1871,1,0,0,0,1871,1872,
5,8,0,0,1872,1873,3,340,170,0,1873,1874,5,10,0,0,1874,353,1,0,0,0,1875,1876,
3,398,199,0,1876,1879,5,6,0,0,1877,1880,5,217,0,0,1878,1880,3,2,1,0,1879,
1877,1,0,0,0,1879,1878,1,0,0,0,1880,1882,1,0,0,0,1881,1883,3,64,32,0,1882,
1881,1,0,0,0,1882,1883,1,0,0,0,1883,1884,1,0,0,0,1884,1885,5,7,0,0,1885,
1886,5,8,0,0,1886,1887,3,340,170,0,1887,1888,5,10,0,0,1888,355,1,0,0,0,1889,
1893,3,388,194,0,1890,1893,5,218,0,0,1891,1893,3,386,193,0,1892,1889,1,0,
0,0,1892,1890,1,0,0,0,1892,1891,1,0,0,0,1893,357,1,0,0,0,1894,1899,5,6,0,
0,1895,1897,3,360,180,0,1896,1898,5,12,0,0,1897,1896,1,0,0,0,1897,1898,1,
0,0,0,1898,1900,1,0,0,0,1899,1895,1,0,0,0,1899,1900,1,0,0,0,1900,1901,1,
0,0,0,1901,1902,5,7,0,0,1902,359,1,0,0,0,1903,1908,3,362,181,0,1904,1905,
5,12,0,0,1905,1907,3,362,181,0,1906,1904,1,0,0,0,1907,1910,1,0,0,0,1908,
1906,1,0,0,0,1908,1909,1,0,0,0,1909,361,1,0,0,0,1910,1908,1,0,0,0,1911,1912,
3,348,174,0,1912,363,1,0,0,0,1913,1918,3,368,184,0,1914,1915,5,12,0,0,1915,
1917,3,368,184,0,1916,1914,1,0,0,0,1917,1920,1,0,0,0,1918,1916,1,0,0,0,1918,
1919,1,0,0,0,1919,365,1,0,0,0,1920,1918,1,0,0,0,1921,1923,5,82,0,0,1922,
1924,5,217,0,0,1923,1922,1,0,0,0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,
1927,5,6,0,0,1926,1928,3,334,167,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,
1929,1,0,0,0,1929,1931,5,7,0,0,1930,1932,3,64,32,0,1931,1930,1,0,0,0,1931,
1932,1,0,0,0,1932,1933,1,0,0,0,1933,1934,5,8,0,0,1934,1935,3,340,170,0,1935,
1936,5,10,0,0,1936,367,1,0,0,0,1937,1938,6,184,-1,0,1938,1939,5,23,0,0,1939,
1950,3,368,184,19,1940,1941,5,6,0,0,1941,1942,3,368,184,0,1942,1943,5,7,
0,0,1943,1950,1,0,0,0,1944,1950,3,380,190,0,1945,1950,3,112,56,0,1946,1950,
3,32,16,0,1947,1950,3,342,171,0,1948,1950,5,83,0,0,1949,1937,1,0,0,0,1949,
1940,1,0,0,0,1949,1944,1,0,0,0,1949,1945,1,0,0,0,1949,1946,1,0,0,0,1949,
1947,1,0,0,0,1949,1948,1,0,0,0,1950,1992,1,0,0,0,1951,1952,10,13,0,0,1952,
1953,7,9,0,0,1953,1991,3,368,184,14,1954,1955,10,12,0,0,1955,1956,7,10,0,
0,1956,1991,3,368,184,13,1957,1958,10,11,0,0,1958,1959,7,11,0,0,1959,1991,
3,368,184,12,1960,1961,10,10,0,0,1961,1962,7,12,0,0,1962,1991,3,368,184,
11,1963,1964,10,9,0,0,1964,1965,5,41,0,0,1965,1991,3,368,184,10,1966,1967,
10,8,0,0,1967,1968,5,42,0,0,1968,1991,3,368,184,9,1969,1970,10,7,0,0,1970,
1971,5,43,0,0,1971,1991,3,368,184,8,1972,1973,10,6,0,0,1973,1974,5,13,0,
0,1974,1991,3,368,184,7,1975,1976,10,17,0,0,1976,1977,5,17,0,0,1977,1991,
3,32,16,0,1978,1979,10,16,0,0,1979,1991,3,26,13,0,1980,1981,10,15,0,0,1981,
1982,5,17,0,0,1982,1983,5,187,0,0,1983,1984,5,6,0,0,1984,1991,5,7,0,0,1985,
1986,10,14,0,0,1986,1987,5,17,0,0,1987,1988,5,188,0,0,1988,1989,5,6,0,0,
1989,1991,5,7,0,0,1990,1951,1,0,0,0,1990,1954,1,0,0,0,1990,1957,1,0,0,0,
1990,1960,1,0,0,0,1990,1963,1,0,0,0,1990,1966,1,0,0,0,1990,1969,1,0,0,0,
1990,1972,1,0,0,0,1990,1975,1,0,0,0,1990,1978,1,0,0,0,1990,1980,1,0,0,0,
1990,1985,1,0,0,0,1991,1994,1,0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,
1993,369,1,0,0,0,1994,1992,1,0,0,0,1995,1998,3,52,26,0,1996,1997,5,4,0,0,
1997,1999,5,5,0,0,1998,1996,1,0,0,0,1998,1999,1,0,0,0,1999,2002,1,0,0,0,
2000,2002,3,368,184,0,2001,1995,1,0,0,0,2001,2000,1,0,0,0,2002,371,1,0,0,
0,2003,2005,5,94,0,0,2004,2003,1,0,0,0,2004,2005,1,0,0,0,2005,2006,1,0,0,
0,2006,2008,3,374,187,0,2007,2009,3,64,32,0,2008,2007,1,0,0,0,2008,2009,
1,0,0,0,2009,2010,1,0,0,0,2010,2011,5,55,0,0,2011,2012,3,376,188,0,2012,
373,1,0,0,0,2013,2020,5,217,0,0,2014,2016,5,6,0,0,2015,2017,3,334,167,0,
2016,2015,1,0,0,0,2016,2017,1,0,0,0,2017,2018,1,0,0,0,2018,2020,5,7,0,0,
2019,2013,1,0,0,0,2019,2014,1,0,0,0,2020,375,1,0,0,0,2021,2027,3,368,184,
0,2022,2023,5,8,0,0,2023,2024,3,340,170,0,2024,2025,5,10,0,0,2025,2027,1,
0,0,0,2026,2021,1,0,0,0,2026,2022,1,0,0,0,2027,377,1,0,0,0,2028,2029,7,13,
0,0,2029,379,1,0,0,0,2030,2037,5,56,0,0,2031,2037,5,57,0,0,2032,2037,5,218,
0,0,2033,2037,3,382,191,0,2034,2037,5,3,0,0,2035,2037,3,386,193,0,2036,2030,
1,0,0,0,2036,2031,1,0,0,0,2036,2032,1,0,0,0,2036,2033,1,0,0,0,2036,2034,
1,0,0,0,2036,2035,1,0,0,0,2037,381,1,0,0,0,2038,2042,5,219,0,0,2039,2041,
3,384,192,0,2040,2039,1,0,0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,
1,0,0,0,2043,2045,1,0,0,0,2044,2042,1,0,0,0,2045,2046,5,219,0,0,2046,383,
1,0,0,0,2047,2053,5,226,0,0,2048,2049,5,225,0,0,2049,2050,3,368,184,0,2050,
2051,5,9,0,0,2051,2053,1,0,0,0,2052,2047,1,0,0,0,2052,2048,1,0,0,0,2053,
385,1,0,0,0,2054,2057,5,58,0,0,2055,2057,5,59,0,0,2056,2054,1,0,0,0,2056,
2055,1,0,0,0,2057,387,1,0,0,0,2058,2059,5,217,0,0,2059,389,1,0,0,0,2060,
2061,7,14,0,0,2061,391,1,0,0,0,2062,2066,3,394,197,0,2063,2066,5,56,0,0,
2064,2066,5,57,0,0,2065,2062,1,0,0,0,2065,2063,1,0,0,0,2065,2064,1,0,0,0,
2066,393,1,0,0,0,2067,2068,7,15,0,0,2068,395,1,0,0,0,2069,2070,5,151,0,0,
2070,2071,3,356,178,0,2071,397,1,0,0,0,2072,2073,5,152,0,0,2073,2074,3,356,
178,0,2074,399,1,0,0,0,2075,2076,7,16,0,0,2076,401,1,0,0,0,2077,2078,3,32,
16,0,2078,2079,5,186,0,0,2079,2081,3,404,202,0,2080,2082,5,11,0,0,2081,2080,
1,0,0,0,2081,2082,1,0,0,0,2082,403,1,0,0,0,2083,2084,5,202,0,0,2084,405,
1,0,0,0,215,411,418,428,432,440,456,474,477,491,506,515,522,531,536,541,
555,559,570,575,577,584,589,592,595,600,603,606,611,614,617,621,627,638,
645,651,657,665,670,681,686,694,701,710,728,735,742,748,752,758,762,768,
772,778,782,789,796,823,830,837,844,851,858,865,872,879,886,893,900,907,
914,921,923,928,938,948,953,960,978,985,992,1000,1007,1010,1014,1018,1027,
1035,1045,1052,1061,1080,1084,1088,1098,1102,1112,1114,1126,1128,1134,1140,
1146,1164,1168,1175,1182,1186,1192,1195,1197,1203,1207,1212,1215,1217,1231,
1234,1262,1275,1283,1300,1305,1311,1317,1322,1335,1341,1349,1357,1366,1376,
1385,1395,1397,1415,1424,1432,1440,1464,1481,1485,1497,1501,1505,1510,1514,
1518,1526,1550,1562,1572,1574,1578,1615,1625,1642,1662,1665,1669,1677,1681,
1694,1697,1700,1706,1711,1721,1725,1738,1742,1755,1759,1768,1783,1788,1791,
1794,1797,1800,1804,1808,1814,1818,1827,1836,1840,1842,1863,1869,1879,1882,
1892,1897,1899,1908,1918,1923,1927,1931,1949,1990,1992,1998,2001,2004,2008,
2016,2019,2026,2036,2042,2052,2056,2065,2081];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class BitloopsParser extends antlr4.Parser {

    static grammarFileName = "BitloopsParser.g4";
    static literalNames = [ null, null, null, null, "'['", "']'", "'('", 
                            "')'", "'{'", null, "'}'", "';'", "','", "'='", 
                            "'?'", "':'", "'...'", "'.'", "'++'", "'--'", 
                            "'+'", "'-'", "'~'", "'NOT'", "'*'", "'/'", 
                            "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
                            "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", 
                            "'&'", "'^'", "'|'", "'AND'", "'OR'", "'XOR'", 
                            "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                            "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'=>'", 
                            "'null'", null, null, null, null, null, null, 
                            null, "'optional'", "'break'", "'do'", "'instanceof'", 
                            "'typeof'", "'case'", "'else'", "'new'", "'var'", 
                            "'catch'", "'finally'", "'return'", "'void'", 
                            "'continue'", "'for'", "'switch'", "'while'", 
                            "'debugger'", "'function'", "'this'", "'with'", 
                            "'default'", "'if'", "'throw'", "'delete'", 
                            "'in'", "'try'", "'as'", "'from'", "'readonly'", 
                            "'async'", "'throws'", "'applyRules'", "'extends'", 
                            "'const'", "'RepoPort'", "'Props'", "'ReadModel'", 
                            "'DTO'", "'RESTController'", "'GraphQLController'", 
                            "'GRPCController'", "'UseCase'", "'ValueObject'", 
                            "'AggregateRoot'", "'Entity'", "'DomainEvent'", 
                            "'Service'", "'Repository'", "'Factory'", "'DomainError'", 
                            "'ApplicationError'", "'DomainErrors'", "'ApplicationErrors'", 
                            "'OK'", "'Errors'", "'Config'", "'PackagePort'", 
                            "'VO'", "'Rule'", "'isBrokenIf'", "'Root'", 
                            "'constructor'", "'let'", "'private'", "'public'", 
                            "'protected'", "'static'", "'any'", "'double'", 
                            "'float'", "'int32'", "'int64'", "'uint32'", 
                            "'uint64'", "'sint32'", "'sint64'", "'fixed32'", 
                            "'fixed64'", "'sfixed32'", "'sfixed64'", "'bool'", 
                            "'string'", "'bytes'", "'timestamp'", "'Struct'", 
                            "'type'", "'get'", "'set'", "'execute'", "'create'", 
                            "'namespace'", "'declare'", "'JestTest'", "'JestTestStatement'", 
                            "'JestTestStatementList'", "'JestTestFunctionBody'", 
                            "'JestTestExecute'", "'JestTestStructEvaluation'", 
                            "'JestTestDTOEvaluation'", "'JestTestEvaluation'", 
                            "'JestTestReturnOkErrorType'", "'JestTestExpression'", 
                            "'JestTestConstDeclaration'", "'JestTestMethodDefinitionList'", 
                            "'JestTestCreateMethodDeclaration'", "'JestTestPrivateMethodDeclaration'", 
                            "'JestTestPublicMethodDeclaration'", "'JestTestValueObjectDeclaration'", 
                            "'JestTestEntityDeclaration'", "'JestTestCondition'", 
                            "'JestTestVariableDeclaration'", "'JestTestThisDeclaration'", 
                            "'JestTestIsInstanceOf'", "'JestTestValueObjectEvaluation'", 
                            "'JestTestEntityEvaluation'", "'JestTestSingleExpression'", 
                            "'JestTestGetClass'", "'JestTestBuiltInFunction'", 
                            "'JestTestBuiltInClass'", "'JestTestBitloopsPrimaryType'", 
                            "'UUIDv4'", "'is'", "'getClass'", "'toString'", 
                            "'@'", "'method'", "'REST.Methods.GET'", "'REST.Methods.POST'", 
                            "'REST.Methods.PUT'", "'REST.Methods.PATCH'", 
                            "'REST.Methods.DELETE'", "'REST.Methods.OPTIONS'", 
                            "'operation'", "'input'", "'GraphQL.Operations.Mutation'", 
                            "'GraphQL.Operations.Query'", "'GraphQL.Operations.Subscription'", 
                            "'Error'", null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'${'" ];
    static symbolicNames = [ null, "MultiLineComment", "SingleLineComment", 
                             "RegularExpressionLiteral", "OpenBracket", 
                             "CloseBracket", "OpenParen", "CloseParen", 
                             "OpenBrace", "TemplateCloseBrace", "CloseBrace", 
                             "SemiColon", "Comma", "Assign", "QuestionMark", 
                             "Colon", "Ellipsis", "Dot", "PlusPlus", "MinusMinus", 
                             "Plus", "Minus", "BitNot", "Not", "Multiply", 
                             "Divide", "Modulus", "RightShiftArithmetic", 
                             "LeftShiftArithmetic", "RightShiftLogical", 
                             "LessThan", "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                             "Equals_", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                             "BitAnd", "BitXOr", "BitOr", "And", "Or", "Xor", 
                             "MultiplyAssign", "DivideAssign", "ModulusAssign", 
                             "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
                             "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                             "BitAndAssign", "BitXorAssign", "BitOrAssign", 
                             "ARROW", "NullLiteral", "BooleanLiteral", "IntegerLiteral", 
                             "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral", 
                             "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
                             "Optional", "Break", "Do", "Instanceof", "Typeof", 
                             "Case", "Else", "New", "Var", "Catch", "Finally", 
                             "Return", "Void", "Continue", "For", "Switch", 
                             "While", "Debugger", "Function_", "This", "With", 
                             "Default", "If", "Throw", "Delete", "In", "Try", 
                             "As", "From", "ReadOnly", "Async", "Throws", 
                             "ApplyRules", "Extends", "Const", "RepoPort", 
                             "Props", "ReadModel", "DTO", "RESTController", 
                             "GraphQLController", "GRPCController", "UseCase", 
                             "ValueObject", "AggregateRoot", "Entity", "DomainEvent", 
                             "Service", "Repository", "Factory", "DomainError", 
                             "ApplicationError", "DomainErrors", "ApplicationErrors", 
                             "OK", "Errors", "Config", "PackagePort", "VO", 
                             "Rule", "IsBrokenIf", "Root", "Constructor", 
                             "Let", "Private", "Public", "Protected", "Static", 
                             "Any", "Double", "Float", "Int32", "Int64", 
                             "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", 
                             "Fixed64", "Sfixed32", "Sfixed64", "Boolean", 
                             "String", "Bytes", "Timestamp", "Struct", "TypeAlias", 
                             "Get", "Set", "Execute", "Create", "Namespace", 
                             "Declare", "JestTest", "JestTestStatement", 
                             "JestTestStatementList", "JestTestFunctionBody", 
                             "JestTestExecute", "JestTestStructEvaluation", 
                             "JestTestDTOEvaluation", "JestTestEvaluation", 
                             "JestTestReturnOkErrorType", "JestTestExpression", 
                             "JestTestConstDeclaration", "JestTestMethodDefinitionList", 
                             "JestTestCreateMethodDeclaration", "JestTestPrivateMethodDeclaration", 
                             "JestTestPublicMethodDeclaration", "JestTestValueObjectDeclaration", 
                             "JestTestEntityDeclaration", "JestTestCondition", 
                             "JestTestVariableDeclaration", "JestTestThisDeclaration", 
                             "JestTestIsInstanceOf", "JestTestValueObjectEvaluation", 
                             "JestTestEntityEvaluation", "JestTestSingleExpression", 
                             "JestTestGetClass", "JestTestBuiltInFunction", 
                             "JestTestBuiltInClass", "JestTestBitloopsPrimaryType", 
                             "UUIDv4", "Is", "GetClass", "ToString", "At", 
                             "Method", "MethodGet", "MethodPost", "MethodPut", 
                             "MethodPatch", "MethodDelete", "MethodOptions", 
                             "GraphQLOperation", "Input", "OperationMutation", 
                             "OperationQuery", "OperationSubscription", 
                             "ErrorClass", "DTOIdentifier", "ValueObjectIdentifier", 
                             "EntityIdentifier", "ErrorIdentifier", "ControllerIdentifier", 
                             "UseCaseIdentifier", "PackagePortIdentifier", 
                             "PropsIdentifier", "ReadModelIdentifier", "RuleIdentifier", 
                             "RepoPortIdentifier", "DomainErrorIdentifier", 
                             "ValueObjectEvaluationIdentifier", "UpperCaseIdentifier", 
                             "Identifier", "StringLiteral", "BackTick", 
                             "WhiteSpaces", "LineTerminator", "HtmlComment", 
                             "CDataComment", "UnexpectedCharacter", "TemplateStringStartExpression", 
                             "TemplateStringAtom", "WS" ];
    static ruleNames = [ "initializer", "bindingPattern", "fieldList", "evaluationFieldList", 
                         "evaluationField", "propFields", "propsIdentifier", 
                         "bitloopsIdentifiers", "primitives", "identifier", 
                         "upperCaseIdentifier", "struct", "regularErrorTypeEvaluation", 
                         "methodArguments", "openParen", "closeParen", "regularIdentifier", 
                         "regularStringEvaluation", "regularIntegerEvaluation", 
                         "regularDecimalEvaluation", "regularBooleanEvaluation", 
                         "regularStructEvaluation", "regularDTOEvaluation", 
                         "field", "bitloopsPrimaryType", "bitloopsBuiltInClass", 
                         "predefinedType", "typeName", "methodDefinitionList", 
                         "methodDefinition", "typeQuery", "typeQueryExpression", 
                         "typeAnnotation", "parameterList", "requiredParameterList", 
                         "parameter", "optionalParameter", "restParameter", 
                         "requiredParameter", "accessibilityModifier", "identifierOrPattern", 
                         "indexSignature", "enumBody", "enumMemberList", 
                         "enumMember", "namespaceDeclaration", "namespaceName", 
                         "importAliasDeclaration", "decoratorList", "decorator", 
                         "decoratorMemberExpression", "decoratorCallExpression", 
                         "program", "sourceElement", "jestTestDeclaration", 
                         "errorEvaluation", "evaluation", "condition", "returnStatement", 
                         "constDeclaration", "variableDeclaration", "statement", 
                         "builtInFunction", "applyRuleStatementRulesList", 
                         "applyRulesRule", "block", "statementList", "fromBlock", 
                         "multipleImportStatement", "variableDeclarationList", 
                         "emptyStatement_", "expressionStatement", "ifStatement", 
                         "iterationStatement", "varModifier", "continueStatement", 
                         "breakStatement", "withStatement", "switchStatement", 
                         "caseBlock", "caseClauses", "caseClause", "defaultClause", 
                         "labelledStatement", "throwStatement", "tryStatement", 
                         "catchProduction", "finallyProduction", "debuggerStatement", 
                         "domainFieldDeclaration", "isBrokenStatement", 
                         "domainRuleBody", "domainRuleDeclaration", "aggregateDeclaration", 
                         "domainConstDeclaration", "entityDeclaration", 
                         "entityBody", "valueObjectDeclaration", "domainConstDeclarationList", 
                         "publicMethodDeclarationList", "privateMethodDeclarationList", 
                         "domainConstructorDeclaration", "useCaseIdentifier", 
                         "useCaseDeclaration", "propsDeclaration", "readModelDeclaration", 
                         "repoPortDeclaration", "repoPortIdentifier", "aggregateRootIdentifier", 
                         "repoExtendsList", "repoPortMethodDefinitions", 
                         "repoPortExtendableIdentifierList", "repoPortExtendableIdentifier", 
                         "dtoDeclaration", "structDeclaration", "dtoEvaluationIdentifier", 
                         "dtoEvaluation", "valueObjectEvaluation", "domainEvaluationInput", 
                         "entityEvaluation", "structEvaluationIdentifier", 
                         "structEvaluation", "builtInClassEvaluation", "propsEvaluation", 
                         "domainErrorDeclaration", "applicationErrorDeclaration", 
                         "domainErrorIdentifier", "applicationErrorIdentifier", 
                         "useCaseExecuteDeclaration", "restControllerParameters", 
                         "restControllerExecuteDeclaration", "restControllerMethodDeclaration", 
                         "httpMethod", "controllerDeclaration", "graphQLResolverOptions", 
                         "graphQLOperationTypeAssignment", "graphQLOperationInputTypeAssignment", 
                         "graphQLResolverInputType", "graphQLOperation", 
                         "graphQLControllerExecuteDeclaration", "graphQLControllerParameters", 
                         "graphQLControllerReturnType", "dtoIdentifier", 
                         "dtoIdentifiers", "errorIdentifier", "errorIdentifiers", 
                         "valueObjectIdentifier", "entityIdentifier", "domainRuleIdentifier", 
                         "returnOkType", "returnErrorsType", "returnOkErrorType", 
                         "packagePortIdentifier", "packagePortDeclaration", 
                         "methodDeclaration", "privateMethodDeclaration", 
                         "publicMethodDeclaration", "returnPublicMethodType", 
                         "returnPrivateMethodType", "propertyMemberBase", 
                         "indexMemberDeclaration", "generatorMethod", "generatorFunctionDeclaration", 
                         "generatorBlock", "generatorDefinition", "iteratorBlock", 
                         "iteratorDefinition", "formalParameterList", "formalParameterArg", 
                         "lastFormalParameterArg", "functionBody", "arrayLiteral", 
                         "elementList", "objectLiteral", "regularVariableEvaluationORliteralORexpression", 
                         "propertyAssignment", "getAccessor", "setAccessor", 
                         "propertyName", "arguments", "argumentList", "argument", 
                         "expressionSequence", "functionExpressionDeclaration", 
                         "expression", "asExpression", "arrowFunctionDeclaration", 
                         "arrowFunctionParameters", "arrowFunctionBody", 
                         "assignmentOperator", "literal", "templateStringLiteral", 
                         "templateStringAtom", "numericLiteral", "identifierName", 
                         "identifierOrKeyWord", "reservedWord", "keyword", 
                         "getter", "setter", "eos", "isInstanceOf", "classTypes" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = BitloopsParser.ruleNames;
        this.literalNames = BitloopsParser.literalNames;
        this.symbolicNames = BitloopsParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 24:
    	    		return this.bitloopsPrimaryType_sempred(localctx, predIndex);
    	case 50:
    	    		return this.decoratorMemberExpression_sempred(localctx, predIndex);
    	case 184:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    bitloopsPrimaryType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    decoratorMemberExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 13);
    		case 3:
    			return this.precpred(this._ctx, 12);
    		case 4:
    			return this.precpred(this._ctx, 11);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 8);
    		case 8:
    			return this.precpred(this._ctx, 7);
    		case 9:
    			return this.precpred(this._ctx, 6);
    		case 10:
    			return this.precpred(this._ctx, 17);
    		case 11:
    			return this.precpred(this._ctx, 16);
    		case 12:
    			return this.precpred(this._ctx, 15);
    		case 13:
    			return this.precpred(this._ctx, 14);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	initializer() {
	    let localctx = new InitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, BitloopsParser.RULE_initializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 406;
	        this.match(BitloopsParser.Assign);
	        this.state = 407;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingPattern() {
	    let localctx = new BindingPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, BitloopsParser.RULE_bindingPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.OpenBracket:
	            this.state = 409;
	            this.arrayLiteral();
	            break;
	        case BitloopsParser.OpenBrace:
	            this.state = 410;
	            this.objectLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldList() {
	    let localctx = new FieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, BitloopsParser.RULE_fieldList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 413;
	        this.field();
	        this.state = 418;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 414;
	                this.match(BitloopsParser.SemiColon);
	                this.state = 415;
	                this.field(); 
	            }
	            this.state = 420;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1,this._ctx);
	        }

	        this.state = 421;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluationFieldList() {
	    let localctx = new EvaluationFieldListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, BitloopsParser.RULE_evaluationFieldList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        this.evaluationField();
	        this.state = 428;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 424;
	                this.match(BitloopsParser.Comma);
	                this.state = 425;
	                this.evaluationField(); 
	            }
	            this.state = 430;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);
	        }

	        this.state = 432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Comma) {
	            this.state = 431;
	            this.match(BitloopsParser.Comma);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluationField() {
	    let localctx = new EvaluationFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, BitloopsParser.RULE_evaluationField);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 434;
	        this.match(BitloopsParser.Identifier);
	        this.state = 435;
	        this.match(BitloopsParser.Colon);
	        this.state = 436;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propFields() {
	    let localctx = new PropFieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, BitloopsParser.RULE_propFields);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 438;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Optional || _la===BitloopsParser.Void || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (BitloopsParser.Any - 132)) | (1 << (BitloopsParser.Double - 132)) | (1 << (BitloopsParser.Float - 132)) | (1 << (BitloopsParser.Int32 - 132)) | (1 << (BitloopsParser.Int64 - 132)) | (1 << (BitloopsParser.Uint32 - 132)) | (1 << (BitloopsParser.Uint64 - 132)) | (1 << (BitloopsParser.Sint32 - 132)) | (1 << (BitloopsParser.Sint64 - 132)) | (1 << (BitloopsParser.Fixed32 - 132)) | (1 << (BitloopsParser.Fixed64 - 132)) | (1 << (BitloopsParser.Sfixed32 - 132)) | (1 << (BitloopsParser.Sfixed64 - 132)) | (1 << (BitloopsParser.Boolean - 132)) | (1 << (BitloopsParser.String - 132)) | (1 << (BitloopsParser.Bytes - 132)) | (1 << (BitloopsParser.Timestamp - 132)))) !== 0) || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.ControllerIdentifier - 185)) | (1 << (BitloopsParser.UseCaseIdentifier - 185)) | (1 << (BitloopsParser.PropsIdentifier - 185)) | (1 << (BitloopsParser.ReadModelIdentifier - 185)) | (1 << (BitloopsParser.RepoPortIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0)) {
	            this.state = 439;
	            this.fieldList();
	        }

	        this.state = 442;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propsIdentifier() {
	    let localctx = new PropsIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, BitloopsParser.RULE_propsIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 444;
	        this.match(BitloopsParser.PropsIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitloopsIdentifiers() {
	    let localctx = new BitloopsIdentifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, BitloopsParser.RULE_bitloopsIdentifiers);
	    try {
	        this.state = 456;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.UseCaseIdentifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 446;
	            this.match(BitloopsParser.UseCaseIdentifier);
	            break;
	        case BitloopsParser.DTOIdentifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 447;
	            this.dtoIdentifier();
	            break;
	        case BitloopsParser.ControllerIdentifier:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 448;
	            this.match(BitloopsParser.ControllerIdentifier);
	            break;
	        case BitloopsParser.ErrorIdentifier:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 449;
	            this.match(BitloopsParser.ErrorIdentifier);
	            break;
	        case BitloopsParser.PropsIdentifier:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 450;
	            this.propsIdentifier();
	            break;
	        case BitloopsParser.ValueObjectIdentifier:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 451;
	            this.match(BitloopsParser.ValueObjectIdentifier);
	            break;
	        case BitloopsParser.EntityIdentifier:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 452;
	            this.match(BitloopsParser.EntityIdentifier);
	            break;
	        case BitloopsParser.RepoPortIdentifier:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 453;
	            this.match(BitloopsParser.RepoPortIdentifier);
	            break;
	        case BitloopsParser.ReadModelIdentifier:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 454;
	            this.match(BitloopsParser.ReadModelIdentifier);
	            break;
	        case BitloopsParser.UpperCaseIdentifier:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 455;
	            this.match(BitloopsParser.UpperCaseIdentifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitives() {
	    let localctx = new PrimitivesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, BitloopsParser.RULE_primitives);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.Void || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (BitloopsParser.Any - 132)) | (1 << (BitloopsParser.Double - 132)) | (1 << (BitloopsParser.Float - 132)) | (1 << (BitloopsParser.Int32 - 132)) | (1 << (BitloopsParser.Int64 - 132)) | (1 << (BitloopsParser.Uint32 - 132)) | (1 << (BitloopsParser.Uint64 - 132)) | (1 << (BitloopsParser.Sint32 - 132)) | (1 << (BitloopsParser.Sint64 - 132)) | (1 << (BitloopsParser.Fixed32 - 132)) | (1 << (BitloopsParser.Fixed64 - 132)) | (1 << (BitloopsParser.Sfixed32 - 132)) | (1 << (BitloopsParser.Sfixed64 - 132)) | (1 << (BitloopsParser.Boolean - 132)) | (1 << (BitloopsParser.String - 132)) | (1 << (BitloopsParser.Bytes - 132)) | (1 << (BitloopsParser.Timestamp - 132)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, BitloopsParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this.match(BitloopsParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperCaseIdentifier() {
	    let localctx = new UpperCaseIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, BitloopsParser.RULE_upperCaseIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.match(BitloopsParser.UpperCaseIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	struct() {
	    let localctx = new StructContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, BitloopsParser.RULE_struct);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(BitloopsParser.UpperCaseIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularErrorTypeEvaluation() {
	    let localctx = new RegularErrorTypeEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, BitloopsParser.RULE_regularErrorTypeEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 466;
	        this.errorIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodArguments() {
	    let localctx = new MethodArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, BitloopsParser.RULE_methodArguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 468;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 469;
	            this.argumentList();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===BitloopsParser.Comma) {
	                this.state = 470;
	                this.match(BitloopsParser.Comma);
	                this.state = 471;
	                this.argumentList();
	                this.state = 476;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 479;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openParen() {
	    let localctx = new OpenParenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, BitloopsParser.RULE_openParen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.match(BitloopsParser.OpenParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closeParen() {
	    let localctx = new CloseParenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, BitloopsParser.RULE_closeParen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularIdentifier() {
	    let localctx = new RegularIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, BitloopsParser.RULE_regularIdentifier);
	    try {
	        this.state = 491;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            localctx = new IdentifierStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 485;
	            this.match(BitloopsParser.Identifier);
	            break;
	        case BitloopsParser.DTOIdentifier:
	            localctx = new RegularDTOEvaluationStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 486;
	            this.regularDTOEvaluation();
	            break;
	        case BitloopsParser.UpperCaseIdentifier:
	            localctx = new RegularStructEvaluationStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 487;
	            this.regularStructEvaluation();
	            break;
	        case BitloopsParser.ErrorIdentifier:
	            localctx = new RegularErrorTypeEvaluationStringContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 488;
	            this.regularErrorTypeEvaluation();
	            break;
	        case BitloopsParser.Execute:
	            localctx = new ExecuteExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 489;
	            this.match(BitloopsParser.Execute);
	            break;
	        case BitloopsParser.Delete:
	            localctx = new DeleteKeywordContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 490;
	            this.match(BitloopsParser.Delete);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularStringEvaluation() {
	    let localctx = new RegularStringEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, BitloopsParser.RULE_regularStringEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(BitloopsParser.StringLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularIntegerEvaluation() {
	    let localctx = new RegularIntegerEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, BitloopsParser.RULE_regularIntegerEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.match(BitloopsParser.IntegerLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularDecimalEvaluation() {
	    let localctx = new RegularDecimalEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, BitloopsParser.RULE_regularDecimalEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.match(BitloopsParser.DecimalLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularBooleanEvaluation() {
	    let localctx = new RegularBooleanEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, BitloopsParser.RULE_regularBooleanEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.match(BitloopsParser.BooleanLiteral);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularStructEvaluation() {
	    let localctx = new RegularStructEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, BitloopsParser.RULE_regularStructEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.match(BitloopsParser.UpperCaseIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularDTOEvaluation() {
	    let localctx = new RegularDTOEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, BitloopsParser.RULE_regularDTOEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(BitloopsParser.DTOIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, BitloopsParser.RULE_field);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Optional) {
	            this.state = 505;
	            this.match(BitloopsParser.Optional);
	        }

	        this.state = 508;
	        this.bitloopsPrimaryType(0);
	        this.state = 509;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bitloopsPrimaryType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BitloopsPrimaryTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, BitloopsParser.RULE_bitloopsPrimaryType, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Void:
	        case BitloopsParser.Any:
	        case BitloopsParser.Double:
	        case BitloopsParser.Float:
	        case BitloopsParser.Int32:
	        case BitloopsParser.Int64:
	        case BitloopsParser.Uint32:
	        case BitloopsParser.Uint64:
	        case BitloopsParser.Sint32:
	        case BitloopsParser.Sint64:
	        case BitloopsParser.Fixed32:
	        case BitloopsParser.Fixed64:
	        case BitloopsParser.Sfixed32:
	        case BitloopsParser.Sfixed64:
	        case BitloopsParser.Boolean:
	        case BitloopsParser.String:
	        case BitloopsParser.Bytes:
	        case BitloopsParser.Timestamp:
	            localctx = new PrimitivePrimTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 512;
	            this.primitives();
	            break;
	        case BitloopsParser.UUIDv4:
	            localctx = new BitloopsBuiltInClassPrimTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 513;
	            this.bitloopsBuiltInClass();
	            break;
	        case BitloopsParser.DTOIdentifier:
	        case BitloopsParser.ValueObjectIdentifier:
	        case BitloopsParser.EntityIdentifier:
	        case BitloopsParser.ErrorIdentifier:
	        case BitloopsParser.ControllerIdentifier:
	        case BitloopsParser.UseCaseIdentifier:
	        case BitloopsParser.PropsIdentifier:
	        case BitloopsParser.ReadModelIdentifier:
	        case BitloopsParser.RepoPortIdentifier:
	        case BitloopsParser.UpperCaseIdentifier:
	            localctx = new BitloopsIdentifierPrimTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 514;
	            this.bitloopsIdentifiers();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 522;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ArrayBitloopsPrimTypeContext(this, new BitloopsPrimaryTypeContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_bitloopsPrimaryType);
	                this.state = 517;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 518;
	                this.match(BitloopsParser.OpenBracket);
	                this.state = 519;
	                this.match(BitloopsParser.CloseBracket); 
	            }
	            this.state = 524;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	bitloopsBuiltInClass() {
	    let localctx = new BitloopsBuiltInClassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, BitloopsParser.RULE_bitloopsBuiltInClass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 525;
	        this.match(BitloopsParser.UUIDv4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, BitloopsParser.RULE_predefinedType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 527;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.Void || ((((_la - 132)) & ~0x1f) == 0 && ((1 << (_la - 132)) & ((1 << (BitloopsParser.Any - 132)) | (1 << (BitloopsParser.Int32 - 132)) | (1 << (BitloopsParser.Boolean - 132)) | (1 << (BitloopsParser.String - 132)) | (1 << (BitloopsParser.Struct - 132)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, BitloopsParser.RULE_typeName);
	    try {
	        this.state = 531;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 529;
	            this.match(BitloopsParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 530;
	            this.namespaceName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinitionList() {
	    let localctx = new MethodDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, BitloopsParser.RULE_methodDefinitionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Identifier) {
	            this.state = 533;
	            this.methodDefinition();
	            this.state = 538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDefinition() {
	    let localctx = new MethodDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, BitloopsParser.RULE_methodDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.identifier();
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 540;
	            this.formalParameterList();
	        }

	        this.state = 543;
	        this.typeAnnotation();
	        this.state = 544;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQuery() {
	    let localctx = new TypeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, BitloopsParser.RULE_typeQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        this.match(BitloopsParser.Typeof);
	        this.state = 547;
	        this.typeQueryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeQueryExpression() {
	    let localctx = new TypeQueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, BitloopsParser.RULE_typeQueryExpression);
	    try {
	        this.state = 559;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 549;
	            this.match(BitloopsParser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 553; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 550;
	            		this.identifierName();
	            		this.state = 551;
	            		this.match(BitloopsParser.Dot);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 555; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,15, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 557;
	            this.identifierName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAnnotation() {
	    let localctx = new TypeAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, BitloopsParser.RULE_typeAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.match(BitloopsParser.Colon);
	        this.state = 562;
	        this.bitloopsPrimaryType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, BitloopsParser.RULE_parameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Ellipsis:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 564;
	            this.restParameter();
	            break;
	        case BitloopsParser.OpenBracket:
	        case BitloopsParser.OpenBrace:
	        case BitloopsParser.Private:
	        case BitloopsParser.Public:
	        case BitloopsParser.At:
	        case BitloopsParser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.parameter();
	            this.state = 570;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,17,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 566;
	                    this.match(BitloopsParser.Comma);
	                    this.state = 567;
	                    this.parameter(); 
	                }
	                this.state = 572;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,17,this._ctx);
	            }

	            this.state = 575;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Comma) {
	                this.state = 573;
	                this.match(BitloopsParser.Comma);
	                this.state = 574;
	                this.restParameter();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiredParameterList() {
	    let localctx = new RequiredParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, BitloopsParser.RULE_requiredParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.requiredParameter();
	        this.state = 584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 580;
	            this.match(BitloopsParser.Comma);
	            this.state = 581;
	            this.requiredParameter();
	            this.state = 586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, BitloopsParser.RULE_parameter);
	    try {
	        this.state = 589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 587;
	            this.requiredParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 588;
	            this.optionalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalParameter() {
	    let localctx = new OptionalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, BitloopsParser.RULE_optionalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 592;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.At) {
	            this.state = 591;
	            this.decoratorList();
	        }

	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Private || _la===BitloopsParser.Public) {
	            this.state = 594;
	            this.accessibilityModifier();
	        }

	        this.state = 597;
	        this.identifierOrPattern();
	        this.state = 606;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.QuestionMark:
	            this.state = 598;
	            this.match(BitloopsParser.QuestionMark);
	            this.state = 600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Colon) {
	                this.state = 599;
	                this.typeAnnotation();
	            }

	            break;
	        case BitloopsParser.Assign:
	        case BitloopsParser.Colon:
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Colon) {
	                this.state = 602;
	                this.typeAnnotation();
	            }

	            this.state = 605;
	            this.initializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restParameter() {
	    let localctx = new RestParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, BitloopsParser.RULE_restParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this.match(BitloopsParser.Ellipsis);
	        this.state = 609;
	        this.expression(0);
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 610;
	            this.typeAnnotation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiredParameter() {
	    let localctx = new RequiredParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, BitloopsParser.RULE_requiredParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.At) {
	            this.state = 613;
	            this.decoratorList();
	        }

	        this.state = 617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Private || _la===BitloopsParser.Public) {
	            this.state = 616;
	            this.accessibilityModifier();
	        }

	        this.state = 619;
	        this.identifierOrPattern();
	        this.state = 621;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 620;
	            this.typeAnnotation();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accessibilityModifier() {
	    let localctx = new AccessibilityModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, BitloopsParser.RULE_accessibilityModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 623;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.Private || _la===BitloopsParser.Public)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrPattern() {
	    let localctx = new IdentifierOrPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, BitloopsParser.RULE_identifierOrPattern);
	    try {
	        this.state = 627;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 625;
	            this.identifierName();
	            break;
	        case BitloopsParser.OpenBracket:
	        case BitloopsParser.OpenBrace:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 626;
	            this.bindingPattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexSignature() {
	    let localctx = new IndexSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, BitloopsParser.RULE_indexSignature);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(BitloopsParser.OpenBracket);
	        this.state = 630;
	        this.match(BitloopsParser.Identifier);
	        this.state = 631;
	        this.match(BitloopsParser.Colon);
	        this.state = 632;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.Int32 || _la===BitloopsParser.String)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 633;
	        this.match(BitloopsParser.CloseBracket);
	        this.state = 634;
	        this.typeAnnotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, BitloopsParser.RULE_enumBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.enumMemberList();
	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Comma) {
	            this.state = 637;
	            this.match(BitloopsParser.Comma);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumMemberList() {
	    let localctx = new EnumMemberListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, BitloopsParser.RULE_enumMemberList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 640;
	        this.enumMember();
	        this.state = 645;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 641;
	                this.match(BitloopsParser.Comma);
	                this.state = 642;
	                this.enumMember(); 
	            }
	            this.state = 647;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumMember() {
	    let localctx = new EnumMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, BitloopsParser.RULE_enumMember);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.propertyName();
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Assign) {
	            this.state = 649;
	            this.match(BitloopsParser.Assign);
	            this.state = 650;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceDeclaration() {
	    let localctx = new NamespaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, BitloopsParser.RULE_namespaceDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 653;
	        this.match(BitloopsParser.Namespace);
	        this.state = 654;
	        this.namespaceName();
	        this.state = 655;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.SemiColon) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.Break - 56)) | (1 << (BitloopsParser.Do - 56)) | (1 << (BitloopsParser.Return - 56)) | (1 << (BitloopsParser.For - 56)) | (1 << (BitloopsParser.Switch - 56)) | (1 << (BitloopsParser.While - 56)) | (1 << (BitloopsParser.This - 56)) | (1 << (BitloopsParser.If - 56)) | (1 << (BitloopsParser.Throw - 56)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (BitloopsParser.Delete - 88)) | (1 << (BitloopsParser.Try - 88)) | (1 << (BitloopsParser.Async - 88)) | (1 << (BitloopsParser.ApplyRules - 88)) | (1 << (BitloopsParser.Const - 88)) | (1 << (BitloopsParser.Props - 88)))) !== 0) || _la===BitloopsParser.Execute || _la===BitloopsParser.Namespace || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 656;
	            this.statementList();
	        }

	        this.state = 659;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namespaceName() {
	    let localctx = new NamespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, BitloopsParser.RULE_namespaceName);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 661;
	        this.match(BitloopsParser.Identifier);
	        this.state = 670;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Dot) {
	            this.state = 663; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 662;
	                this.match(BitloopsParser.Dot);
	                this.state = 665; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===BitloopsParser.Dot);
	            this.state = 667;
	            this.match(BitloopsParser.Identifier);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importAliasDeclaration() {
	    let localctx = new ImportAliasDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, BitloopsParser.RULE_importAliasDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(BitloopsParser.Identifier);
	        this.state = 674;
	        this.match(BitloopsParser.Assign);
	        this.state = 675;
	        this.namespaceName();
	        this.state = 676;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decoratorList() {
	    let localctx = new DecoratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, BitloopsParser.RULE_decoratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 679; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 678;
	            this.decorator();
	            this.state = 681; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===BitloopsParser.At);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorator() {
	    let localctx = new DecoratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, BitloopsParser.RULE_decorator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.match(BitloopsParser.At);
	        this.state = 686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 684;
	            this.decoratorMemberExpression(0);
	            break;

	        case 2:
	            this.state = 685;
	            this.decoratorCallExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	decoratorMemberExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DecoratorMemberExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 100;
	    this.enterRecursionRule(localctx, 100, BitloopsParser.RULE_decoratorMemberExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 694;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            this.state = 689;
	            this.match(BitloopsParser.Identifier);
	            break;
	        case BitloopsParser.OpenParen:
	            this.state = 690;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 691;
	            this.expression(0);
	            this.state = 692;
	            this.match(BitloopsParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 701;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new DecoratorMemberExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_decoratorMemberExpression);
	                this.state = 696;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 697;
	                this.match(BitloopsParser.Dot);
	                this.state = 698;
	                this.identifierName(); 
	            }
	            this.state = 703;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	decoratorCallExpression() {
	    let localctx = new DecoratorCallExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, BitloopsParser.RULE_decoratorCallExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 704;
	        this.decoratorMemberExpression(0);
	        this.state = 705;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, BitloopsParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 99)) & ~0x1f) == 0 && ((1 << (_la - 99)) & ((1 << (BitloopsParser.RepoPort - 99)) | (1 << (BitloopsParser.Props - 99)) | (1 << (BitloopsParser.ReadModel - 99)) | (1 << (BitloopsParser.DTO - 99)) | (1 << (BitloopsParser.RESTController - 99)) | (1 << (BitloopsParser.GraphQLController - 99)) | (1 << (BitloopsParser.UseCase - 99)) | (1 << (BitloopsParser.ValueObject - 99)) | (1 << (BitloopsParser.Entity - 99)) | (1 << (BitloopsParser.DomainError - 99)) | (1 << (BitloopsParser.ApplicationError - 99)) | (1 << (BitloopsParser.PackagePort - 99)) | (1 << (BitloopsParser.Rule - 99)) | (1 << (BitloopsParser.Root - 99)))) !== 0) || ((((_la - 149)) & ~0x1f) == 0 && ((1 << (_la - 149)) & ((1 << (BitloopsParser.Struct - 149)) | (1 << (BitloopsParser.JestTest - 149)) | (1 << (BitloopsParser.JestTestStatement - 149)) | (1 << (BitloopsParser.JestTestStatementList - 149)) | (1 << (BitloopsParser.JestTestFunctionBody - 149)) | (1 << (BitloopsParser.JestTestStructEvaluation - 149)) | (1 << (BitloopsParser.JestTestDTOEvaluation - 149)) | (1 << (BitloopsParser.JestTestEvaluation - 149)) | (1 << (BitloopsParser.JestTestReturnOkErrorType - 149)) | (1 << (BitloopsParser.JestTestExpression - 149)) | (1 << (BitloopsParser.JestTestConstDeclaration - 149)) | (1 << (BitloopsParser.JestTestMethodDefinitionList - 149)) | (1 << (BitloopsParser.JestTestCreateMethodDeclaration - 149)) | (1 << (BitloopsParser.JestTestPrivateMethodDeclaration - 149)) | (1 << (BitloopsParser.JestTestPublicMethodDeclaration - 149)) | (1 << (BitloopsParser.JestTestValueObjectDeclaration - 149)) | (1 << (BitloopsParser.JestTestEntityDeclaration - 149)) | (1 << (BitloopsParser.JestTestCondition - 149)) | (1 << (BitloopsParser.JestTestVariableDeclaration - 149)) | (1 << (BitloopsParser.JestTestIsInstanceOf - 149)) | (1 << (BitloopsParser.JestTestValueObjectEvaluation - 149)) | (1 << (BitloopsParser.JestTestEntityEvaluation - 149)))) !== 0) || ((((_la - 182)) & ~0x1f) == 0 && ((1 << (_la - 182)) & ((1 << (BitloopsParser.JestTestBuiltInFunction - 182)) | (1 << (BitloopsParser.JestTestBuiltInClass - 182)) | (1 << (BitloopsParser.JestTestBitloopsPrimaryType - 182)))) !== 0)) {
	            this.state = 707;
	            this.sourceElement();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceElement() {
	    let localctx = new SourceElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, BitloopsParser.RULE_sourceElement);
	    try {
	        this.state = 728;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.DTO:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 713;
	            this.dtoDeclaration();
	            break;
	        case BitloopsParser.DomainError:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 714;
	            this.domainErrorDeclaration();
	            break;
	        case BitloopsParser.ApplicationError:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 715;
	            this.applicationErrorDeclaration();
	            break;
	        case BitloopsParser.RESTController:
	        case BitloopsParser.GraphQLController:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 716;
	            this.controllerDeclaration();
	            break;
	        case BitloopsParser.JestTest:
	        case BitloopsParser.JestTestStatement:
	        case BitloopsParser.JestTestStatementList:
	        case BitloopsParser.JestTestFunctionBody:
	        case BitloopsParser.JestTestStructEvaluation:
	        case BitloopsParser.JestTestDTOEvaluation:
	        case BitloopsParser.JestTestEvaluation:
	        case BitloopsParser.JestTestReturnOkErrorType:
	        case BitloopsParser.JestTestExpression:
	        case BitloopsParser.JestTestConstDeclaration:
	        case BitloopsParser.JestTestMethodDefinitionList:
	        case BitloopsParser.JestTestCreateMethodDeclaration:
	        case BitloopsParser.JestTestPrivateMethodDeclaration:
	        case BitloopsParser.JestTestPublicMethodDeclaration:
	        case BitloopsParser.JestTestValueObjectDeclaration:
	        case BitloopsParser.JestTestEntityDeclaration:
	        case BitloopsParser.JestTestCondition:
	        case BitloopsParser.JestTestVariableDeclaration:
	        case BitloopsParser.JestTestIsInstanceOf:
	        case BitloopsParser.JestTestValueObjectEvaluation:
	        case BitloopsParser.JestTestEntityEvaluation:
	        case BitloopsParser.JestTestBuiltInFunction:
	        case BitloopsParser.JestTestBuiltInClass:
	        case BitloopsParser.JestTestBitloopsPrimaryType:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 717;
	            this.jestTestDeclaration();
	            break;
	        case BitloopsParser.Props:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 718;
	            this.propsDeclaration();
	            break;
	        case BitloopsParser.Struct:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 719;
	            this.structDeclaration();
	            break;
	        case BitloopsParser.UseCase:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 720;
	            this.useCaseDeclaration();
	            break;
	        case BitloopsParser.PackagePort:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 721;
	            this.packagePortDeclaration();
	            break;
	        case BitloopsParser.ValueObject:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 722;
	            this.valueObjectDeclaration();
	            break;
	        case BitloopsParser.Rule:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 723;
	            this.domainRuleDeclaration();
	            break;
	        case BitloopsParser.Entity:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 724;
	            this.entityDeclaration();
	            break;
	        case BitloopsParser.Root:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 725;
	            this.aggregateDeclaration();
	            break;
	        case BitloopsParser.RepoPort:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 726;
	            this.repoPortDeclaration();
	            break;
	        case BitloopsParser.ReadModel:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 727;
	            this.readModelDeclaration();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jestTestDeclaration() {
	    let localctx = new JestTestDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, BitloopsParser.RULE_jestTestDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 730;
	            this.match(BitloopsParser.JestTestFunctionBody);
	            this.state = 731;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 732;
	            this.functionBody();
	            this.state = 733;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 734;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 737;
	            this.match(BitloopsParser.JestTestStatementList);
	            this.state = 738;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 739;
	            this.statementList();
	            this.state = 740;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 742;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 741;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 744;
	            this.match(BitloopsParser.JestTestStatement);
	            this.state = 745;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 746;
	            this.statement();
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 747;
	                this.match(BitloopsParser.SemiColon);
	            }

	            this.state = 750;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 751;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 754;
	            this.match(BitloopsParser.JestTestStructEvaluation);
	            this.state = 755;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 756;
	            this.structEvaluation();
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 757;
	                this.match(BitloopsParser.SemiColon);
	            }

	            this.state = 760;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 761;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 764;
	            this.match(BitloopsParser.JestTestDTOEvaluation);
	            this.state = 765;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 766;
	            this.dtoEvaluation();
	            this.state = 768;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 767;
	                this.match(BitloopsParser.SemiColon);
	            }

	            this.state = 770;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 772;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 771;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 774;
	            this.match(BitloopsParser.JestTestEvaluation);
	            this.state = 775;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 776;
	            this.evaluation();
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 777;
	                this.match(BitloopsParser.SemiColon);
	            }

	            this.state = 780;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 781;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 784;
	            this.match(BitloopsParser.JestTestIsInstanceOf);
	            this.state = 785;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 786;
	            this.isInstanceOf();
	            this.state = 787;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 788;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 791;
	            this.match(BitloopsParser.JestTest);
	            this.state = 792;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 793;
	            this.formalParameterList();
	            this.state = 794;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 795;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 798;
	            this.match(BitloopsParser.JestTest);
	            this.state = 799;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 800;
	            this.restControllerParameters();
	            this.state = 801;
	            this.match(BitloopsParser.CloseBrace);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 803;
	            this.match(BitloopsParser.JestTest);
	            this.state = 804;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 805;
	            this.restControllerExecuteDeclaration();
	            this.state = 806;
	            this.match(BitloopsParser.CloseBrace);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 808;
	            this.match(BitloopsParser.JestTest);
	            this.state = 809;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 810;
	            this.restControllerMethodDeclaration();
	            this.state = 811;
	            this.match(BitloopsParser.CloseBrace);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 813;
	            this.match(BitloopsParser.JestTestBuiltInClass);
	            this.state = 814;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 815;
	            this.builtInClassEvaluation();
	            this.state = 816;
	            this.match(BitloopsParser.CloseBrace);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 818;
	            this.match(BitloopsParser.JestTestReturnOkErrorType);
	            this.state = 819;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 820;
	            this.returnOkErrorType();
	            this.state = 821;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 822;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 825;
	            this.match(BitloopsParser.JestTestConstDeclaration);
	            this.state = 826;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 827;
	            this.constDeclaration();
	            this.state = 828;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 830;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 829;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 832;
	            this.match(BitloopsParser.JestTestExpression);
	            this.state = 833;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 834;
	            this.expression(0);
	            this.state = 835;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 836;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 839;
	            this.match(BitloopsParser.JestTestMethodDefinitionList);
	            this.state = 840;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 841;
	            this.methodDefinitionList();
	            this.state = 842;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 843;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 846;
	            this.match(BitloopsParser.JestTestCreateMethodDeclaration);
	            this.state = 847;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 848;
	            this.domainConstructorDeclaration();
	            this.state = 849;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 850;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 853;
	            this.match(BitloopsParser.JestTestPrivateMethodDeclaration);
	            this.state = 854;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 855;
	            this.privateMethodDeclaration();
	            this.state = 856;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 857;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 860;
	            this.match(BitloopsParser.JestTestPublicMethodDeclaration);
	            this.state = 861;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 862;
	            this.publicMethodDeclaration();
	            this.state = 863;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 864;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 867;
	            this.match(BitloopsParser.JestTestValueObjectDeclaration);
	            this.state = 868;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 869;
	            this.valueObjectDeclaration();
	            this.state = 870;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 872;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 871;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 874;
	            this.match(BitloopsParser.JestTestEntityDeclaration);
	            this.state = 875;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 876;
	            this.entityDeclaration();
	            this.state = 877;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 878;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 881;
	            this.match(BitloopsParser.JestTestCondition);
	            this.state = 882;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 883;
	            this.condition();
	            this.state = 884;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 886;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 885;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 888;
	            this.match(BitloopsParser.JestTestVariableDeclaration);
	            this.state = 889;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 890;
	            this.variableDeclaration();
	            this.state = 891;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 892;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 895;
	            this.match(BitloopsParser.JestTestValueObjectEvaluation);
	            this.state = 896;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 897;
	            this.valueObjectEvaluation();
	            this.state = 898;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 900;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 899;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 902;
	            this.match(BitloopsParser.JestTestEntityEvaluation);
	            this.state = 903;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 904;
	            this.entityEvaluation();
	            this.state = 905;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 906;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 909;
	            this.match(BitloopsParser.JestTestBuiltInFunction);
	            this.state = 910;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 911;
	            this.builtInFunction();
	            this.state = 912;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 913;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 916;
	            this.match(BitloopsParser.JestTestBitloopsPrimaryType);
	            this.state = 917;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 918;
	            this.bitloopsPrimaryType(0);
	            this.state = 919;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 921;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 920;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorEvaluation() {
	    let localctx = new ErrorEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, BitloopsParser.RULE_errorEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 925;
	        this.match(BitloopsParser.ErrorIdentifier);
	        this.state = 926;
	        this.methodArguments();
	        this.state = 928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        if(la_===1) {
	            this.state = 927;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	evaluation() {
	    let localctx = new EvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, BitloopsParser.RULE_evaluation);
	    try {
	        this.state = 938;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 930;
	            this.isInstanceOf();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 931;
	            this.builtInClassEvaluation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 932;
	            this.errorEvaluation();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 933;
	            this.dtoEvaluation();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 934;
	            this.valueObjectEvaluation();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 935;
	            this.entityEvaluation();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 936;
	            this.propsEvaluation();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 937;
	            this.structEvaluation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	condition() {
	    let localctx = new ConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, BitloopsParser.RULE_condition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, BitloopsParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 942;
	        this.match(BitloopsParser.Return);
	        this.state = 943;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constDeclaration() {
	    let localctx = new ConstDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, BitloopsParser.RULE_constDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.match(BitloopsParser.Const);
	        this.state = 946;
	        this.identifier();
	        this.state = 948;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 947;
	            this.typeAnnotation();
	        }

	        this.state = 950;
	        this.match(BitloopsParser.Assign);
	        this.state = 951;
	        this.expression(0);
	        this.state = 953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 952;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, BitloopsParser.RULE_variableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 955;
	        this.identifier();
	        this.state = 956;
	        this.typeAnnotation();
	        this.state = 957;
	        this.match(BitloopsParser.Assign);
	        this.state = 958;
	        this.expression(0);
	        this.state = 960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        if(la_===1) {
	            this.state = 959;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, BitloopsParser.RULE_statement);
	    try {
	        this.state = 978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 962;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 963;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 964;
	            this.constDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 965;
	            this.variableDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 966;
	            this.emptyStatement_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 967;
	            this.propsDeclaration();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 968;
	            this.namespaceDeclaration();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 969;
	            this.ifStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 970;
	            this.breakStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 971;
	            this.switchStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 972;
	            this.iterationStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 973;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 974;
	            this.throwStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 975;
	            this.tryStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 976;
	            this.arrowFunctionDeclaration();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 977;
	            this.builtInFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInFunction() {
	    let localctx = new BuiltInFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, BitloopsParser.RULE_builtInFunction);
	    try {
	        localctx = new ApplyRulesStatementContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.match(BitloopsParser.ApplyRules);
	        this.state = 981;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 982;
	        this.applyRuleStatementRulesList();
	        this.state = 983;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 985;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 984;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	applyRuleStatementRulesList() {
	    let localctx = new ApplyRuleStatementRulesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, BitloopsParser.RULE_applyRuleStatementRulesList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.applyRulesRule();
	        this.state = 992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 988;
	            this.match(BitloopsParser.Comma);
	            this.state = 989;
	            this.applyRulesRule();
	            this.state = 994;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	applyRulesRule() {
	    let localctx = new ApplyRulesRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, BitloopsParser.RULE_applyRulesRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.domainRuleIdentifier();
	        this.state = 996;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, BitloopsParser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 998;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.SemiColon) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.Break - 56)) | (1 << (BitloopsParser.Do - 56)) | (1 << (BitloopsParser.Return - 56)) | (1 << (BitloopsParser.For - 56)) | (1 << (BitloopsParser.Switch - 56)) | (1 << (BitloopsParser.While - 56)) | (1 << (BitloopsParser.This - 56)) | (1 << (BitloopsParser.If - 56)) | (1 << (BitloopsParser.Throw - 56)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (BitloopsParser.Delete - 88)) | (1 << (BitloopsParser.Try - 88)) | (1 << (BitloopsParser.Async - 88)) | (1 << (BitloopsParser.ApplyRules - 88)) | (1 << (BitloopsParser.Const - 88)) | (1 << (BitloopsParser.Props - 88)))) !== 0) || _la===BitloopsParser.Execute || _la===BitloopsParser.Namespace || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 999;
	            this.statementList();
	        }

	        this.state = 1002;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementList() {
	    let localctx = new StatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, BitloopsParser.RULE_statementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1005; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1004;
	        		this.statement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1007; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,81, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 1010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        if(la_===1) {
	            this.state = 1009;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromBlock() {
	    let localctx = new FromBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, BitloopsParser.RULE_fromBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Multiply:
	            this.state = 1012;
	            this.match(BitloopsParser.Multiply);
	            break;
	        case BitloopsParser.OpenBrace:
	        case BitloopsParser.Identifier:
	            this.state = 1013;
	            this.multipleImportStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.As) {
	            this.state = 1016;
	            this.match(BitloopsParser.As);
	            this.state = 1017;
	            this.identifierName();
	        }

	        this.state = 1020;
	        this.match(BitloopsParser.From);
	        this.state = 1021;
	        this.match(BitloopsParser.StringLiteral);
	        this.state = 1022;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleImportStatement() {
	    let localctx = new MultipleImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, BitloopsParser.RULE_multipleImportStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1027;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1024;
	            this.identifierName();
	            this.state = 1025;
	            this.match(BitloopsParser.Comma);
	        }

	        this.state = 1029;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1030;
	        this.identifierName();
	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 1031;
	            this.match(BitloopsParser.Comma);
	            this.state = 1032;
	            this.identifierName();
	            this.state = 1037;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1038;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarationList() {
	    let localctx = new VariableDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, BitloopsParser.RULE_variableDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1040;
	        this.variableDeclaration();
	        this.state = 1045;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 1041;
	            this.match(BitloopsParser.Comma);
	            this.state = 1042;
	            this.variableDeclaration();
	            this.state = 1047;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, BitloopsParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1048;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, BitloopsParser.RULE_expressionStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1050;
	        this.expressionSequence();
	        this.state = 1052;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1051;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, BitloopsParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1054;
	        this.match(BitloopsParser.If);
	        this.state = 1055;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1056;
	        this.condition();
	        this.state = 1057;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1058;
	        this.statement();
	        this.state = 1061;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 1059;
	            this.match(BitloopsParser.Else);
	            this.state = 1060;
	            this.statement();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterationStatement() {
	    let localctx = new IterationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, BitloopsParser.RULE_iterationStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DoStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1063;
	            this.match(BitloopsParser.Do);
	            this.state = 1064;
	            this.statement();
	            this.state = 1065;
	            this.match(BitloopsParser.While);
	            this.state = 1066;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1067;
	            this.expressionSequence();
	            this.state = 1068;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1069;
	            this.eos();
	            break;

	        case 2:
	            localctx = new WhileStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.match(BitloopsParser.While);
	            this.state = 1072;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1073;
	            this.expressionSequence();
	            this.state = 1074;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1075;
	            this.statement();
	            break;

	        case 3:
	            localctx = new ForStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1077;
	            this.match(BitloopsParser.For);
	            this.state = 1078;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1079;
	                this.expressionSequence();
	            }

	            this.state = 1082;
	            this.match(BitloopsParser.SemiColon);
	            this.state = 1084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1083;
	                this.expressionSequence();
	            }

	            this.state = 1086;
	            this.match(BitloopsParser.SemiColon);
	            this.state = 1088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1087;
	                this.expressionSequence();
	            }

	            this.state = 1090;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1091;
	            this.statement();
	            break;

	        case 4:
	            localctx = new ForVarStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1092;
	            this.match(BitloopsParser.For);
	            this.state = 1093;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1094;
	            this.varModifier();
	            this.state = 1095;
	            this.variableDeclarationList();
	            this.state = 1096;
	            this.match(BitloopsParser.SemiColon);
	            this.state = 1098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1097;
	                this.expressionSequence();
	            }

	            this.state = 1100;
	            this.match(BitloopsParser.SemiColon);
	            this.state = 1102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1101;
	                this.expressionSequence();
	            }

	            this.state = 1104;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1105;
	            this.statement();
	            break;

	        case 5:
	            localctx = new ForInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1107;
	            this.match(BitloopsParser.For);
	            this.state = 1108;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1109;
	            this.expression(0);
	            this.state = 1114;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case BitloopsParser.In:
	                this.state = 1110;
	                this.match(BitloopsParser.In);
	                break;
	            case BitloopsParser.RegularExpressionLiteral:
	            case BitloopsParser.OpenBracket:
	            case BitloopsParser.OpenParen:
	            case BitloopsParser.OpenBrace:
	            case BitloopsParser.Not:
	            case BitloopsParser.NullLiteral:
	            case BitloopsParser.BooleanLiteral:
	            case BitloopsParser.IntegerLiteral:
	            case BitloopsParser.DecimalLiteral:
	            case BitloopsParser.This:
	            case BitloopsParser.Delete:
	            case BitloopsParser.Execute:
	            case BitloopsParser.UUIDv4:
	            case BitloopsParser.DTOIdentifier:
	            case BitloopsParser.ValueObjectIdentifier:
	            case BitloopsParser.EntityIdentifier:
	            case BitloopsParser.ErrorIdentifier:
	            case BitloopsParser.UpperCaseIdentifier:
	            case BitloopsParser.Identifier:
	            case BitloopsParser.StringLiteral:
	            case BitloopsParser.BackTick:
	                this.state = 1112;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	                if(la_===1) {
	                    this.state = 1111;
	                    this.match(BitloopsParser.Identifier);

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1116;
	            this.expressionSequence();
	            this.state = 1117;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1118;
	            this.statement();
	            break;

	        case 6:
	            localctx = new ForVarInStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1120;
	            this.match(BitloopsParser.For);
	            this.state = 1121;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1122;
	            this.varModifier();
	            this.state = 1123;
	            this.variableDeclaration();
	            this.state = 1128;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case BitloopsParser.In:
	                this.state = 1124;
	                this.match(BitloopsParser.In);
	                break;
	            case BitloopsParser.RegularExpressionLiteral:
	            case BitloopsParser.OpenBracket:
	            case BitloopsParser.OpenParen:
	            case BitloopsParser.OpenBrace:
	            case BitloopsParser.Not:
	            case BitloopsParser.NullLiteral:
	            case BitloopsParser.BooleanLiteral:
	            case BitloopsParser.IntegerLiteral:
	            case BitloopsParser.DecimalLiteral:
	            case BitloopsParser.This:
	            case BitloopsParser.Delete:
	            case BitloopsParser.Execute:
	            case BitloopsParser.UUIDv4:
	            case BitloopsParser.DTOIdentifier:
	            case BitloopsParser.ValueObjectIdentifier:
	            case BitloopsParser.EntityIdentifier:
	            case BitloopsParser.ErrorIdentifier:
	            case BitloopsParser.UpperCaseIdentifier:
	            case BitloopsParser.Identifier:
	            case BitloopsParser.StringLiteral:
	            case BitloopsParser.BackTick:
	                this.state = 1126;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	                if(la_===1) {
	                    this.state = 1125;
	                    this.match(BitloopsParser.Identifier);

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1130;
	            this.expressionSequence();
	            this.state = 1131;
	            this.match(BitloopsParser.CloseParen);
	            this.state = 1132;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varModifier() {
	    let localctx = new VarModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, BitloopsParser.RULE_varModifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.Var || _la===BitloopsParser.Const || _la===BitloopsParser.Let)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, BitloopsParser.RULE_continueStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1138;
	        this.match(BitloopsParser.Continue);
	        this.state = 1140;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1139;
	            this.match(BitloopsParser.Identifier);
	        }

	        this.state = 1142;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, BitloopsParser.RULE_breakStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1144;
	        this.match(BitloopsParser.Break);
	        this.state = 1146;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1145;
	            this.match(BitloopsParser.Identifier);
	        }

	        this.state = 1148;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, BitloopsParser.RULE_withStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1150;
	        this.match(BitloopsParser.With);
	        this.state = 1151;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1152;
	        this.expressionSequence();
	        this.state = 1153;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1154;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, BitloopsParser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this.match(BitloopsParser.Switch);
	        this.state = 1157;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1158;
	        this.condition();
	        this.state = 1159;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1160;
	        this.caseBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseBlock() {
	    let localctx = new CaseBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, BitloopsParser.RULE_caseBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1162;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1164;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Case) {
	            this.state = 1163;
	            this.caseClauses();
	        }

	        this.state = 1166;
	        this.defaultClause();
	        this.state = 1168;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Case) {
	            this.state = 1167;
	            this.caseClauses();
	        }

	        this.state = 1170;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClauses() {
	    let localctx = new CaseClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, BitloopsParser.RULE_caseClauses);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1172;
	            this.caseClause();
	            this.state = 1175; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===BitloopsParser.Case);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseClause() {
	    let localctx = new CaseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, BitloopsParser.RULE_caseClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 1197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1177;
	            this.match(BitloopsParser.Case);
	            this.state = 1178;
	            this.expression(0);
	            this.state = 1179;
	            this.match(BitloopsParser.Colon);
	            this.state = 1180;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 1182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.SemiColon) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.Break - 56)) | (1 << (BitloopsParser.Do - 56)) | (1 << (BitloopsParser.Return - 56)) | (1 << (BitloopsParser.For - 56)) | (1 << (BitloopsParser.Switch - 56)) | (1 << (BitloopsParser.While - 56)) | (1 << (BitloopsParser.This - 56)) | (1 << (BitloopsParser.If - 56)) | (1 << (BitloopsParser.Throw - 56)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (BitloopsParser.Delete - 88)) | (1 << (BitloopsParser.Try - 88)) | (1 << (BitloopsParser.Async - 88)) | (1 << (BitloopsParser.ApplyRules - 88)) | (1 << (BitloopsParser.Const - 88)) | (1 << (BitloopsParser.Props - 88)))) !== 0) || _la===BitloopsParser.Execute || _la===BitloopsParser.Namespace || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1181;
	                this.statementList();
	            }

	            this.state = 1184;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 1186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1185;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1188;
	            this.match(BitloopsParser.Case);
	            this.state = 1189;
	            this.expression(0);
	            this.state = 1190;
	            this.match(BitloopsParser.Colon);
	            this.state = 1192;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	            if(la_===1) {
	                this.state = 1191;
	                this.statementList();

	            }
	            this.state = 1195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1194;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultClause() {
	    let localctx = new DefaultClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, BitloopsParser.RULE_defaultClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 1217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1199;
	            this.match(BitloopsParser.Default);
	            this.state = 1200;
	            this.match(BitloopsParser.Colon);
	            this.state = 1201;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 1203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.SemiColon) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.Break - 56)) | (1 << (BitloopsParser.Do - 56)) | (1 << (BitloopsParser.Return - 56)) | (1 << (BitloopsParser.For - 56)) | (1 << (BitloopsParser.Switch - 56)) | (1 << (BitloopsParser.While - 56)) | (1 << (BitloopsParser.This - 56)) | (1 << (BitloopsParser.If - 56)) | (1 << (BitloopsParser.Throw - 56)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (BitloopsParser.Delete - 88)) | (1 << (BitloopsParser.Try - 88)) | (1 << (BitloopsParser.Async - 88)) | (1 << (BitloopsParser.ApplyRules - 88)) | (1 << (BitloopsParser.Const - 88)) | (1 << (BitloopsParser.Props - 88)))) !== 0) || _la===BitloopsParser.Execute || _la===BitloopsParser.Namespace || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	                this.state = 1202;
	                this.statementList();
	            }

	            this.state = 1205;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 1207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1206;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1209;
	            this.match(BitloopsParser.Default);
	            this.state = 1210;
	            this.match(BitloopsParser.Colon);
	            this.state = 1212;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 1211;
	                this.statementList();

	            }
	            this.state = 1215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1214;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelledStatement() {
	    let localctx = new LabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, BitloopsParser.RULE_labelledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1219;
	        this.match(BitloopsParser.Identifier);
	        this.state = 1220;
	        this.match(BitloopsParser.Colon);
	        this.state = 1221;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, BitloopsParser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1223;
	        this.match(BitloopsParser.Throw);
	        this.state = 1224;
	        this.expressionSequence();
	        this.state = 1225;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, BitloopsParser.RULE_tryStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1227;
	        this.match(BitloopsParser.Try);
	        this.state = 1228;
	        this.block();
	        this.state = 1234;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Catch:
	            this.state = 1229;
	            this.catchProduction();
	            this.state = 1231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Finally) {
	                this.state = 1230;
	                this.finallyProduction();
	            }

	            break;
	        case BitloopsParser.Finally:
	            this.state = 1233;
	            this.finallyProduction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchProduction() {
	    let localctx = new CatchProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, BitloopsParser.RULE_catchProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1236;
	        this.match(BitloopsParser.Catch);
	        this.state = 1237;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1238;
	        this.match(BitloopsParser.Identifier);
	        this.state = 1239;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1240;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyProduction() {
	    let localctx = new FinallyProductionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, BitloopsParser.RULE_finallyProduction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1242;
	        this.match(BitloopsParser.Finally);
	        this.state = 1243;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	debuggerStatement() {
	    let localctx = new DebuggerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, BitloopsParser.RULE_debuggerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1245;
	        this.match(BitloopsParser.Debugger);
	        this.state = 1246;
	        this.eos();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainFieldDeclaration() {
	    let localctx = new DomainFieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, BitloopsParser.RULE_domainFieldDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1248;
	        this.fieldList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isBrokenStatement() {
	    let localctx = new IsBrokenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, BitloopsParser.RULE_isBrokenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1250;
	        this.match(BitloopsParser.IsBrokenIf);
	        this.state = 1251;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1252;
	        this.expression(0);
	        this.state = 1253;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1254;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainRuleBody() {
	    let localctx = new DomainRuleBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, BitloopsParser.RULE_domainRuleBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.functionBody();
	        this.state = 1257;
	        this.isBrokenStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainRuleDeclaration() {
	    let localctx = new DomainRuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, BitloopsParser.RULE_domainRuleDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1259;
	        this.match(BitloopsParser.Rule);
	        this.state = 1260;
	        this.domainRuleIdentifier();
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1261;
	            this.formalParameterList();
	        }

	        this.state = 1264;
	        this.match(BitloopsParser.Throws);
	        this.state = 1265;
	        this.match(BitloopsParser.ErrorIdentifier);
	        this.state = 1266;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1267;
	        this.domainRuleBody();
	        this.state = 1268;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateDeclaration() {
	    let localctx = new AggregateDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, BitloopsParser.RULE_aggregateDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(BitloopsParser.Root);
	        this.state = 1271;
	        this.match(BitloopsParser.Entity);
	        this.state = 1272;
	        this.entityIdentifier();
	        this.state = 1273;
	        this.entityBody();
	        this.state = 1275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1274;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainConstDeclaration() {
	    let localctx = new DomainConstDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, BitloopsParser.RULE_domainConstDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1277;
	        this.constDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityDeclaration() {
	    let localctx = new EntityDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, BitloopsParser.RULE_entityDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1279;
	        this.match(BitloopsParser.Entity);
	        this.state = 1280;
	        this.entityIdentifier();
	        this.state = 1281;
	        this.entityBody();
	        this.state = 1283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1282;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityBody() {
	    let localctx = new EntityBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, BitloopsParser.RULE_entityBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1285;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1286;
	        this.domainConstDeclarationList();
	        this.state = 1287;
	        this.domainConstructorDeclaration();
	        this.state = 1288;
	        this.publicMethodDeclarationList();
	        this.state = 1289;
	        this.privateMethodDeclarationList();
	        this.state = 1290;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueObjectDeclaration() {
	    let localctx = new ValueObjectDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, BitloopsParser.RULE_valueObjectDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.match(BitloopsParser.ValueObject);
	        this.state = 1293;
	        this.valueObjectIdentifier();
	        this.state = 1294;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1295;
	        this.domainConstDeclarationList();
	        this.state = 1296;
	        this.domainConstructorDeclaration();
	        this.state = 1297;
	        this.privateMethodDeclarationList();
	        this.state = 1298;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1299;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainConstDeclarationList() {
	    let localctx = new DomainConstDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, BitloopsParser.RULE_domainConstDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Const) {
	            this.state = 1302;
	            this.domainConstDeclaration();
	            this.state = 1307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publicMethodDeclarationList() {
	    let localctx = new PublicMethodDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, BitloopsParser.RULE_publicMethodDeclarationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,122,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1308;
	                this.publicMethodDeclaration(); 
	            }
	            this.state = 1313;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,122,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privateMethodDeclarationList() {
	    let localctx = new PrivateMethodDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, BitloopsParser.RULE_privateMethodDeclarationList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Private || _la===BitloopsParser.Identifier) {
	            this.state = 1314;
	            this.privateMethodDeclaration();
	            this.state = 1319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainConstructorDeclaration() {
	    let localctx = new DomainConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, BitloopsParser.RULE_domainConstructorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.match(BitloopsParser.Constructor);
	        this.state = 1322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1321;
	            this.formalParameterList();
	        }

	        this.state = 1324;
	        this.match(BitloopsParser.Colon);
	        this.state = 1325;
	        this.returnOkErrorType();
	        this.state = 1326;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1327;
	        this.functionBody();
	        this.state = 1328;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useCaseIdentifier() {
	    let localctx = new UseCaseIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, BitloopsParser.RULE_useCaseIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1330;
	        this.match(BitloopsParser.UseCaseIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useCaseDeclaration() {
	    let localctx = new UseCaseDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, BitloopsParser.RULE_useCaseDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.match(BitloopsParser.UseCase);
	        this.state = 1333;
	        this.useCaseIdentifier();
	        this.state = 1335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1334;
	            this.formalParameterList();
	        }

	        this.state = 1337;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1338;
	        this.useCaseExecuteDeclaration();
	        this.state = 1339;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1341;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1340;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propsDeclaration() {
	    let localctx = new PropsDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, BitloopsParser.RULE_propsDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1343;
	        this.match(BitloopsParser.Props);
	        this.state = 1344;
	        this.match(BitloopsParser.PropsIdentifier);
	        this.state = 1345;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1346;
	        this.fieldList();
	        this.state = 1347;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        if(la_===1) {
	            this.state = 1348;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	readModelDeclaration() {
	    let localctx = new ReadModelDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, BitloopsParser.RULE_readModelDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        this.match(BitloopsParser.ReadModel);
	        this.state = 1352;
	        this.match(BitloopsParser.ReadModelIdentifier);
	        this.state = 1353;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1354;
	        this.fieldList();
	        this.state = 1355;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1356;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoPortDeclaration() {
	    let localctx = new RepoPortDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, BitloopsParser.RULE_repoPortDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 1397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1359;
	            this.match(BitloopsParser.RepoPort);
	            this.state = 1360;
	            this.repoPortIdentifier();
	            this.state = 1361;
	            this.match(BitloopsParser.LessThan);
	            this.state = 1362;
	            this.match(BitloopsParser.ReadModelIdentifier);
	            this.state = 1363;
	            this.match(BitloopsParser.MoreThan);
	            this.state = 1364;
	            this.repoExtendsList();
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1365;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1368;
	            this.match(BitloopsParser.RepoPort);
	            this.state = 1369;
	            this.repoPortIdentifier();
	            this.state = 1370;
	            this.match(BitloopsParser.LessThan);
	            this.state = 1371;
	            this.match(BitloopsParser.ReadModelIdentifier);
	            this.state = 1372;
	            this.match(BitloopsParser.MoreThan);
	            this.state = 1373;
	            this.repoExtendsList();
	            this.state = 1374;
	            this.repoPortMethodDefinitions();
	            this.state = 1376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1375;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1378;
	            this.match(BitloopsParser.RepoPort);
	            this.state = 1379;
	            this.repoPortIdentifier();
	            this.state = 1380;
	            this.match(BitloopsParser.LessThan);
	            this.state = 1381;
	            this.aggregateRootIdentifier();
	            this.state = 1382;
	            this.match(BitloopsParser.MoreThan);
	            this.state = 1383;
	            this.repoExtendsList();
	            this.state = 1385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1384;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1387;
	            this.match(BitloopsParser.RepoPort);
	            this.state = 1388;
	            this.repoPortIdentifier();
	            this.state = 1389;
	            this.match(BitloopsParser.LessThan);
	            this.state = 1390;
	            this.aggregateRootIdentifier();
	            this.state = 1391;
	            this.match(BitloopsParser.MoreThan);
	            this.state = 1392;
	            this.repoExtendsList();
	            this.state = 1393;
	            this.repoPortMethodDefinitions();
	            this.state = 1395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1394;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoPortIdentifier() {
	    let localctx = new RepoPortIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, BitloopsParser.RULE_repoPortIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1399;
	        this.match(BitloopsParser.RepoPortIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateRootIdentifier() {
	    let localctx = new AggregateRootIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, BitloopsParser.RULE_aggregateRootIdentifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1401;
	        _la = this._input.LA(1);
	        if(!(((((_la - 205)) & ~0x1f) == 0 && ((1 << (_la - 205)) & ((1 << (BitloopsParser.EntityIdentifier - 205)) | (1 << (BitloopsParser.ReadModelIdentifier - 205)) | (1 << (BitloopsParser.UpperCaseIdentifier - 205)) | (1 << (BitloopsParser.Identifier - 205)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoExtendsList() {
	    let localctx = new RepoExtendsListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, BitloopsParser.RULE_repoExtendsList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1403;
	        this.match(BitloopsParser.Extends);
	        this.state = 1404;
	        this.repoPortExtendableIdentifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoPortMethodDefinitions() {
	    let localctx = new RepoPortMethodDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, BitloopsParser.RULE_repoPortMethodDefinitions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1407;
	        this.methodDefinitionList();
	        this.state = 1408;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoPortExtendableIdentifierList() {
	    let localctx = new RepoPortExtendableIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, BitloopsParser.RULE_repoPortExtendableIdentifierList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1410;
	        this.repoPortExtendableIdentifier();
	        this.state = 1415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 1411;
	            this.match(BitloopsParser.Comma);

	            this.state = 1412;
	            this.repoPortExtendableIdentifier();
	            this.state = 1417;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repoPortExtendableIdentifier() {
	    let localctx = new RepoPortExtendableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, BitloopsParser.RULE_repoPortExtendableIdentifier);
	    try {
	        this.state = 1424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,135,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1418;
	            this.match(BitloopsParser.RepoPortIdentifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1419;
	            this.match(BitloopsParser.UpperCaseIdentifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1420;
	            this.match(BitloopsParser.UpperCaseIdentifier);
	            this.state = 1421;
	            this.match(BitloopsParser.LessThan);
	            this.state = 1422;
	            this.match(BitloopsParser.UpperCaseIdentifier);
	            this.state = 1423;
	            this.match(BitloopsParser.MoreThan);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtoDeclaration() {
	    let localctx = new DtoDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, BitloopsParser.RULE_dtoDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1426;
	        this.match(BitloopsParser.DTO);
	        this.state = 1427;
	        this.match(BitloopsParser.DTOIdentifier);
	        this.state = 1428;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1429;
	        this.fieldList();
	        this.state = 1430;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1432;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1431;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structDeclaration() {
	    let localctx = new StructDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, BitloopsParser.RULE_structDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1434;
	        this.match(BitloopsParser.Struct);
	        this.state = 1435;
	        this.match(BitloopsParser.UpperCaseIdentifier);
	        this.state = 1436;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1437;
	        this.fieldList();
	        this.state = 1438;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1439;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtoEvaluationIdentifier() {
	    let localctx = new DtoEvaluationIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, BitloopsParser.RULE_dtoEvaluationIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.dtoIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtoEvaluation() {
	    let localctx = new DtoEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, BitloopsParser.RULE_dtoEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1444;
	        this.dtoEvaluationIdentifier();
	        this.state = 1445;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1446;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1447;
	        this.evaluationFieldList();
	        this.state = 1448;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1449;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueObjectEvaluation() {
	    let localctx = new ValueObjectEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, BitloopsParser.RULE_valueObjectEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1451;
	        this.valueObjectIdentifier();
	        this.state = 1452;
	        this.domainEvaluationInput();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainEvaluationInput() {
	    let localctx = new DomainEvaluationInputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, BitloopsParser.RULE_domainEvaluationInput);
	    try {
	        this.state = 1464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DomainEvaluationInputFieldListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1454;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1455;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 1456;
	            this.evaluationFieldList();
	            this.state = 1457;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 1458;
	            this.match(BitloopsParser.CloseParen);
	            break;

	        case 2:
	            localctx = new DomainEvaluationInputRegularContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1460;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1461;
	            this.expression(0);
	            this.state = 1462;
	            this.match(BitloopsParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityEvaluation() {
	    let localctx = new EntityEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, BitloopsParser.RULE_entityEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1466;
	        this.entityIdentifier();
	        this.state = 1467;
	        this.domainEvaluationInput();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structEvaluationIdentifier() {
	    let localctx = new StructEvaluationIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, BitloopsParser.RULE_structEvaluationIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1469;
	        this.match(BitloopsParser.UpperCaseIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structEvaluation() {
	    let localctx = new StructEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, BitloopsParser.RULE_structEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.structEvaluationIdentifier();
	        this.state = 1472;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1473;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1474;
	        this.evaluationFieldList();
	        this.state = 1475;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1476;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInClassEvaluation() {
	    let localctx = new BuiltInClassEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, BitloopsParser.RULE_builtInClassEvaluation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this.bitloopsBuiltInClass();
	        this.state = 1481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Dot) {
	            this.state = 1479;
	            this.match(BitloopsParser.Dot);
	            this.state = 1480;
	            this.identifier();
	        }

	        this.state = 1483;
	        this.methodArguments();
	        this.state = 1485;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        if(la_===1) {
	            this.state = 1484;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propsEvaluation() {
	    let localctx = new PropsEvaluationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, BitloopsParser.RULE_propsEvaluation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1487;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1488;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1489;
	        this.propsIdentifier();

	        this.state = 1490;
	        this.evaluationFieldList();
	        this.state = 1491;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1492;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainErrorDeclaration() {
	    let localctx = new DomainErrorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, BitloopsParser.RULE_domainErrorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(BitloopsParser.DomainError);
	        this.state = 1495;
	        this.domainErrorIdentifier();
	        this.state = 1497;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1496;
	            this.formalParameterList();
	        }

	        this.state = 1499;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1500;
	            this.evaluationFieldList();
	        }

	        this.state = 1503;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1505;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1504;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	applicationErrorDeclaration() {
	    let localctx = new ApplicationErrorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, BitloopsParser.RULE_applicationErrorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1507;
	        this.match(BitloopsParser.ApplicationError);
	        this.state = 1508;
	        this.applicationErrorIdentifier();
	        this.state = 1510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1509;
	            this.formalParameterList();
	        }

	        this.state = 1512;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1513;
	            this.evaluationFieldList();
	        }

	        this.state = 1516;
	        this.match(BitloopsParser.CloseBrace);
	        this.state = 1518;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1517;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainErrorIdentifier() {
	    let localctx = new DomainErrorIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, BitloopsParser.RULE_domainErrorIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this.match(BitloopsParser.DomainErrorIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	applicationErrorIdentifier() {
	    let localctx = new ApplicationErrorIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, BitloopsParser.RULE_applicationErrorIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.match(BitloopsParser.DomainErrorIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useCaseExecuteDeclaration() {
	    let localctx = new UseCaseExecuteDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, BitloopsParser.RULE_useCaseExecuteDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.match(BitloopsParser.Execute);
	        this.state = 1526;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1525;
	            this.formalParameterList();
	        }

	        this.state = 1528;
	        this.match(BitloopsParser.Colon);
	        this.state = 1529;
	        this.returnOkErrorType();
	        this.state = 1530;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1531;
	        this.functionBody();
	        this.state = 1532;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restControllerParameters() {
	    let localctx = new RestControllerParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, BitloopsParser.RULE_restControllerParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        this.match(BitloopsParser.Identifier);
	        this.state = 1535;
	        this.match(BitloopsParser.Comma);
	        this.state = 1536;
	        this.match(BitloopsParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restControllerExecuteDeclaration() {
	    let localctx = new RestControllerExecuteDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, BitloopsParser.RULE_restControllerExecuteDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this.match(BitloopsParser.Execute);
	        this.state = 1539;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1540;
	        this.restControllerParameters();
	        this.state = 1541;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1542;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1543;
	        this.functionBody();
	        this.state = 1544;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restControllerMethodDeclaration() {
	    let localctx = new RestControllerMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, BitloopsParser.RULE_restControllerMethodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(BitloopsParser.Method);
	        this.state = 1547;
	        this.match(BitloopsParser.Colon);
	        this.state = 1548;
	        this.httpMethod();
	        this.state = 1550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.SemiColon) {
	            this.state = 1549;
	            this.match(BitloopsParser.SemiColon);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	httpMethod() {
	    let localctx = new HttpMethodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, BitloopsParser.RULE_httpMethod);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        _la = this._input.LA(1);
	        if(!(((((_la - 191)) & ~0x1f) == 0 && ((1 << (_la - 191)) & ((1 << (BitloopsParser.MethodGet - 191)) | (1 << (BitloopsParser.MethodPost - 191)) | (1 << (BitloopsParser.MethodPut - 191)) | (1 << (BitloopsParser.MethodPatch - 191)) | (1 << (BitloopsParser.MethodDelete - 191)) | (1 << (BitloopsParser.MethodOptions - 191)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controllerDeclaration() {
	    let localctx = new ControllerDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, BitloopsParser.RULE_controllerDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.state = 1574;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.RESTController:
	            localctx = new RESTControllerDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1554;
	            this.match(BitloopsParser.RESTController);
	            this.state = 1555;
	            this.match(BitloopsParser.ControllerIdentifier);
	            this.state = 1556;
	            this.formalParameterList();
	            this.state = 1557;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 1558;
	            this.restControllerMethodDeclaration();
	            this.state = 1559;
	            this.restControllerExecuteDeclaration();
	            this.state = 1560;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 1562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1561;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;
	        case BitloopsParser.GraphQLController:
	            localctx = new GraphQLControllerDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1564;
	            this.match(BitloopsParser.GraphQLController);
	            this.state = 1565;
	            this.match(BitloopsParser.ControllerIdentifier);
	            this.state = 1566;
	            this.formalParameterList();
	            this.state = 1567;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 1568;
	            this.graphQLResolverOptions();
	            this.state = 1569;
	            this.graphQLControllerExecuteDeclaration();
	            this.state = 1570;
	            this.match(BitloopsParser.CloseBrace);
	            this.state = 1572;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.SemiColon) {
	                this.state = 1571;
	                this.match(BitloopsParser.SemiColon);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLResolverOptions() {
	    let localctx = new GraphQLResolverOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, BitloopsParser.RULE_graphQLResolverOptions);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1576;
	        this.graphQLOperationTypeAssignment();
	        this.state = 1578;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Input) {
	            this.state = 1577;
	            this.graphQLOperationInputTypeAssignment();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLOperationTypeAssignment() {
	    let localctx = new GraphQLOperationTypeAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, BitloopsParser.RULE_graphQLOperationTypeAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1580;
	        this.match(BitloopsParser.GraphQLOperation);
	        this.state = 1581;
	        this.match(BitloopsParser.Colon);
	        this.state = 1582;
	        this.graphQLOperation();
	        this.state = 1583;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLOperationInputTypeAssignment() {
	    let localctx = new GraphQLOperationInputTypeAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, BitloopsParser.RULE_graphQLOperationInputTypeAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1585;
	        this.match(BitloopsParser.Input);
	        this.state = 1586;
	        this.match(BitloopsParser.Colon);
	        this.state = 1587;
	        this.graphQLResolverInputType();
	        this.state = 1588;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLResolverInputType() {
	    let localctx = new GraphQLResolverInputTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, BitloopsParser.RULE_graphQLResolverInputType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1590;
	        this.match(BitloopsParser.DTOIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLOperation() {
	    let localctx = new GraphQLOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, BitloopsParser.RULE_graphQLOperation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1592;
	        _la = this._input.LA(1);
	        if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (BitloopsParser.OperationMutation - 199)) | (1 << (BitloopsParser.OperationQuery - 199)) | (1 << (BitloopsParser.OperationSubscription - 199)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLControllerExecuteDeclaration() {
	    let localctx = new GraphQLControllerExecuteDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, BitloopsParser.RULE_graphQLControllerExecuteDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1594;
	        this.match(BitloopsParser.Execute);
	        this.state = 1595;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1596;
	        this.graphQLControllerParameters();
	        this.state = 1597;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1598;
	        this.match(BitloopsParser.Colon);
	        this.state = 1599;
	        this.graphQLControllerReturnType();
	        this.state = 1600;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1601;
	        this.functionBody();
	        this.state = 1602;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLControllerParameters() {
	    let localctx = new GraphQLControllerParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, BitloopsParser.RULE_graphQLControllerParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1604;
	        this.match(BitloopsParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphQLControllerReturnType() {
	    let localctx = new GraphQLControllerReturnTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, BitloopsParser.RULE_graphQLControllerReturnType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1606;
	        this.match(BitloopsParser.DTOIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtoIdentifier() {
	    let localctx = new DtoIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, BitloopsParser.RULE_dtoIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1608;
	        this.match(BitloopsParser.DTOIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dtoIdentifiers() {
	    let localctx = new DtoIdentifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, BitloopsParser.RULE_dtoIdentifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1610;
	        this.dtoIdentifier();
	        this.state = 1615;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.BitOr) {
	            this.state = 1611;
	            this.match(BitloopsParser.BitOr);
	            this.state = 1612;
	            this.dtoIdentifier();
	            this.state = 1617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorIdentifier() {
	    let localctx = new ErrorIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, BitloopsParser.RULE_errorIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618;
	        this.match(BitloopsParser.ErrorIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	errorIdentifiers() {
	    let localctx = new ErrorIdentifiersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, BitloopsParser.RULE_errorIdentifiers);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1620;
	        this.errorIdentifier();
	        this.state = 1625;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.BitOr) {
	            this.state = 1621;
	            this.match(BitloopsParser.BitOr);
	            this.state = 1622;
	            this.errorIdentifier();
	            this.state = 1627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueObjectIdentifier() {
	    let localctx = new ValueObjectIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, BitloopsParser.RULE_valueObjectIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1628;
	        this.match(BitloopsParser.ValueObjectIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entityIdentifier() {
	    let localctx = new EntityIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, BitloopsParser.RULE_entityIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1630;
	        this.match(BitloopsParser.EntityIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	domainRuleIdentifier() {
	    let localctx = new DomainRuleIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, BitloopsParser.RULE_domainRuleIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this.match(BitloopsParser.RuleIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnOkType() {
	    let localctx = new ReturnOkTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, BitloopsParser.RULE_returnOkType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.match(BitloopsParser.OK);
	        this.state = 1635;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1636;
	        this.bitloopsPrimaryType(0);
	        this.state = 1637;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnErrorsType() {
	    let localctx = new ReturnErrorsTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, BitloopsParser.RULE_returnErrorsType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1639;
	        this.match(BitloopsParser.Errors);
	        this.state = 1640;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1642;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.ErrorIdentifier) {
	            this.state = 1641;
	            this.errorIdentifiers();
	        }

	        this.state = 1644;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnOkErrorType() {
	    let localctx = new ReturnOkErrorTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, BitloopsParser.RULE_returnOkErrorType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1646;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1647;
	        this.returnOkType();
	        this.state = 1648;
	        this.match(BitloopsParser.Comma);
	        this.state = 1649;
	        this.returnErrorsType();
	        this.state = 1650;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packagePortIdentifier() {
	    let localctx = new PackagePortIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, BitloopsParser.RULE_packagePortIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.match(BitloopsParser.PackagePortIdentifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packagePortDeclaration() {
	    let localctx = new PackagePortDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, BitloopsParser.RULE_packagePortDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1654;
	        this.match(BitloopsParser.PackagePort);
	        this.state = 1655;
	        this.packagePortIdentifier();
	        this.state = 1656;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1657;
	        this.methodDefinitionList();
	        this.state = 1658;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, BitloopsParser.RULE_methodDeclaration);
	    try {
	        this.state = 1662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PublicMethodDeclarationExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1660;
	            this.publicMethodDeclaration();
	            break;

	        case 2:
	            localctx = new PrivateMethodDeclarationExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1661;
	            this.privateMethodDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privateMethodDeclaration() {
	    let localctx = new PrivateMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, BitloopsParser.RULE_privateMethodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Private) {
	            this.state = 1664;
	            this.match(BitloopsParser.Private);
	        }

	        this.state = 1667;
	        this.identifier();
	        this.state = 1669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1668;
	            this.formalParameterList();
	        }

	        this.state = 1671;
	        this.returnPrivateMethodType();
	        this.state = 1672;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1673;
	        this.functionBody();
	        this.state = 1674;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	publicMethodDeclaration() {
	    let localctx = new PublicMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, BitloopsParser.RULE_publicMethodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Public) {
	            this.state = 1676;
	            this.match(BitloopsParser.Public);
	        }

	        this.state = 1679;
	        this.identifier();
	        this.state = 1681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1680;
	            this.formalParameterList();
	        }

	        this.state = 1683;
	        this.returnPublicMethodType();
	        this.state = 1684;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1685;
	        this.functionBody();
	        this.state = 1686;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnPublicMethodType() {
	    let localctx = new ReturnPublicMethodTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, BitloopsParser.RULE_returnPublicMethodType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1688;
	        this.match(BitloopsParser.Colon);
	        this.state = 1689;
	        this.returnOkErrorType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnPrivateMethodType() {
	    let localctx = new ReturnPrivateMethodTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, BitloopsParser.RULE_returnPrivateMethodType);
	    try {
	        this.state = 1694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1691;
	            this.typeAnnotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1692;
	            this.match(BitloopsParser.Colon);
	            this.state = 1693;
	            this.returnOkErrorType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyMemberBase() {
	    let localctx = new PropertyMemberBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, BitloopsParser.RULE_propertyMemberBase);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Private || _la===BitloopsParser.Public) {
	            this.state = 1696;
	            this.accessibilityModifier();
	        }

	        this.state = 1700;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Static) {
	            this.state = 1699;
	            this.match(BitloopsParser.Static);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexMemberDeclaration() {
	    let localctx = new IndexMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, BitloopsParser.RULE_indexMemberDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        this.indexSignature();
	        this.state = 1703;
	        this.match(BitloopsParser.SemiColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatorMethod() {
	    let localctx = new GeneratorMethodContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, BitloopsParser.RULE_generatorMethod);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Multiply) {
	            this.state = 1705;
	            this.match(BitloopsParser.Multiply);
	        }

	        this.state = 1708;
	        this.match(BitloopsParser.Identifier);
	        this.state = 1709;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1711;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1710;
	            this.formalParameterList();
	        }

	        this.state = 1713;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1714;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1715;
	        this.functionBody();
	        this.state = 1716;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatorFunctionDeclaration() {
	    let localctx = new GeneratorFunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, BitloopsParser.RULE_generatorFunctionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1718;
	        this.match(BitloopsParser.Function_);
	        this.state = 1719;
	        this.match(BitloopsParser.Multiply);
	        this.state = 1721;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1720;
	            this.match(BitloopsParser.Identifier);
	        }

	        this.state = 1723;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1724;
	            this.formalParameterList();
	        }

	        this.state = 1727;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1728;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1729;
	        this.functionBody();
	        this.state = 1730;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatorBlock() {
	    let localctx = new GeneratorBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, BitloopsParser.RULE_generatorBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1732;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1733;
	        this.generatorDefinition();
	        this.state = 1738;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,168,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1734;
	                this.match(BitloopsParser.Comma);
	                this.state = 1735;
	                this.generatorDefinition(); 
	            }
	            this.state = 1740;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,168,this._ctx);
	        }

	        this.state = 1742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Comma) {
	            this.state = 1741;
	            this.match(BitloopsParser.Comma);
	        }

	        this.state = 1744;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generatorDefinition() {
	    let localctx = new GeneratorDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, BitloopsParser.RULE_generatorDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1746;
	        this.match(BitloopsParser.Multiply);
	        this.state = 1747;
	        this.iteratorDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorBlock() {
	    let localctx = new IteratorBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, BitloopsParser.RULE_iteratorBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1749;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1750;
	        this.iteratorDefinition();
	        this.state = 1755;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,170,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1751;
	                this.match(BitloopsParser.Comma);
	                this.state = 1752;
	                this.iteratorDefinition(); 
	            }
	            this.state = 1757;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,170,this._ctx);
	        }

	        this.state = 1759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Comma) {
	            this.state = 1758;
	            this.match(BitloopsParser.Comma);
	        }

	        this.state = 1761;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorDefinition() {
	    let localctx = new IteratorDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, BitloopsParser.RULE_iteratorDefinition);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.match(BitloopsParser.OpenBracket);
	        this.state = 1764;
	        this.expression(0);
	        this.state = 1765;
	        this.match(BitloopsParser.CloseBracket);
	        this.state = 1766;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1767;
	            this.formalParameterList();
	        }

	        this.state = 1770;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1771;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1772;
	        this.functionBody();
	        this.state = 1773;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, BitloopsParser.RULE_formalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.state = 1794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1775;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1776;
	            this.match(BitloopsParser.CloseParen);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1777;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1791;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case BitloopsParser.Private:
	            case BitloopsParser.Public:
	            case BitloopsParser.TypeAlias:
	            case BitloopsParser.At:
	            case BitloopsParser.Identifier:
	            	this.state = 1778;
	            	this.formalParameterArg();
	            	this.state = 1783;
	            	this._errHandler.sync(this);
	            	var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	            	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            	    if(_alt===1) {
	            	        this.state = 1779;
	            	        this.match(BitloopsParser.Comma);
	            	        this.state = 1780;
	            	        this.formalParameterArg(); 
	            	    }
	            	    this.state = 1785;
	            	    this._errHandler.sync(this);
	            	    _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	            	}

	            	this.state = 1788;
	            	this._errHandler.sync(this);
	            	_la = this._input.LA(1);
	            	if(_la===BitloopsParser.Comma) {
	            	    this.state = 1786;
	            	    this.match(BitloopsParser.Comma);
	            	    this.state = 1787;
	            	    this.lastFormalParameterArg();
	            	}

	            	break;
	            case BitloopsParser.Ellipsis:
	            	this.state = 1790;
	            	this.lastFormalParameterArg();
	            	break;
	            case BitloopsParser.CloseParen:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1793;
	            this.match(BitloopsParser.CloseParen);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterArg() {
	    let localctx = new FormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, BitloopsParser.RULE_formalParameterArg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.At) {
	            this.state = 1796;
	            this.decorator();
	        }

	        this.state = 1800;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Private || _la===BitloopsParser.Public) {
	            this.state = 1799;
	            this.accessibilityModifier();
	        }

	        this.state = 1802;
	        this.identifierOrKeyWord();
	        this.state = 1804;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 1803;
	            this.typeAnnotation();
	        }

	        this.state = 1808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Assign) {
	            this.state = 1806;
	            this.match(BitloopsParser.Assign);
	            this.state = 1807;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameterArg() {
	    let localctx = new LastFormalParameterArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, BitloopsParser.RULE_lastFormalParameterArg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1810;
	        this.match(BitloopsParser.Ellipsis);
	        this.state = 1811;
	        this.match(BitloopsParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, BitloopsParser.RULE_functionBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.SemiColon) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.Break - 56)) | (1 << (BitloopsParser.Do - 56)) | (1 << (BitloopsParser.Return - 56)) | (1 << (BitloopsParser.For - 56)) | (1 << (BitloopsParser.Switch - 56)) | (1 << (BitloopsParser.While - 56)) | (1 << (BitloopsParser.This - 56)) | (1 << (BitloopsParser.If - 56)) | (1 << (BitloopsParser.Throw - 56)))) !== 0) || ((((_la - 88)) & ~0x1f) == 0 && ((1 << (_la - 88)) & ((1 << (BitloopsParser.Delete - 88)) | (1 << (BitloopsParser.Try - 88)) | (1 << (BitloopsParser.Async - 88)) | (1 << (BitloopsParser.ApplyRules - 88)) | (1 << (BitloopsParser.Const - 88)) | (1 << (BitloopsParser.Props - 88)))) !== 0) || _la===BitloopsParser.Execute || _la===BitloopsParser.Namespace || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 1813;
	            this.statementList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayLiteral() {
	    let localctx = new ArrayLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, BitloopsParser.RULE_arrayLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(BitloopsParser.OpenBracket);
	        this.state = 1818;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 1817;
	            this.elementList();
	        }

	        this.state = 1820;
	        this.match(BitloopsParser.CloseBracket);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementList() {
	    let localctx = new ElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, BitloopsParser.RULE_elementList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.expression(0);
	        this.state = 1827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 1823;
	            this.match(BitloopsParser.Comma);
	            this.state = 1824;
	            this.expression(0);
	            this.state = 1829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectLiteral() {
	    let localctx = new ObjectLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, BitloopsParser.RULE_objectLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1830;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.Ellipsis) | (1 << BitloopsParser.Multiply))) !== 0) || _la===BitloopsParser.IntegerLiteral || _la===BitloopsParser.DecimalLiteral || ((((_la - 150)) & ~0x1f) == 0 && ((1 << (_la - 150)) & ((1 << (BitloopsParser.TypeAlias - 150)) | (1 << (BitloopsParser.Get - 150)) | (1 << (BitloopsParser.Set - 150)))) !== 0) || _la===BitloopsParser.Identifier || _la===BitloopsParser.StringLiteral) {
	            this.state = 1831;
	            this.propertyAssignment();
	            this.state = 1836;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1832;
	                    this.match(BitloopsParser.Comma);
	                    this.state = 1833;
	                    this.propertyAssignment(); 
	                }
	                this.state = 1838;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	            }

	            this.state = 1840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Comma) {
	                this.state = 1839;
	                this.match(BitloopsParser.Comma);
	            }

	        }

	        this.state = 1844;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regularVariableEvaluationORliteralORexpression() {
	    let localctx = new RegularVariableEvaluationORliteralORexpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, BitloopsParser.RULE_regularVariableEvaluationORliteralORexpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1846;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyAssignment() {
	    let localctx = new PropertyAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, BitloopsParser.RULE_propertyAssignment);
	    var _la = 0; // Token type
	    try {
	        this.state = 1863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1848;
	            this.propertyName();
	            this.state = 1849;
	            _la = this._input.LA(1);
	            if(!(_la===BitloopsParser.Assign || _la===BitloopsParser.Colon)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1850;
	            this.regularVariableEvaluationORliteralORexpression();
	            break;

	        case 2:
	            localctx = new ComputedPropertyExpressionAssignmentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1852;
	            this.match(BitloopsParser.OpenBracket);
	            this.state = 1853;
	            this.regularVariableEvaluationORliteralORexpression();
	            this.state = 1854;
	            this.match(BitloopsParser.CloseBracket);
	            this.state = 1855;
	            this.match(BitloopsParser.Colon);
	            this.state = 1856;
	            this.regularVariableEvaluationORliteralORexpression();
	            break;

	        case 3:
	            localctx = new PropertyGetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1858;
	            this.getAccessor();
	            break;

	        case 4:
	            localctx = new PropertySetterContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1859;
	            this.setAccessor();
	            break;

	        case 5:
	            localctx = new MethodPropertyContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1860;
	            this.generatorMethod();
	            break;

	        case 6:
	            localctx = new PropertyShorthandContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1861;
	            this.identifierOrKeyWord();
	            break;

	        case 7:
	            localctx = new RestParameterInObjectContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1862;
	            this.restParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getAccessor() {
	    let localctx = new GetAccessorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, BitloopsParser.RULE_getAccessor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1865;
	        this.getter();
	        this.state = 1866;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1867;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 1868;
	            this.typeAnnotation();
	        }

	        this.state = 1871;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1872;
	        this.functionBody();
	        this.state = 1873;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAccessor() {
	    let localctx = new SetAccessorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, BitloopsParser.RULE_setAccessor);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1875;
	        this.setter();
	        this.state = 1876;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            this.state = 1877;
	            this.match(BitloopsParser.Identifier);
	            break;
	        case BitloopsParser.OpenBracket:
	        case BitloopsParser.OpenBrace:
	            this.state = 1878;
	            this.bindingPattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1882;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 1881;
	            this.typeAnnotation();
	        }

	        this.state = 1884;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1885;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1886;
	        this.functionBody();
	        this.state = 1887;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, BitloopsParser.RULE_propertyName);
	    try {
	        this.state = 1892;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1889;
	            this.identifierName();
	            break;
	        case BitloopsParser.StringLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1890;
	            this.match(BitloopsParser.StringLiteral);
	            break;
	        case BitloopsParser.IntegerLiteral:
	        case BitloopsParser.DecimalLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1891;
	            this.numericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, BitloopsParser.RULE_arguments);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.RegularExpressionLiteral) | (1 << BitloopsParser.OpenBracket) | (1 << BitloopsParser.OpenParen) | (1 << BitloopsParser.OpenBrace) | (1 << BitloopsParser.Not))) !== 0) || ((((_la - 56)) & ~0x1f) == 0 && ((1 << (_la - 56)) & ((1 << (BitloopsParser.NullLiteral - 56)) | (1 << (BitloopsParser.BooleanLiteral - 56)) | (1 << (BitloopsParser.IntegerLiteral - 56)) | (1 << (BitloopsParser.DecimalLiteral - 56)) | (1 << (BitloopsParser.This - 56)))) !== 0) || _la===BitloopsParser.Delete || _la===BitloopsParser.Execute || ((((_la - 185)) & ~0x1f) == 0 && ((1 << (_la - 185)) & ((1 << (BitloopsParser.UUIDv4 - 185)) | (1 << (BitloopsParser.DTOIdentifier - 185)) | (1 << (BitloopsParser.ValueObjectIdentifier - 185)) | (1 << (BitloopsParser.EntityIdentifier - 185)) | (1 << (BitloopsParser.ErrorIdentifier - 185)) | (1 << (BitloopsParser.UpperCaseIdentifier - 185)))) !== 0) || ((((_la - 217)) & ~0x1f) == 0 && ((1 << (_la - 217)) & ((1 << (BitloopsParser.Identifier - 217)) | (1 << (BitloopsParser.StringLiteral - 217)) | (1 << (BitloopsParser.BackTick - 217)))) !== 0)) {
	            this.state = 1895;
	            this.argumentList();
	            this.state = 1897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.Comma) {
	                this.state = 1896;
	                this.match(BitloopsParser.Comma);
	            }

	        }

	        this.state = 1901;
	        this.match(BitloopsParser.CloseParen);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, BitloopsParser.RULE_argumentList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1903;
	        this.argument();
	        this.state = 1908;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,194,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1904;
	                this.match(BitloopsParser.Comma);
	                this.state = 1905;
	                this.argument(); 
	            }
	            this.state = 1910;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,194,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, BitloopsParser.RULE_argument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1911;
	        this.regularVariableEvaluationORliteralORexpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionSequence() {
	    let localctx = new ExpressionSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, BitloopsParser.RULE_expressionSequence);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this.expression(0);
	        this.state = 1918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.Comma) {
	            this.state = 1914;
	            this.match(BitloopsParser.Comma);
	            this.state = 1915;
	            this.expression(0);
	            this.state = 1920;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpressionDeclaration() {
	    let localctx = new FunctionExpressionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, BitloopsParser.RULE_functionExpressionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1921;
	        this.match(BitloopsParser.Function_);
	        this.state = 1923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Identifier) {
	            this.state = 1922;
	            this.match(BitloopsParser.Identifier);
	        }

	        this.state = 1925;
	        this.match(BitloopsParser.OpenParen);
	        this.state = 1927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.OpenParen) {
	            this.state = 1926;
	            this.formalParameterList();
	        }

	        this.state = 1929;
	        this.match(BitloopsParser.CloseParen);
	        this.state = 1931;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 1930;
	            this.typeAnnotation();
	        }

	        this.state = 1933;
	        this.match(BitloopsParser.OpenBrace);
	        this.state = 1934;
	        this.functionBody();
	        this.state = 1935;
	        this.match(BitloopsParser.CloseBrace);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 368;
	    this.enterRecursionRule(localctx, 368, BitloopsParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1938;
	            this.match(BitloopsParser.Not);
	            this.state = 1939;
	            this.expression(19);
	            break;

	        case 2:
	            localctx = new ParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1940;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 1941;
	            this.expression(0);
	            this.state = 1942;
	            this.match(BitloopsParser.CloseParen);
	            break;

	        case 3:
	            localctx = new LiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1944;
	            this.literal();
	            break;

	        case 4:
	            localctx = new EvaluationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1945;
	            this.evaluation();
	            break;

	        case 5:
	            localctx = new IdentifierExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1946;
	            this.regularIdentifier();
	            break;

	        case 6:
	            localctx = new ArrayLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1947;
	            this.arrayLiteral();
	            break;

	        case 7:
	            localctx = new ThisExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1948;
	            this.match(BitloopsParser.This);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1992;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,201,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1990;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1951;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1952;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << BitloopsParser.Multiply) | (1 << BitloopsParser.Divide) | (1 << BitloopsParser.Modulus))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1953;
	                    this.expression(14);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1954;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 1955;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===BitloopsParser.Plus || _la===BitloopsParser.Minus)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1956;
	                    this.expression(13);
	                    break;

	                case 3:
	                    localctx = new RelationalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1957;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1958;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (BitloopsParser.LessThan - 30)) | (1 << (BitloopsParser.MoreThan - 30)) | (1 << (BitloopsParser.LessThanEquals - 30)) | (1 << (BitloopsParser.GreaterThanEquals - 30)))) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1959;
	                    this.expression(12);
	                    break;

	                case 4:
	                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1960;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1961;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===BitloopsParser.Equals_ || _la===BitloopsParser.NotEquals)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1962;
	                    this.expression(11);
	                    break;

	                case 5:
	                    localctx = new LogicalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1963;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1964;
	                    localctx.op = this.match(BitloopsParser.And);
	                    this.state = 1965;
	                    this.expression(10);
	                    break;

	                case 6:
	                    localctx = new LogicalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1966;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1967;
	                    localctx.op = this.match(BitloopsParser.Or);
	                    this.state = 1968;
	                    this.expression(9);
	                    break;

	                case 7:
	                    localctx = new LogicalXorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1969;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1970;
	                    localctx.op = this.match(BitloopsParser.Xor);
	                    this.state = 1971;
	                    this.expression(8);
	                    break;

	                case 8:
	                    localctx = new AssignmentExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1972;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1973;
	                    this.match(BitloopsParser.Assign);
	                    this.state = 1974;
	                    this.expression(7);
	                    break;

	                case 9:
	                    localctx = new MemberDotExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1975;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 1976;
	                    this.match(BitloopsParser.Dot);
	                    this.state = 1977;
	                    this.regularIdentifier();
	                    break;

	                case 10:
	                    localctx = new MethodCallExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1978;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1979;
	                    this.methodArguments();
	                    break;

	                case 11:
	                    localctx = new GetClassExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1980;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1981;
	                    this.match(BitloopsParser.Dot);
	                    this.state = 1982;
	                    this.match(BitloopsParser.GetClass);
	                    this.state = 1983;
	                    this.match(BitloopsParser.OpenParen);
	                    this.state = 1984;
	                    this.match(BitloopsParser.CloseParen);
	                    break;

	                case 12:
	                    localctx = new ToStringExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, BitloopsParser.RULE_expression);
	                    this.state = 1985;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1986;
	                    this.match(BitloopsParser.Dot);
	                    this.state = 1987;
	                    this.match(BitloopsParser.ToString);
	                    this.state = 1988;
	                    this.match(BitloopsParser.OpenParen);
	                    this.state = 1989;
	                    this.match(BitloopsParser.CloseParen);
	                    break;

	                } 
	            }
	            this.state = 1994;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,201,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	asExpression() {
	    let localctx = new AsExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, BitloopsParser.RULE_asExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2001;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Void:
	        case BitloopsParser.Any:
	        case BitloopsParser.Int32:
	        case BitloopsParser.Boolean:
	        case BitloopsParser.String:
	        case BitloopsParser.Struct:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1995;
	            this.predefinedType();
	            this.state = 1998;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.OpenBracket) {
	                this.state = 1996;
	                this.match(BitloopsParser.OpenBracket);
	                this.state = 1997;
	                this.match(BitloopsParser.CloseBracket);
	            }

	            break;
	        case BitloopsParser.RegularExpressionLiteral:
	        case BitloopsParser.OpenBracket:
	        case BitloopsParser.OpenParen:
	        case BitloopsParser.OpenBrace:
	        case BitloopsParser.Not:
	        case BitloopsParser.NullLiteral:
	        case BitloopsParser.BooleanLiteral:
	        case BitloopsParser.IntegerLiteral:
	        case BitloopsParser.DecimalLiteral:
	        case BitloopsParser.This:
	        case BitloopsParser.Delete:
	        case BitloopsParser.Execute:
	        case BitloopsParser.UUIDv4:
	        case BitloopsParser.DTOIdentifier:
	        case BitloopsParser.ValueObjectIdentifier:
	        case BitloopsParser.EntityIdentifier:
	        case BitloopsParser.ErrorIdentifier:
	        case BitloopsParser.UpperCaseIdentifier:
	        case BitloopsParser.Identifier:
	        case BitloopsParser.StringLiteral:
	        case BitloopsParser.BackTick:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2000;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionDeclaration() {
	    let localctx = new ArrowFunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, BitloopsParser.RULE_arrowFunctionDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2004;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Async) {
	            this.state = 2003;
	            this.match(BitloopsParser.Async);
	        }

	        this.state = 2006;
	        this.arrowFunctionParameters();
	        this.state = 2008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===BitloopsParser.Colon) {
	            this.state = 2007;
	            this.typeAnnotation();
	        }

	        this.state = 2010;
	        this.match(BitloopsParser.ARROW);
	        this.state = 2011;
	        this.arrowFunctionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionParameters() {
	    let localctx = new ArrowFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, BitloopsParser.RULE_arrowFunctionParameters);
	    var _la = 0; // Token type
	    try {
	        this.state = 2019;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2013;
	            this.match(BitloopsParser.Identifier);
	            break;
	        case BitloopsParser.OpenParen:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2014;
	            this.match(BitloopsParser.OpenParen);
	            this.state = 2016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===BitloopsParser.OpenParen) {
	                this.state = 2015;
	                this.formalParameterList();
	            }

	            this.state = 2018;
	            this.match(BitloopsParser.CloseParen);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrowFunctionBody() {
	    let localctx = new ArrowFunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, BitloopsParser.RULE_arrowFunctionBody);
	    try {
	        this.state = 2026;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,208,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2021;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2022;
	            this.match(BitloopsParser.OpenBrace);
	            this.state = 2023;
	            this.functionBody();
	            this.state = 2024;
	            this.match(BitloopsParser.CloseBrace);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, BitloopsParser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2028;
	        _la = this._input.LA(1);
	        if(!(((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (BitloopsParser.MultiplyAssign - 44)) | (1 << (BitloopsParser.DivideAssign - 44)) | (1 << (BitloopsParser.ModulusAssign - 44)) | (1 << (BitloopsParser.PlusAssign - 44)) | (1 << (BitloopsParser.MinusAssign - 44)) | (1 << (BitloopsParser.LeftShiftArithmeticAssign - 44)) | (1 << (BitloopsParser.RightShiftArithmeticAssign - 44)) | (1 << (BitloopsParser.RightShiftLogicalAssign - 44)) | (1 << (BitloopsParser.BitAndAssign - 44)) | (1 << (BitloopsParser.BitXorAssign - 44)) | (1 << (BitloopsParser.BitOrAssign - 44)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, BitloopsParser.RULE_literal);
	    try {
	        this.state = 2036;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.NullLiteral:
	            localctx = new NullLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2030;
	            this.match(BitloopsParser.NullLiteral);
	            break;
	        case BitloopsParser.BooleanLiteral:
	            localctx = new BooleanLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2031;
	            this.match(BitloopsParser.BooleanLiteral);
	            break;
	        case BitloopsParser.StringLiteral:
	            localctx = new StringLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2032;
	            this.match(BitloopsParser.StringLiteral);
	            break;
	        case BitloopsParser.BackTick:
	            localctx = new TemplateStringLiteralLabelContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2033;
	            this.templateStringLiteral();
	            break;
	        case BitloopsParser.RegularExpressionLiteral:
	            localctx = new RegularExpressionLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2034;
	            this.match(BitloopsParser.RegularExpressionLiteral);
	            break;
	        case BitloopsParser.IntegerLiteral:
	        case BitloopsParser.DecimalLiteral:
	            localctx = new NumericLiteralLabelContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2035;
	            this.numericLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringLiteral() {
	    let localctx = new TemplateStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, BitloopsParser.RULE_templateStringLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2038;
	        this.match(BitloopsParser.BackTick);
	        this.state = 2042;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===BitloopsParser.TemplateStringStartExpression || _la===BitloopsParser.TemplateStringAtom) {
	            this.state = 2039;
	            this.templateStringAtom();
	            this.state = 2044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2045;
	        this.match(BitloopsParser.BackTick);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateStringAtom() {
	    let localctx = new TemplateStringAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, BitloopsParser.RULE_templateStringAtom);
	    try {
	        this.state = 2052;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.TemplateStringAtom:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2047;
	            this.match(BitloopsParser.TemplateStringAtom);
	            break;
	        case BitloopsParser.TemplateStringStartExpression:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2048;
	            this.match(BitloopsParser.TemplateStringStartExpression);
	            this.state = 2049;
	            this.expression(0);
	            this.state = 2050;
	            this.match(BitloopsParser.TemplateCloseBrace);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, BitloopsParser.RULE_numericLiteral);
	    try {
	        this.state = 2056;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.IntegerLiteral:
	            localctx = new IntegerLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2054;
	            this.match(BitloopsParser.IntegerLiteral);
	            break;
	        case BitloopsParser.DecimalLiteral:
	            localctx = new DecimalLiteralContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2055;
	            this.match(BitloopsParser.DecimalLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierName() {
	    let localctx = new IdentifierNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, BitloopsParser.RULE_identifierName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2058;
	        this.match(BitloopsParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrKeyWord() {
	    let localctx = new IdentifierOrKeyWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, BitloopsParser.RULE_identifierOrKeyWord);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2060;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.TypeAlias || _la===BitloopsParser.Identifier)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reservedWord() {
	    let localctx = new ReservedWordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, BitloopsParser.RULE_reservedWord);
	    try {
	        this.state = 2065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case BitloopsParser.Break:
	        case BitloopsParser.Do:
	        case BitloopsParser.Instanceof:
	        case BitloopsParser.Typeof:
	        case BitloopsParser.Case:
	        case BitloopsParser.Else:
	        case BitloopsParser.New:
	        case BitloopsParser.Var:
	        case BitloopsParser.Catch:
	        case BitloopsParser.Finally:
	        case BitloopsParser.Return:
	        case BitloopsParser.Void:
	        case BitloopsParser.Continue:
	        case BitloopsParser.For:
	        case BitloopsParser.Switch:
	        case BitloopsParser.While:
	        case BitloopsParser.Debugger:
	        case BitloopsParser.Function_:
	        case BitloopsParser.This:
	        case BitloopsParser.With:
	        case BitloopsParser.Default:
	        case BitloopsParser.If:
	        case BitloopsParser.Throw:
	        case BitloopsParser.Delete:
	        case BitloopsParser.In:
	        case BitloopsParser.Try:
	        case BitloopsParser.From:
	        case BitloopsParser.ReadOnly:
	        case BitloopsParser.Async:
	        case BitloopsParser.Extends:
	        case BitloopsParser.Const:
	        case BitloopsParser.UseCase:
	        case BitloopsParser.Let:
	        case BitloopsParser.Private:
	        case BitloopsParser.Public:
	        case BitloopsParser.Protected:
	        case BitloopsParser.Static:
	        case BitloopsParser.String:
	        case BitloopsParser.TypeAlias:
	        case BitloopsParser.Get:
	        case BitloopsParser.Set:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2062;
	            this.keyword();
	            break;
	        case BitloopsParser.NullLiteral:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2063;
	            this.match(BitloopsParser.NullLiteral);
	            break;
	        case BitloopsParser.BooleanLiteral:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2064;
	            this.match(BitloopsParser.BooleanLiteral);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, BitloopsParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        _la = this._input.LA(1);
	        if(!(((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (BitloopsParser.Break - 65)) | (1 << (BitloopsParser.Do - 65)) | (1 << (BitloopsParser.Instanceof - 65)) | (1 << (BitloopsParser.Typeof - 65)) | (1 << (BitloopsParser.Case - 65)) | (1 << (BitloopsParser.Else - 65)) | (1 << (BitloopsParser.New - 65)) | (1 << (BitloopsParser.Var - 65)) | (1 << (BitloopsParser.Catch - 65)) | (1 << (BitloopsParser.Finally - 65)) | (1 << (BitloopsParser.Return - 65)) | (1 << (BitloopsParser.Void - 65)) | (1 << (BitloopsParser.Continue - 65)) | (1 << (BitloopsParser.For - 65)) | (1 << (BitloopsParser.Switch - 65)) | (1 << (BitloopsParser.While - 65)) | (1 << (BitloopsParser.Debugger - 65)) | (1 << (BitloopsParser.Function_ - 65)) | (1 << (BitloopsParser.This - 65)) | (1 << (BitloopsParser.With - 65)) | (1 << (BitloopsParser.Default - 65)) | (1 << (BitloopsParser.If - 65)) | (1 << (BitloopsParser.Throw - 65)) | (1 << (BitloopsParser.Delete - 65)) | (1 << (BitloopsParser.In - 65)) | (1 << (BitloopsParser.Try - 65)) | (1 << (BitloopsParser.From - 65)) | (1 << (BitloopsParser.ReadOnly - 65)) | (1 << (BitloopsParser.Async - 65)))) !== 0) || ((((_la - 97)) & ~0x1f) == 0 && ((1 << (_la - 97)) & ((1 << (BitloopsParser.Extends - 97)) | (1 << (BitloopsParser.Const - 97)) | (1 << (BitloopsParser.UseCase - 97)) | (1 << (BitloopsParser.Let - 97)) | (1 << (BitloopsParser.Private - 97)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (BitloopsParser.Public - 129)) | (1 << (BitloopsParser.Protected - 129)) | (1 << (BitloopsParser.Static - 129)) | (1 << (BitloopsParser.String - 129)) | (1 << (BitloopsParser.TypeAlias - 129)) | (1 << (BitloopsParser.Get - 129)) | (1 << (BitloopsParser.Set - 129)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getter() {
	    let localctx = new GetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, BitloopsParser.RULE_getter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2069;
	        this.match(BitloopsParser.Get);
	        this.state = 2070;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setter() {
	    let localctx = new SetterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, BitloopsParser.RULE_setter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2072;
	        this.match(BitloopsParser.Set);
	        this.state = 2073;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eos() {
	    let localctx = new EosContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, BitloopsParser.RULE_eos);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2075;
	        _la = this._input.LA(1);
	        if(!(_la===BitloopsParser.EOF || _la===BitloopsParser.SemiColon)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isInstanceOf() {
	    let localctx = new IsInstanceOfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, BitloopsParser.RULE_isInstanceOf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this.regularIdentifier();
	        this.state = 2078;
	        this.match(BitloopsParser.Is);
	        this.state = 2079;
	        this.classTypes();
	        this.state = 2081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 2080;
	            this.match(BitloopsParser.SemiColon);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classTypes() {
	    let localctx = new ClassTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, BitloopsParser.RULE_classTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2083;
	        this.match(BitloopsParser.ErrorClass);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

BitloopsParser.EOF = antlr4.Token.EOF;
BitloopsParser.MultiLineComment = 1;
BitloopsParser.SingleLineComment = 2;
BitloopsParser.RegularExpressionLiteral = 3;
BitloopsParser.OpenBracket = 4;
BitloopsParser.CloseBracket = 5;
BitloopsParser.OpenParen = 6;
BitloopsParser.CloseParen = 7;
BitloopsParser.OpenBrace = 8;
BitloopsParser.TemplateCloseBrace = 9;
BitloopsParser.CloseBrace = 10;
BitloopsParser.SemiColon = 11;
BitloopsParser.Comma = 12;
BitloopsParser.Assign = 13;
BitloopsParser.QuestionMark = 14;
BitloopsParser.Colon = 15;
BitloopsParser.Ellipsis = 16;
BitloopsParser.Dot = 17;
BitloopsParser.PlusPlus = 18;
BitloopsParser.MinusMinus = 19;
BitloopsParser.Plus = 20;
BitloopsParser.Minus = 21;
BitloopsParser.BitNot = 22;
BitloopsParser.Not = 23;
BitloopsParser.Multiply = 24;
BitloopsParser.Divide = 25;
BitloopsParser.Modulus = 26;
BitloopsParser.RightShiftArithmetic = 27;
BitloopsParser.LeftShiftArithmetic = 28;
BitloopsParser.RightShiftLogical = 29;
BitloopsParser.LessThan = 30;
BitloopsParser.MoreThan = 31;
BitloopsParser.LessThanEquals = 32;
BitloopsParser.GreaterThanEquals = 33;
BitloopsParser.Equals_ = 34;
BitloopsParser.NotEquals = 35;
BitloopsParser.IdentityEquals = 36;
BitloopsParser.IdentityNotEquals = 37;
BitloopsParser.BitAnd = 38;
BitloopsParser.BitXOr = 39;
BitloopsParser.BitOr = 40;
BitloopsParser.And = 41;
BitloopsParser.Or = 42;
BitloopsParser.Xor = 43;
BitloopsParser.MultiplyAssign = 44;
BitloopsParser.DivideAssign = 45;
BitloopsParser.ModulusAssign = 46;
BitloopsParser.PlusAssign = 47;
BitloopsParser.MinusAssign = 48;
BitloopsParser.LeftShiftArithmeticAssign = 49;
BitloopsParser.RightShiftArithmeticAssign = 50;
BitloopsParser.RightShiftLogicalAssign = 51;
BitloopsParser.BitAndAssign = 52;
BitloopsParser.BitXorAssign = 53;
BitloopsParser.BitOrAssign = 54;
BitloopsParser.ARROW = 55;
BitloopsParser.NullLiteral = 56;
BitloopsParser.BooleanLiteral = 57;
BitloopsParser.IntegerLiteral = 58;
BitloopsParser.DecimalLiteral = 59;
BitloopsParser.HexIntegerLiteral = 60;
BitloopsParser.OctalIntegerLiteral = 61;
BitloopsParser.OctalIntegerLiteral2 = 62;
BitloopsParser.BinaryIntegerLiteral = 63;
BitloopsParser.Optional = 64;
BitloopsParser.Break = 65;
BitloopsParser.Do = 66;
BitloopsParser.Instanceof = 67;
BitloopsParser.Typeof = 68;
BitloopsParser.Case = 69;
BitloopsParser.Else = 70;
BitloopsParser.New = 71;
BitloopsParser.Var = 72;
BitloopsParser.Catch = 73;
BitloopsParser.Finally = 74;
BitloopsParser.Return = 75;
BitloopsParser.Void = 76;
BitloopsParser.Continue = 77;
BitloopsParser.For = 78;
BitloopsParser.Switch = 79;
BitloopsParser.While = 80;
BitloopsParser.Debugger = 81;
BitloopsParser.Function_ = 82;
BitloopsParser.This = 83;
BitloopsParser.With = 84;
BitloopsParser.Default = 85;
BitloopsParser.If = 86;
BitloopsParser.Throw = 87;
BitloopsParser.Delete = 88;
BitloopsParser.In = 89;
BitloopsParser.Try = 90;
BitloopsParser.As = 91;
BitloopsParser.From = 92;
BitloopsParser.ReadOnly = 93;
BitloopsParser.Async = 94;
BitloopsParser.Throws = 95;
BitloopsParser.ApplyRules = 96;
BitloopsParser.Extends = 97;
BitloopsParser.Const = 98;
BitloopsParser.RepoPort = 99;
BitloopsParser.Props = 100;
BitloopsParser.ReadModel = 101;
BitloopsParser.DTO = 102;
BitloopsParser.RESTController = 103;
BitloopsParser.GraphQLController = 104;
BitloopsParser.GRPCController = 105;
BitloopsParser.UseCase = 106;
BitloopsParser.ValueObject = 107;
BitloopsParser.AggregateRoot = 108;
BitloopsParser.Entity = 109;
BitloopsParser.DomainEvent = 110;
BitloopsParser.Service = 111;
BitloopsParser.Repository = 112;
BitloopsParser.Factory = 113;
BitloopsParser.DomainError = 114;
BitloopsParser.ApplicationError = 115;
BitloopsParser.DomainErrors = 116;
BitloopsParser.ApplicationErrors = 117;
BitloopsParser.OK = 118;
BitloopsParser.Errors = 119;
BitloopsParser.Config = 120;
BitloopsParser.PackagePort = 121;
BitloopsParser.VO = 122;
BitloopsParser.Rule = 123;
BitloopsParser.IsBrokenIf = 124;
BitloopsParser.Root = 125;
BitloopsParser.Constructor = 126;
BitloopsParser.Let = 127;
BitloopsParser.Private = 128;
BitloopsParser.Public = 129;
BitloopsParser.Protected = 130;
BitloopsParser.Static = 131;
BitloopsParser.Any = 132;
BitloopsParser.Double = 133;
BitloopsParser.Float = 134;
BitloopsParser.Int32 = 135;
BitloopsParser.Int64 = 136;
BitloopsParser.Uint32 = 137;
BitloopsParser.Uint64 = 138;
BitloopsParser.Sint32 = 139;
BitloopsParser.Sint64 = 140;
BitloopsParser.Fixed32 = 141;
BitloopsParser.Fixed64 = 142;
BitloopsParser.Sfixed32 = 143;
BitloopsParser.Sfixed64 = 144;
BitloopsParser.Boolean = 145;
BitloopsParser.String = 146;
BitloopsParser.Bytes = 147;
BitloopsParser.Timestamp = 148;
BitloopsParser.Struct = 149;
BitloopsParser.TypeAlias = 150;
BitloopsParser.Get = 151;
BitloopsParser.Set = 152;
BitloopsParser.Execute = 153;
BitloopsParser.Create = 154;
BitloopsParser.Namespace = 155;
BitloopsParser.Declare = 156;
BitloopsParser.JestTest = 157;
BitloopsParser.JestTestStatement = 158;
BitloopsParser.JestTestStatementList = 159;
BitloopsParser.JestTestFunctionBody = 160;
BitloopsParser.JestTestExecute = 161;
BitloopsParser.JestTestStructEvaluation = 162;
BitloopsParser.JestTestDTOEvaluation = 163;
BitloopsParser.JestTestEvaluation = 164;
BitloopsParser.JestTestReturnOkErrorType = 165;
BitloopsParser.JestTestExpression = 166;
BitloopsParser.JestTestConstDeclaration = 167;
BitloopsParser.JestTestMethodDefinitionList = 168;
BitloopsParser.JestTestCreateMethodDeclaration = 169;
BitloopsParser.JestTestPrivateMethodDeclaration = 170;
BitloopsParser.JestTestPublicMethodDeclaration = 171;
BitloopsParser.JestTestValueObjectDeclaration = 172;
BitloopsParser.JestTestEntityDeclaration = 173;
BitloopsParser.JestTestCondition = 174;
BitloopsParser.JestTestVariableDeclaration = 175;
BitloopsParser.JestTestThisDeclaration = 176;
BitloopsParser.JestTestIsInstanceOf = 177;
BitloopsParser.JestTestValueObjectEvaluation = 178;
BitloopsParser.JestTestEntityEvaluation = 179;
BitloopsParser.JestTestSingleExpression = 180;
BitloopsParser.JestTestGetClass = 181;
BitloopsParser.JestTestBuiltInFunction = 182;
BitloopsParser.JestTestBuiltInClass = 183;
BitloopsParser.JestTestBitloopsPrimaryType = 184;
BitloopsParser.UUIDv4 = 185;
BitloopsParser.Is = 186;
BitloopsParser.GetClass = 187;
BitloopsParser.ToString = 188;
BitloopsParser.At = 189;
BitloopsParser.Method = 190;
BitloopsParser.MethodGet = 191;
BitloopsParser.MethodPost = 192;
BitloopsParser.MethodPut = 193;
BitloopsParser.MethodPatch = 194;
BitloopsParser.MethodDelete = 195;
BitloopsParser.MethodOptions = 196;
BitloopsParser.GraphQLOperation = 197;
BitloopsParser.Input = 198;
BitloopsParser.OperationMutation = 199;
BitloopsParser.OperationQuery = 200;
BitloopsParser.OperationSubscription = 201;
BitloopsParser.ErrorClass = 202;
BitloopsParser.DTOIdentifier = 203;
BitloopsParser.ValueObjectIdentifier = 204;
BitloopsParser.EntityIdentifier = 205;
BitloopsParser.ErrorIdentifier = 206;
BitloopsParser.ControllerIdentifier = 207;
BitloopsParser.UseCaseIdentifier = 208;
BitloopsParser.PackagePortIdentifier = 209;
BitloopsParser.PropsIdentifier = 210;
BitloopsParser.ReadModelIdentifier = 211;
BitloopsParser.RuleIdentifier = 212;
BitloopsParser.RepoPortIdentifier = 213;
BitloopsParser.DomainErrorIdentifier = 214;
BitloopsParser.ValueObjectEvaluationIdentifier = 215;
BitloopsParser.UpperCaseIdentifier = 216;
BitloopsParser.Identifier = 217;
BitloopsParser.StringLiteral = 218;
BitloopsParser.BackTick = 219;
BitloopsParser.WhiteSpaces = 220;
BitloopsParser.LineTerminator = 221;
BitloopsParser.HtmlComment = 222;
BitloopsParser.CDataComment = 223;
BitloopsParser.UnexpectedCharacter = 224;
BitloopsParser.TemplateStringStartExpression = 225;
BitloopsParser.TemplateStringAtom = 226;
BitloopsParser.WS = 227;

BitloopsParser.RULE_initializer = 0;
BitloopsParser.RULE_bindingPattern = 1;
BitloopsParser.RULE_fieldList = 2;
BitloopsParser.RULE_evaluationFieldList = 3;
BitloopsParser.RULE_evaluationField = 4;
BitloopsParser.RULE_propFields = 5;
BitloopsParser.RULE_propsIdentifier = 6;
BitloopsParser.RULE_bitloopsIdentifiers = 7;
BitloopsParser.RULE_primitives = 8;
BitloopsParser.RULE_identifier = 9;
BitloopsParser.RULE_upperCaseIdentifier = 10;
BitloopsParser.RULE_struct = 11;
BitloopsParser.RULE_regularErrorTypeEvaluation = 12;
BitloopsParser.RULE_methodArguments = 13;
BitloopsParser.RULE_openParen = 14;
BitloopsParser.RULE_closeParen = 15;
BitloopsParser.RULE_regularIdentifier = 16;
BitloopsParser.RULE_regularStringEvaluation = 17;
BitloopsParser.RULE_regularIntegerEvaluation = 18;
BitloopsParser.RULE_regularDecimalEvaluation = 19;
BitloopsParser.RULE_regularBooleanEvaluation = 20;
BitloopsParser.RULE_regularStructEvaluation = 21;
BitloopsParser.RULE_regularDTOEvaluation = 22;
BitloopsParser.RULE_field = 23;
BitloopsParser.RULE_bitloopsPrimaryType = 24;
BitloopsParser.RULE_bitloopsBuiltInClass = 25;
BitloopsParser.RULE_predefinedType = 26;
BitloopsParser.RULE_typeName = 27;
BitloopsParser.RULE_methodDefinitionList = 28;
BitloopsParser.RULE_methodDefinition = 29;
BitloopsParser.RULE_typeQuery = 30;
BitloopsParser.RULE_typeQueryExpression = 31;
BitloopsParser.RULE_typeAnnotation = 32;
BitloopsParser.RULE_parameterList = 33;
BitloopsParser.RULE_requiredParameterList = 34;
BitloopsParser.RULE_parameter = 35;
BitloopsParser.RULE_optionalParameter = 36;
BitloopsParser.RULE_restParameter = 37;
BitloopsParser.RULE_requiredParameter = 38;
BitloopsParser.RULE_accessibilityModifier = 39;
BitloopsParser.RULE_identifierOrPattern = 40;
BitloopsParser.RULE_indexSignature = 41;
BitloopsParser.RULE_enumBody = 42;
BitloopsParser.RULE_enumMemberList = 43;
BitloopsParser.RULE_enumMember = 44;
BitloopsParser.RULE_namespaceDeclaration = 45;
BitloopsParser.RULE_namespaceName = 46;
BitloopsParser.RULE_importAliasDeclaration = 47;
BitloopsParser.RULE_decoratorList = 48;
BitloopsParser.RULE_decorator = 49;
BitloopsParser.RULE_decoratorMemberExpression = 50;
BitloopsParser.RULE_decoratorCallExpression = 51;
BitloopsParser.RULE_program = 52;
BitloopsParser.RULE_sourceElement = 53;
BitloopsParser.RULE_jestTestDeclaration = 54;
BitloopsParser.RULE_errorEvaluation = 55;
BitloopsParser.RULE_evaluation = 56;
BitloopsParser.RULE_condition = 57;
BitloopsParser.RULE_returnStatement = 58;
BitloopsParser.RULE_constDeclaration = 59;
BitloopsParser.RULE_variableDeclaration = 60;
BitloopsParser.RULE_statement = 61;
BitloopsParser.RULE_builtInFunction = 62;
BitloopsParser.RULE_applyRuleStatementRulesList = 63;
BitloopsParser.RULE_applyRulesRule = 64;
BitloopsParser.RULE_block = 65;
BitloopsParser.RULE_statementList = 66;
BitloopsParser.RULE_fromBlock = 67;
BitloopsParser.RULE_multipleImportStatement = 68;
BitloopsParser.RULE_variableDeclarationList = 69;
BitloopsParser.RULE_emptyStatement_ = 70;
BitloopsParser.RULE_expressionStatement = 71;
BitloopsParser.RULE_ifStatement = 72;
BitloopsParser.RULE_iterationStatement = 73;
BitloopsParser.RULE_varModifier = 74;
BitloopsParser.RULE_continueStatement = 75;
BitloopsParser.RULE_breakStatement = 76;
BitloopsParser.RULE_withStatement = 77;
BitloopsParser.RULE_switchStatement = 78;
BitloopsParser.RULE_caseBlock = 79;
BitloopsParser.RULE_caseClauses = 80;
BitloopsParser.RULE_caseClause = 81;
BitloopsParser.RULE_defaultClause = 82;
BitloopsParser.RULE_labelledStatement = 83;
BitloopsParser.RULE_throwStatement = 84;
BitloopsParser.RULE_tryStatement = 85;
BitloopsParser.RULE_catchProduction = 86;
BitloopsParser.RULE_finallyProduction = 87;
BitloopsParser.RULE_debuggerStatement = 88;
BitloopsParser.RULE_domainFieldDeclaration = 89;
BitloopsParser.RULE_isBrokenStatement = 90;
BitloopsParser.RULE_domainRuleBody = 91;
BitloopsParser.RULE_domainRuleDeclaration = 92;
BitloopsParser.RULE_aggregateDeclaration = 93;
BitloopsParser.RULE_domainConstDeclaration = 94;
BitloopsParser.RULE_entityDeclaration = 95;
BitloopsParser.RULE_entityBody = 96;
BitloopsParser.RULE_valueObjectDeclaration = 97;
BitloopsParser.RULE_domainConstDeclarationList = 98;
BitloopsParser.RULE_publicMethodDeclarationList = 99;
BitloopsParser.RULE_privateMethodDeclarationList = 100;
BitloopsParser.RULE_domainConstructorDeclaration = 101;
BitloopsParser.RULE_useCaseIdentifier = 102;
BitloopsParser.RULE_useCaseDeclaration = 103;
BitloopsParser.RULE_propsDeclaration = 104;
BitloopsParser.RULE_readModelDeclaration = 105;
BitloopsParser.RULE_repoPortDeclaration = 106;
BitloopsParser.RULE_repoPortIdentifier = 107;
BitloopsParser.RULE_aggregateRootIdentifier = 108;
BitloopsParser.RULE_repoExtendsList = 109;
BitloopsParser.RULE_repoPortMethodDefinitions = 110;
BitloopsParser.RULE_repoPortExtendableIdentifierList = 111;
BitloopsParser.RULE_repoPortExtendableIdentifier = 112;
BitloopsParser.RULE_dtoDeclaration = 113;
BitloopsParser.RULE_structDeclaration = 114;
BitloopsParser.RULE_dtoEvaluationIdentifier = 115;
BitloopsParser.RULE_dtoEvaluation = 116;
BitloopsParser.RULE_valueObjectEvaluation = 117;
BitloopsParser.RULE_domainEvaluationInput = 118;
BitloopsParser.RULE_entityEvaluation = 119;
BitloopsParser.RULE_structEvaluationIdentifier = 120;
BitloopsParser.RULE_structEvaluation = 121;
BitloopsParser.RULE_builtInClassEvaluation = 122;
BitloopsParser.RULE_propsEvaluation = 123;
BitloopsParser.RULE_domainErrorDeclaration = 124;
BitloopsParser.RULE_applicationErrorDeclaration = 125;
BitloopsParser.RULE_domainErrorIdentifier = 126;
BitloopsParser.RULE_applicationErrorIdentifier = 127;
BitloopsParser.RULE_useCaseExecuteDeclaration = 128;
BitloopsParser.RULE_restControllerParameters = 129;
BitloopsParser.RULE_restControllerExecuteDeclaration = 130;
BitloopsParser.RULE_restControllerMethodDeclaration = 131;
BitloopsParser.RULE_httpMethod = 132;
BitloopsParser.RULE_controllerDeclaration = 133;
BitloopsParser.RULE_graphQLResolverOptions = 134;
BitloopsParser.RULE_graphQLOperationTypeAssignment = 135;
BitloopsParser.RULE_graphQLOperationInputTypeAssignment = 136;
BitloopsParser.RULE_graphQLResolverInputType = 137;
BitloopsParser.RULE_graphQLOperation = 138;
BitloopsParser.RULE_graphQLControllerExecuteDeclaration = 139;
BitloopsParser.RULE_graphQLControllerParameters = 140;
BitloopsParser.RULE_graphQLControllerReturnType = 141;
BitloopsParser.RULE_dtoIdentifier = 142;
BitloopsParser.RULE_dtoIdentifiers = 143;
BitloopsParser.RULE_errorIdentifier = 144;
BitloopsParser.RULE_errorIdentifiers = 145;
BitloopsParser.RULE_valueObjectIdentifier = 146;
BitloopsParser.RULE_entityIdentifier = 147;
BitloopsParser.RULE_domainRuleIdentifier = 148;
BitloopsParser.RULE_returnOkType = 149;
BitloopsParser.RULE_returnErrorsType = 150;
BitloopsParser.RULE_returnOkErrorType = 151;
BitloopsParser.RULE_packagePortIdentifier = 152;
BitloopsParser.RULE_packagePortDeclaration = 153;
BitloopsParser.RULE_methodDeclaration = 154;
BitloopsParser.RULE_privateMethodDeclaration = 155;
BitloopsParser.RULE_publicMethodDeclaration = 156;
BitloopsParser.RULE_returnPublicMethodType = 157;
BitloopsParser.RULE_returnPrivateMethodType = 158;
BitloopsParser.RULE_propertyMemberBase = 159;
BitloopsParser.RULE_indexMemberDeclaration = 160;
BitloopsParser.RULE_generatorMethod = 161;
BitloopsParser.RULE_generatorFunctionDeclaration = 162;
BitloopsParser.RULE_generatorBlock = 163;
BitloopsParser.RULE_generatorDefinition = 164;
BitloopsParser.RULE_iteratorBlock = 165;
BitloopsParser.RULE_iteratorDefinition = 166;
BitloopsParser.RULE_formalParameterList = 167;
BitloopsParser.RULE_formalParameterArg = 168;
BitloopsParser.RULE_lastFormalParameterArg = 169;
BitloopsParser.RULE_functionBody = 170;
BitloopsParser.RULE_arrayLiteral = 171;
BitloopsParser.RULE_elementList = 172;
BitloopsParser.RULE_objectLiteral = 173;
BitloopsParser.RULE_regularVariableEvaluationORliteralORexpression = 174;
BitloopsParser.RULE_propertyAssignment = 175;
BitloopsParser.RULE_getAccessor = 176;
BitloopsParser.RULE_setAccessor = 177;
BitloopsParser.RULE_propertyName = 178;
BitloopsParser.RULE_arguments = 179;
BitloopsParser.RULE_argumentList = 180;
BitloopsParser.RULE_argument = 181;
BitloopsParser.RULE_expressionSequence = 182;
BitloopsParser.RULE_functionExpressionDeclaration = 183;
BitloopsParser.RULE_expression = 184;
BitloopsParser.RULE_asExpression = 185;
BitloopsParser.RULE_arrowFunctionDeclaration = 186;
BitloopsParser.RULE_arrowFunctionParameters = 187;
BitloopsParser.RULE_arrowFunctionBody = 188;
BitloopsParser.RULE_assignmentOperator = 189;
BitloopsParser.RULE_literal = 190;
BitloopsParser.RULE_templateStringLiteral = 191;
BitloopsParser.RULE_templateStringAtom = 192;
BitloopsParser.RULE_numericLiteral = 193;
BitloopsParser.RULE_identifierName = 194;
BitloopsParser.RULE_identifierOrKeyWord = 195;
BitloopsParser.RULE_reservedWord = 196;
BitloopsParser.RULE_keyword = 197;
BitloopsParser.RULE_getter = 198;
BitloopsParser.RULE_setter = 199;
BitloopsParser.RULE_eos = 200;
BitloopsParser.RULE_isInstanceOf = 201;
BitloopsParser.RULE_classTypes = 202;

class InitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_initializer;
    }

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BindingPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_bindingPattern;
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	objectLiteral() {
	    return this.getTypedRuleContext(ObjectLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBindingPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBindingPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBindingPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_fieldList;
    }

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.SemiColon);
	    } else {
	        return this.getToken(BitloopsParser.SemiColon, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFieldList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFieldList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EvaluationFieldListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_evaluationFieldList;
    }

	evaluationField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EvaluationFieldContext);
	    } else {
	        return this.getTypedRuleContext(EvaluationFieldContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEvaluationFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEvaluationFieldList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEvaluationFieldList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EvaluationFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_evaluationField;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEvaluationField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEvaluationField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEvaluationField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropFieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propFields;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropFields(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropFields(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropsIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propsIdentifier;
    }

	PropsIdentifier() {
	    return this.getToken(BitloopsParser.PropsIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropsIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropsIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropsIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitloopsIdentifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_bitloopsIdentifiers;
    }

	UseCaseIdentifier() {
	    return this.getToken(BitloopsParser.UseCaseIdentifier, 0);
	};

	dtoIdentifier() {
	    return this.getTypedRuleContext(DtoIdentifierContext,0);
	};

	ControllerIdentifier() {
	    return this.getToken(BitloopsParser.ControllerIdentifier, 0);
	};

	ErrorIdentifier() {
	    return this.getToken(BitloopsParser.ErrorIdentifier, 0);
	};

	propsIdentifier() {
	    return this.getTypedRuleContext(PropsIdentifierContext,0);
	};

	ValueObjectIdentifier() {
	    return this.getToken(BitloopsParser.ValueObjectIdentifier, 0);
	};

	EntityIdentifier() {
	    return this.getToken(BitloopsParser.EntityIdentifier, 0);
	};

	RepoPortIdentifier() {
	    return this.getToken(BitloopsParser.RepoPortIdentifier, 0);
	};

	ReadModelIdentifier() {
	    return this.getToken(BitloopsParser.ReadModelIdentifier, 0);
	};

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBitloopsIdentifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBitloopsIdentifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBitloopsIdentifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitivesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_primitives;
    }

	Any() {
	    return this.getToken(BitloopsParser.Any, 0);
	};

	Double() {
	    return this.getToken(BitloopsParser.Double, 0);
	};

	Float() {
	    return this.getToken(BitloopsParser.Float, 0);
	};

	Int32() {
	    return this.getToken(BitloopsParser.Int32, 0);
	};

	Int64() {
	    return this.getToken(BitloopsParser.Int64, 0);
	};

	Uint32() {
	    return this.getToken(BitloopsParser.Uint32, 0);
	};

	Uint64() {
	    return this.getToken(BitloopsParser.Uint64, 0);
	};

	Sint32() {
	    return this.getToken(BitloopsParser.Sint32, 0);
	};

	Sint64() {
	    return this.getToken(BitloopsParser.Sint64, 0);
	};

	Fixed32() {
	    return this.getToken(BitloopsParser.Fixed32, 0);
	};

	Fixed64() {
	    return this.getToken(BitloopsParser.Fixed64, 0);
	};

	Sfixed32() {
	    return this.getToken(BitloopsParser.Sfixed32, 0);
	};

	Sfixed64() {
	    return this.getToken(BitloopsParser.Sfixed64, 0);
	};

	Boolean() {
	    return this.getToken(BitloopsParser.Boolean, 0);
	};

	String() {
	    return this.getToken(BitloopsParser.String, 0);
	};

	Bytes() {
	    return this.getToken(BitloopsParser.Bytes, 0);
	};

	Timestamp() {
	    return this.getToken(BitloopsParser.Timestamp, 0);
	};

	Void() {
	    return this.getToken(BitloopsParser.Void, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPrimitives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPrimitives(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPrimitives(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpperCaseIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_upperCaseIdentifier;
    }

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterUpperCaseIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitUpperCaseIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitUpperCaseIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_struct;
    }

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStruct(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStruct(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStruct(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularErrorTypeEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularErrorTypeEvaluation;
    }

	errorIdentifier() {
	    return this.getTypedRuleContext(ErrorIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularErrorTypeEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularErrorTypeEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularErrorTypeEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_methodArguments;
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	argumentList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentListContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentListContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMethodArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMethodArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMethodArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OpenParenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_openParen;
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterOpenParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitOpenParen(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitOpenParen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CloseParenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_closeParen;
    }

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCloseParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCloseParen(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCloseParen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularIdentifier;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DeleteKeywordContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Delete() {
	    return this.getToken(BitloopsParser.Delete, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDeleteKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDeleteKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDeleteKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.DeleteKeywordContext = DeleteKeywordContext;

class RegularDTOEvaluationStringContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	regularDTOEvaluation() {
	    return this.getTypedRuleContext(RegularDTOEvaluationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularDTOEvaluationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularDTOEvaluationString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularDTOEvaluationString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RegularDTOEvaluationStringContext = RegularDTOEvaluationStringContext;

class RegularStructEvaluationStringContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	regularStructEvaluation() {
	    return this.getTypedRuleContext(RegularStructEvaluationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularStructEvaluationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularStructEvaluationString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularStructEvaluationString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RegularStructEvaluationStringContext = RegularStructEvaluationStringContext;

class RegularErrorTypeEvaluationStringContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	regularErrorTypeEvaluation() {
	    return this.getTypedRuleContext(RegularErrorTypeEvaluationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularErrorTypeEvaluationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularErrorTypeEvaluationString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularErrorTypeEvaluationString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RegularErrorTypeEvaluationStringContext = RegularErrorTypeEvaluationStringContext;

class IdentifierStringContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifierString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifierString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifierString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.IdentifierStringContext = IdentifierStringContext;

class ExecuteExpressionContext extends RegularIdentifierContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Execute() {
	    return this.getToken(BitloopsParser.Execute, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterExecuteExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitExecuteExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitExecuteExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ExecuteExpressionContext = ExecuteExpressionContext;

class RegularStringEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularStringEvaluation;
    }

	StringLiteral() {
	    return this.getToken(BitloopsParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularStringEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularStringEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularStringEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularIntegerEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularIntegerEvaluation;
    }

	IntegerLiteral() {
	    return this.getToken(BitloopsParser.IntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularIntegerEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularIntegerEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularIntegerEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularDecimalEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularDecimalEvaluation;
    }

	DecimalLiteral() {
	    return this.getToken(BitloopsParser.DecimalLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularDecimalEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularDecimalEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularDecimalEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularBooleanEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularBooleanEvaluation;
    }

	BooleanLiteral() {
	    return this.getToken(BitloopsParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularBooleanEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularBooleanEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularBooleanEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularStructEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularStructEvaluation;
    }

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularStructEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularStructEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularStructEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularDTOEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularDTOEvaluation;
    }

	DTOIdentifier() {
	    return this.getToken(BitloopsParser.DTOIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularDTOEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularDTOEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularDTOEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_field;
    }

	bitloopsPrimaryType() {
	    return this.getTypedRuleContext(BitloopsPrimaryTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Optional() {
	    return this.getToken(BitloopsParser.Optional, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BitloopsPrimaryTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_bitloopsPrimaryType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PrimitivePrimTypeContext extends BitloopsPrimaryTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	primitives() {
	    return this.getTypedRuleContext(PrimitivesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPrimitivePrimType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPrimitivePrimType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPrimitivePrimType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PrimitivePrimTypeContext = PrimitivePrimTypeContext;

class ArrayBitloopsPrimTypeContext extends BitloopsPrimaryTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bitloopsPrimaryType() {
	    return this.getTypedRuleContext(BitloopsPrimaryTypeContext,0);
	};

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrayBitloopsPrimType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrayBitloopsPrimType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrayBitloopsPrimType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ArrayBitloopsPrimTypeContext = ArrayBitloopsPrimTypeContext;

class BitloopsBuiltInClassPrimTypeContext extends BitloopsPrimaryTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bitloopsBuiltInClass() {
	    return this.getTypedRuleContext(BitloopsBuiltInClassContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBitloopsBuiltInClassPrimType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBitloopsBuiltInClassPrimType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBitloopsBuiltInClassPrimType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.BitloopsBuiltInClassPrimTypeContext = BitloopsBuiltInClassPrimTypeContext;

class BitloopsIdentifierPrimTypeContext extends BitloopsPrimaryTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	bitloopsIdentifiers() {
	    return this.getTypedRuleContext(BitloopsIdentifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBitloopsIdentifierPrimType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBitloopsIdentifierPrimType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBitloopsIdentifierPrimType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.BitloopsIdentifierPrimTypeContext = BitloopsIdentifierPrimTypeContext;

class BitloopsBuiltInClassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_bitloopsBuiltInClass;
    }

	UUIDv4() {
	    return this.getToken(BitloopsParser.UUIDv4, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBitloopsBuiltInClass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBitloopsBuiltInClass(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBitloopsBuiltInClass(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_predefinedType;
    }

	Any() {
	    return this.getToken(BitloopsParser.Any, 0);
	};

	Int32() {
	    return this.getToken(BitloopsParser.Int32, 0);
	};

	Boolean() {
	    return this.getToken(BitloopsParser.Boolean, 0);
	};

	String() {
	    return this.getToken(BitloopsParser.String, 0);
	};

	Struct() {
	    return this.getToken(BitloopsParser.Struct, 0);
	};

	Void() {
	    return this.getToken(BitloopsParser.Void, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPredefinedType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPredefinedType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_typeName;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_methodDefinitionList;
    }

	methodDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(MethodDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMethodDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMethodDefinitionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMethodDefinitionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_methodDefinition;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMethodDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMethodDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMethodDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_typeQuery;
    }

	Typeof() {
	    return this.getToken(BitloopsParser.Typeof, 0);
	};

	typeQueryExpression() {
	    return this.getTypedRuleContext(TypeQueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTypeQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTypeQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTypeQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_typeQueryExpression;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Dot);
	    } else {
	        return this.getToken(BitloopsParser.Dot, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTypeQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTypeQueryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTypeQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_typeAnnotation;
    }

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	bitloopsPrimaryType() {
	    return this.getTypedRuleContext(BitloopsPrimaryTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTypeAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTypeAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTypeAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_parameterList;
    }

	restParameter() {
	    return this.getTypedRuleContext(RestParameterContext,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequiredParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_requiredParameterList;
    }

	requiredParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequiredParameterContext);
	    } else {
	        return this.getTypedRuleContext(RequiredParameterContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRequiredParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRequiredParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRequiredParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_parameter;
    }

	requiredParameter() {
	    return this.getTypedRuleContext(RequiredParameterContext,0);
	};

	optionalParameter() {
	    return this.getTypedRuleContext(OptionalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_optionalParameter;
    }

	identifierOrPattern() {
	    return this.getTypedRuleContext(IdentifierOrPatternContext,0);
	};

	decoratorList() {
	    return this.getTypedRuleContext(DecoratorListContext,0);
	};

	QuestionMark() {
	    return this.getToken(BitloopsParser.QuestionMark, 0);
	};

	initializer() {
	    return this.getTypedRuleContext(InitializerContext,0);
	};

	accessibilityModifier() {
	    return this.getTypedRuleContext(AccessibilityModifierContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterOptionalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitOptionalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitOptionalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_restParameter;
    }

	Ellipsis() {
	    return this.getToken(BitloopsParser.Ellipsis, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRestParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRestParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRestParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequiredParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_requiredParameter;
    }

	identifierOrPattern() {
	    return this.getTypedRuleContext(IdentifierOrPatternContext,0);
	};

	decoratorList() {
	    return this.getTypedRuleContext(DecoratorListContext,0);
	};

	accessibilityModifier() {
	    return this.getTypedRuleContext(AccessibilityModifierContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRequiredParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRequiredParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRequiredParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccessibilityModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_accessibilityModifier;
    }

	Public() {
	    return this.getToken(BitloopsParser.Public, 0);
	};

	Private() {
	    return this.getToken(BitloopsParser.Private, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAccessibilityModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAccessibilityModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAccessibilityModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierOrPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_identifierOrPattern;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	bindingPattern() {
	    return this.getTypedRuleContext(BindingPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifierOrPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifierOrPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifierOrPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_indexSignature;
    }

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	Int32() {
	    return this.getToken(BitloopsParser.Int32, 0);
	};

	String() {
	    return this.getToken(BitloopsParser.String, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIndexSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIndexSignature(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIndexSignature(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_enumBody;
    }

	enumMemberList() {
	    return this.getTypedRuleContext(EnumMemberListContext,0);
	};

	Comma() {
	    return this.getToken(BitloopsParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEnumBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEnumBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEnumBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumMemberListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_enumMemberList;
    }

	enumMember = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumMemberContext);
	    } else {
	        return this.getTypedRuleContext(EnumMemberContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEnumMemberList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEnumMemberList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEnumMemberList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_enumMember;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEnumMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEnumMember(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEnumMember(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_namespaceDeclaration;
    }

	Namespace() {
	    return this.getToken(BitloopsParser.Namespace, 0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterNamespaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitNamespaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitNamespaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NamespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_namespaceName;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Identifier);
	    } else {
	        return this.getToken(BitloopsParser.Identifier, i);
	    }
	};


	Dot = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Dot);
	    } else {
	        return this.getToken(BitloopsParser.Dot, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterNamespaceName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitNamespaceName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitNamespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportAliasDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_importAliasDeclaration;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	namespaceName() {
	    return this.getTypedRuleContext(NamespaceNameContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterImportAliasDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitImportAliasDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitImportAliasDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_decoratorList;
    }

	decorator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecoratorContext);
	    } else {
	        return this.getTypedRuleContext(DecoratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDecoratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDecoratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDecoratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_decorator;
    }

	At() {
	    return this.getToken(BitloopsParser.At, 0);
	};

	decoratorMemberExpression() {
	    return this.getTypedRuleContext(DecoratorMemberExpressionContext,0);
	};

	decoratorCallExpression() {
	    return this.getTypedRuleContext(DecoratorCallExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDecorator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDecorator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDecorator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorMemberExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_decoratorMemberExpression;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	decoratorMemberExpression() {
	    return this.getTypedRuleContext(DecoratorMemberExpressionContext,0);
	};

	Dot() {
	    return this.getToken(BitloopsParser.Dot, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDecoratorMemberExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDecoratorMemberExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDecoratorMemberExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorCallExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_decoratorCallExpression;
    }

	decoratorMemberExpression() {
	    return this.getTypedRuleContext(DecoratorMemberExpressionContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDecoratorCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDecoratorCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDecoratorCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_program;
    }

	sourceElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceElementContext);
	    } else {
	        return this.getTypedRuleContext(SourceElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_sourceElement;
    }

	dtoDeclaration() {
	    return this.getTypedRuleContext(DtoDeclarationContext,0);
	};

	domainErrorDeclaration() {
	    return this.getTypedRuleContext(DomainErrorDeclarationContext,0);
	};

	applicationErrorDeclaration() {
	    return this.getTypedRuleContext(ApplicationErrorDeclarationContext,0);
	};

	controllerDeclaration() {
	    return this.getTypedRuleContext(ControllerDeclarationContext,0);
	};

	jestTestDeclaration() {
	    return this.getTypedRuleContext(JestTestDeclarationContext,0);
	};

	propsDeclaration() {
	    return this.getTypedRuleContext(PropsDeclarationContext,0);
	};

	structDeclaration() {
	    return this.getTypedRuleContext(StructDeclarationContext,0);
	};

	useCaseDeclaration() {
	    return this.getTypedRuleContext(UseCaseDeclarationContext,0);
	};

	packagePortDeclaration() {
	    return this.getTypedRuleContext(PackagePortDeclarationContext,0);
	};

	valueObjectDeclaration() {
	    return this.getTypedRuleContext(ValueObjectDeclarationContext,0);
	};

	domainRuleDeclaration() {
	    return this.getTypedRuleContext(DomainRuleDeclarationContext,0);
	};

	entityDeclaration() {
	    return this.getTypedRuleContext(EntityDeclarationContext,0);
	};

	aggregateDeclaration() {
	    return this.getTypedRuleContext(AggregateDeclarationContext,0);
	};

	repoPortDeclaration() {
	    return this.getTypedRuleContext(RepoPortDeclarationContext,0);
	};

	readModelDeclaration() {
	    return this.getTypedRuleContext(ReadModelDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterSourceElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitSourceElement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitSourceElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JestTestDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_jestTestDeclaration;
    }

	JestTestFunctionBody() {
	    return this.getToken(BitloopsParser.JestTestFunctionBody, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.SemiColon);
	    } else {
	        return this.getToken(BitloopsParser.SemiColon, i);
	    }
	};


	JestTestStatementList() {
	    return this.getToken(BitloopsParser.JestTestStatementList, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	JestTestStatement() {
	    return this.getToken(BitloopsParser.JestTestStatement, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	JestTestStructEvaluation() {
	    return this.getToken(BitloopsParser.JestTestStructEvaluation, 0);
	};

	structEvaluation() {
	    return this.getTypedRuleContext(StructEvaluationContext,0);
	};

	JestTestDTOEvaluation() {
	    return this.getToken(BitloopsParser.JestTestDTOEvaluation, 0);
	};

	dtoEvaluation() {
	    return this.getTypedRuleContext(DtoEvaluationContext,0);
	};

	JestTestEvaluation() {
	    return this.getToken(BitloopsParser.JestTestEvaluation, 0);
	};

	evaluation() {
	    return this.getTypedRuleContext(EvaluationContext,0);
	};

	JestTestIsInstanceOf() {
	    return this.getToken(BitloopsParser.JestTestIsInstanceOf, 0);
	};

	isInstanceOf() {
	    return this.getTypedRuleContext(IsInstanceOfContext,0);
	};

	JestTest() {
	    return this.getToken(BitloopsParser.JestTest, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	restControllerParameters() {
	    return this.getTypedRuleContext(RestControllerParametersContext,0);
	};

	restControllerExecuteDeclaration() {
	    return this.getTypedRuleContext(RestControllerExecuteDeclarationContext,0);
	};

	restControllerMethodDeclaration() {
	    return this.getTypedRuleContext(RestControllerMethodDeclarationContext,0);
	};

	JestTestBuiltInClass() {
	    return this.getToken(BitloopsParser.JestTestBuiltInClass, 0);
	};

	builtInClassEvaluation() {
	    return this.getTypedRuleContext(BuiltInClassEvaluationContext,0);
	};

	JestTestReturnOkErrorType() {
	    return this.getToken(BitloopsParser.JestTestReturnOkErrorType, 0);
	};

	returnOkErrorType() {
	    return this.getTypedRuleContext(ReturnOkErrorTypeContext,0);
	};

	JestTestConstDeclaration() {
	    return this.getToken(BitloopsParser.JestTestConstDeclaration, 0);
	};

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	JestTestExpression() {
	    return this.getToken(BitloopsParser.JestTestExpression, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	JestTestMethodDefinitionList() {
	    return this.getToken(BitloopsParser.JestTestMethodDefinitionList, 0);
	};

	methodDefinitionList() {
	    return this.getTypedRuleContext(MethodDefinitionListContext,0);
	};

	JestTestCreateMethodDeclaration() {
	    return this.getToken(BitloopsParser.JestTestCreateMethodDeclaration, 0);
	};

	domainConstructorDeclaration() {
	    return this.getTypedRuleContext(DomainConstructorDeclarationContext,0);
	};

	JestTestPrivateMethodDeclaration() {
	    return this.getToken(BitloopsParser.JestTestPrivateMethodDeclaration, 0);
	};

	privateMethodDeclaration() {
	    return this.getTypedRuleContext(PrivateMethodDeclarationContext,0);
	};

	JestTestPublicMethodDeclaration() {
	    return this.getToken(BitloopsParser.JestTestPublicMethodDeclaration, 0);
	};

	publicMethodDeclaration() {
	    return this.getTypedRuleContext(PublicMethodDeclarationContext,0);
	};

	JestTestValueObjectDeclaration() {
	    return this.getToken(BitloopsParser.JestTestValueObjectDeclaration, 0);
	};

	valueObjectDeclaration() {
	    return this.getTypedRuleContext(ValueObjectDeclarationContext,0);
	};

	JestTestEntityDeclaration() {
	    return this.getToken(BitloopsParser.JestTestEntityDeclaration, 0);
	};

	entityDeclaration() {
	    return this.getTypedRuleContext(EntityDeclarationContext,0);
	};

	JestTestCondition() {
	    return this.getToken(BitloopsParser.JestTestCondition, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	JestTestVariableDeclaration() {
	    return this.getToken(BitloopsParser.JestTestVariableDeclaration, 0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	JestTestValueObjectEvaluation() {
	    return this.getToken(BitloopsParser.JestTestValueObjectEvaluation, 0);
	};

	valueObjectEvaluation() {
	    return this.getTypedRuleContext(ValueObjectEvaluationContext,0);
	};

	JestTestEntityEvaluation() {
	    return this.getToken(BitloopsParser.JestTestEntityEvaluation, 0);
	};

	entityEvaluation() {
	    return this.getTypedRuleContext(EntityEvaluationContext,0);
	};

	JestTestBuiltInFunction() {
	    return this.getToken(BitloopsParser.JestTestBuiltInFunction, 0);
	};

	builtInFunction() {
	    return this.getTypedRuleContext(BuiltInFunctionContext,0);
	};

	JestTestBitloopsPrimaryType() {
	    return this.getToken(BitloopsParser.JestTestBitloopsPrimaryType, 0);
	};

	bitloopsPrimaryType() {
	    return this.getTypedRuleContext(BitloopsPrimaryTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterJestTestDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitJestTestDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitJestTestDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_errorEvaluation;
    }

	ErrorIdentifier() {
	    return this.getToken(BitloopsParser.ErrorIdentifier, 0);
	};

	methodArguments() {
	    return this.getTypedRuleContext(MethodArgumentsContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterErrorEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitErrorEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitErrorEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_evaluation;
    }

	isInstanceOf() {
	    return this.getTypedRuleContext(IsInstanceOfContext,0);
	};

	builtInClassEvaluation() {
	    return this.getTypedRuleContext(BuiltInClassEvaluationContext,0);
	};

	errorEvaluation() {
	    return this.getTypedRuleContext(ErrorEvaluationContext,0);
	};

	dtoEvaluation() {
	    return this.getTypedRuleContext(DtoEvaluationContext,0);
	};

	valueObjectEvaluation() {
	    return this.getTypedRuleContext(ValueObjectEvaluationContext,0);
	};

	entityEvaluation() {
	    return this.getTypedRuleContext(EntityEvaluationContext,0);
	};

	propsEvaluation() {
	    return this.getTypedRuleContext(PropsEvaluationContext,0);
	};

	structEvaluation() {
	    return this.getTypedRuleContext(StructEvaluationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_condition;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnStatement;
    }

	Return() {
	    return this.getToken(BitloopsParser.Return, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_constDeclaration;
    }

	Const() {
	    return this.getToken(BitloopsParser.Const, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterConstDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitConstDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitConstDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_variableDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_statement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	propsDeclaration() {
	    return this.getTypedRuleContext(PropsDeclarationContext,0);
	};

	namespaceDeclaration() {
	    return this.getTypedRuleContext(NamespaceDeclarationContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	iterationStatement() {
	    return this.getTypedRuleContext(IterationStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	arrowFunctionDeclaration() {
	    return this.getTypedRuleContext(ArrowFunctionDeclarationContext,0);
	};

	builtInFunction() {
	    return this.getTypedRuleContext(BuiltInFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BuiltInFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_builtInFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ApplyRulesStatementContext extends BuiltInFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ApplyRules() {
	    return this.getToken(BitloopsParser.ApplyRules, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	applyRuleStatementRulesList() {
	    return this.getTypedRuleContext(ApplyRuleStatementRulesListContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterApplyRulesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitApplyRulesStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitApplyRulesStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ApplyRulesStatementContext = ApplyRulesStatementContext;

class ApplyRuleStatementRulesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_applyRuleStatementRulesList;
    }

	applyRulesRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ApplyRulesRuleContext);
	    } else {
	        return this.getTypedRuleContext(ApplyRulesRuleContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterApplyRuleStatementRulesList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitApplyRuleStatementRulesList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitApplyRuleStatementRulesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ApplyRulesRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_applyRulesRule;
    }

	domainRuleIdentifier() {
	    return this.getTypedRuleContext(DomainRuleIdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterApplyRulesRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitApplyRulesRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitApplyRulesRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_block;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_statementList;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStatementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_fromBlock;
    }

	From() {
	    return this.getToken(BitloopsParser.From, 0);
	};

	StringLiteral() {
	    return this.getToken(BitloopsParser.StringLiteral, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Multiply() {
	    return this.getToken(BitloopsParser.Multiply, 0);
	};

	multipleImportStatement() {
	    return this.getTypedRuleContext(MultipleImportStatementContext,0);
	};

	As() {
	    return this.getToken(BitloopsParser.As, 0);
	};

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFromBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFromBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFromBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultipleImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_multipleImportStatement;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	identifierName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierNameContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierNameContext,i);
	    }
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMultipleImportStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMultipleImportStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMultipleImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_variableDeclarationList;
    }

	variableDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterVariableDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitVariableDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitVariableDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_emptyStatement_;
    }

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEmptyStatement_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_expressionStatement;
    }

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_ifStatement;
    }

	If() {
	    return this.getToken(BitloopsParser.If, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	Else() {
	    return this.getToken(BitloopsParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIfStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_iterationStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DoStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Do() {
	    return this.getToken(BitloopsParser.Do, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	While() {
	    return this.getToken(BitloopsParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.DoStatementContext = DoStatementContext;

class ForVarStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(BitloopsParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclarationList() {
	    return this.getTypedRuleContext(VariableDeclarationListContext,0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.SemiColon);
	    } else {
	        return this.getToken(BitloopsParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterForVarStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitForVarStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitForVarStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ForVarStatementContext = ForVarStatementContext;

class ForVarInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(BitloopsParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	varModifier() {
	    return this.getTypedRuleContext(VarModifierContext,0);
	};

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	In() {
	    return this.getToken(BitloopsParser.In, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterForVarInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitForVarInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitForVarInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ForVarInStatementContext = ForVarInStatementContext;

class WhileStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	While() {
	    return this.getToken(BitloopsParser.While, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.WhileStatementContext = WhileStatementContext;

class ForStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(BitloopsParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	SemiColon = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.SemiColon);
	    } else {
	        return this.getToken(BitloopsParser.SemiColon, i);
	    }
	};


	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	expressionSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionSequenceContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionSequenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ForStatementContext = ForStatementContext;

class ForInStatementContext extends IterationStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	For() {
	    return this.getToken(BitloopsParser.For, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	In() {
	    return this.getToken(BitloopsParser.In, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterForInStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitForInStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitForInStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ForInStatementContext = ForInStatementContext;

class VarModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_varModifier;
    }

	Var() {
	    return this.getToken(BitloopsParser.Var, 0);
	};

	Let() {
	    return this.getToken(BitloopsParser.Let, 0);
	};

	Const() {
	    return this.getToken(BitloopsParser.Const, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterVarModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitVarModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitVarModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_continueStatement;
    }

	Continue() {
	    return this.getToken(BitloopsParser.Continue, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_breakStatement;
    }

	Break() {
	    return this.getToken(BitloopsParser.Break, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_withStatement;
    }

	With() {
	    return this.getToken(BitloopsParser.With, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitWithStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitWithStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_switchStatement;
    }

	Switch() {
	    return this.getToken(BitloopsParser.Switch, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	condition() {
	    return this.getTypedRuleContext(ConditionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	caseBlock() {
	    return this.getTypedRuleContext(CaseBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_caseBlock;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	defaultClause() {
	    return this.getTypedRuleContext(DefaultClauseContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	caseClauses = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClausesContext);
	    } else {
	        return this.getTypedRuleContext(CaseClausesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCaseBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCaseBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCaseBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_caseClauses;
    }

	caseClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseClauseContext);
	    } else {
	        return this.getTypedRuleContext(CaseClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCaseClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCaseClauses(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCaseClauses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_caseClause;
    }

	Case() {
	    return this.getToken(BitloopsParser.Case, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCaseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCaseClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCaseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_defaultClause;
    }

	Default() {
	    return this.getToken(BitloopsParser.Default, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDefaultClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDefaultClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDefaultClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_labelledStatement;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLabelledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLabelledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_throwStatement;
    }

	Throw() {
	    return this.getToken(BitloopsParser.Throw, 0);
	};

	expressionSequence() {
	    return this.getTypedRuleContext(ExpressionSequenceContext,0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_tryStatement;
    }

	Try() {
	    return this.getToken(BitloopsParser.Try, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catchProduction() {
	    return this.getTypedRuleContext(CatchProductionContext,0);
	};

	finallyProduction() {
	    return this.getTypedRuleContext(FinallyProductionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_catchProduction;
    }

	Catch() {
	    return this.getToken(BitloopsParser.Catch, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterCatchProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitCatchProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitCatchProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FinallyProductionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_finallyProduction;
    }

	Finally() {
	    return this.getToken(BitloopsParser.Finally, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFinallyProduction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFinallyProduction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFinallyProduction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DebuggerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_debuggerStatement;
    }

	Debugger() {
	    return this.getToken(BitloopsParser.Debugger, 0);
	};

	eos() {
	    return this.getTypedRuleContext(EosContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDebuggerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDebuggerStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDebuggerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainFieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainFieldDeclaration;
    }

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainFieldDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainFieldDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsBrokenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_isBrokenStatement;
    }

	IsBrokenIf() {
	    return this.getToken(BitloopsParser.IsBrokenIf, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIsBrokenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIsBrokenStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIsBrokenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainRuleBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainRuleBody;
    }

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	isBrokenStatement() {
	    return this.getTypedRuleContext(IsBrokenStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainRuleBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainRuleBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainRuleBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainRuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainRuleDeclaration;
    }

	Rule() {
	    return this.getToken(BitloopsParser.Rule, 0);
	};

	domainRuleIdentifier() {
	    return this.getTypedRuleContext(DomainRuleIdentifierContext,0);
	};

	Throws() {
	    return this.getToken(BitloopsParser.Throws, 0);
	};

	ErrorIdentifier() {
	    return this.getToken(BitloopsParser.ErrorIdentifier, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	domainRuleBody() {
	    return this.getTypedRuleContext(DomainRuleBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainRuleDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainRuleDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainRuleDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_aggregateDeclaration;
    }

	Root() {
	    return this.getToken(BitloopsParser.Root, 0);
	};

	Entity() {
	    return this.getToken(BitloopsParser.Entity, 0);
	};

	entityIdentifier() {
	    return this.getTypedRuleContext(EntityIdentifierContext,0);
	};

	entityBody() {
	    return this.getTypedRuleContext(EntityBodyContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAggregateDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAggregateDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAggregateDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainConstDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainConstDeclaration;
    }

	constDeclaration() {
	    return this.getTypedRuleContext(ConstDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainConstDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainConstDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainConstDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_entityDeclaration;
    }

	Entity() {
	    return this.getToken(BitloopsParser.Entity, 0);
	};

	entityIdentifier() {
	    return this.getTypedRuleContext(EntityIdentifierContext,0);
	};

	entityBody() {
	    return this.getTypedRuleContext(EntityBodyContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEntityDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEntityDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEntityDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_entityBody;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	domainConstDeclarationList() {
	    return this.getTypedRuleContext(DomainConstDeclarationListContext,0);
	};

	domainConstructorDeclaration() {
	    return this.getTypedRuleContext(DomainConstructorDeclarationContext,0);
	};

	publicMethodDeclarationList() {
	    return this.getTypedRuleContext(PublicMethodDeclarationListContext,0);
	};

	privateMethodDeclarationList() {
	    return this.getTypedRuleContext(PrivateMethodDeclarationListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEntityBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEntityBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEntityBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueObjectDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_valueObjectDeclaration;
    }

	ValueObject() {
	    return this.getToken(BitloopsParser.ValueObject, 0);
	};

	valueObjectIdentifier() {
	    return this.getTypedRuleContext(ValueObjectIdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	domainConstDeclarationList() {
	    return this.getTypedRuleContext(DomainConstDeclarationListContext,0);
	};

	domainConstructorDeclaration() {
	    return this.getTypedRuleContext(DomainConstructorDeclarationContext,0);
	};

	privateMethodDeclarationList() {
	    return this.getTypedRuleContext(PrivateMethodDeclarationListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterValueObjectDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitValueObjectDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitValueObjectDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainConstDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainConstDeclarationList;
    }

	domainConstDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DomainConstDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(DomainConstDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainConstDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainConstDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainConstDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PublicMethodDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_publicMethodDeclarationList;
    }

	publicMethodDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PublicMethodDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(PublicMethodDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPublicMethodDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPublicMethodDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPublicMethodDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivateMethodDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_privateMethodDeclarationList;
    }

	privateMethodDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivateMethodDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(PrivateMethodDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPrivateMethodDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPrivateMethodDeclarationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPrivateMethodDeclarationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainConstructorDeclaration;
    }

	Constructor() {
	    return this.getToken(BitloopsParser.Constructor, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	returnOkErrorType() {
	    return this.getTypedRuleContext(ReturnOkErrorTypeContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseCaseIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_useCaseIdentifier;
    }

	UseCaseIdentifier() {
	    return this.getToken(BitloopsParser.UseCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterUseCaseIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitUseCaseIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitUseCaseIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseCaseDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_useCaseDeclaration;
    }

	UseCase() {
	    return this.getToken(BitloopsParser.UseCase, 0);
	};

	useCaseIdentifier() {
	    return this.getTypedRuleContext(UseCaseIdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	useCaseExecuteDeclaration() {
	    return this.getTypedRuleContext(UseCaseExecuteDeclarationContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterUseCaseDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitUseCaseDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitUseCaseDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropsDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propsDeclaration;
    }

	Props() {
	    return this.getToken(BitloopsParser.Props, 0);
	};

	PropsIdentifier() {
	    return this.getToken(BitloopsParser.PropsIdentifier, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropsDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropsDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropsDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReadModelDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_readModelDeclaration;
    }

	ReadModel() {
	    return this.getToken(BitloopsParser.ReadModel, 0);
	};

	ReadModelIdentifier() {
	    return this.getToken(BitloopsParser.ReadModelIdentifier, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReadModelDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReadModelDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReadModelDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoPortDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoPortDeclaration;
    }

	RepoPort() {
	    return this.getToken(BitloopsParser.RepoPort, 0);
	};

	repoPortIdentifier() {
	    return this.getTypedRuleContext(RepoPortIdentifierContext,0);
	};

	LessThan() {
	    return this.getToken(BitloopsParser.LessThan, 0);
	};

	ReadModelIdentifier() {
	    return this.getToken(BitloopsParser.ReadModelIdentifier, 0);
	};

	MoreThan() {
	    return this.getToken(BitloopsParser.MoreThan, 0);
	};

	repoExtendsList() {
	    return this.getTypedRuleContext(RepoExtendsListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	repoPortMethodDefinitions() {
	    return this.getTypedRuleContext(RepoPortMethodDefinitionsContext,0);
	};

	aggregateRootIdentifier() {
	    return this.getTypedRuleContext(AggregateRootIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoPortDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoPortDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoPortDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoPortIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoPortIdentifier;
    }

	RepoPortIdentifier() {
	    return this.getToken(BitloopsParser.RepoPortIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoPortIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoPortIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoPortIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AggregateRootIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_aggregateRootIdentifier;
    }

	EntityIdentifier() {
	    return this.getToken(BitloopsParser.EntityIdentifier, 0);
	};

	ReadModelIdentifier() {
	    return this.getToken(BitloopsParser.ReadModelIdentifier, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAggregateRootIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAggregateRootIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAggregateRootIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoExtendsListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoExtendsList;
    }

	Extends() {
	    return this.getToken(BitloopsParser.Extends, 0);
	};

	repoPortExtendableIdentifierList() {
	    return this.getTypedRuleContext(RepoPortExtendableIdentifierListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoExtendsList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoExtendsList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoExtendsList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoPortMethodDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoPortMethodDefinitions;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	methodDefinitionList() {
	    return this.getTypedRuleContext(MethodDefinitionListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoPortMethodDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoPortMethodDefinitions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoPortMethodDefinitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoPortExtendableIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoPortExtendableIdentifierList;
    }

	repoPortExtendableIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RepoPortExtendableIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(RepoPortExtendableIdentifierContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoPortExtendableIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoPortExtendableIdentifierList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoPortExtendableIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepoPortExtendableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_repoPortExtendableIdentifier;
    }

	RepoPortIdentifier() {
	    return this.getToken(BitloopsParser.RepoPortIdentifier, 0);
	};

	UpperCaseIdentifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.UpperCaseIdentifier);
	    } else {
	        return this.getToken(BitloopsParser.UpperCaseIdentifier, i);
	    }
	};


	LessThan() {
	    return this.getToken(BitloopsParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(BitloopsParser.MoreThan, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRepoPortExtendableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRepoPortExtendableIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRepoPortExtendableIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DtoDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_dtoDeclaration;
    }

	DTO() {
	    return this.getToken(BitloopsParser.DTO, 0);
	};

	DTOIdentifier() {
	    return this.getToken(BitloopsParser.DTOIdentifier, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDtoDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDtoDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDtoDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_structDeclaration;
    }

	Struct() {
	    return this.getToken(BitloopsParser.Struct, 0);
	};

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	fieldList() {
	    return this.getTypedRuleContext(FieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStructDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStructDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStructDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DtoEvaluationIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_dtoEvaluationIdentifier;
    }

	dtoIdentifier() {
	    return this.getTypedRuleContext(DtoIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDtoEvaluationIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDtoEvaluationIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDtoEvaluationIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DtoEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_dtoEvaluation;
    }

	dtoEvaluationIdentifier() {
	    return this.getTypedRuleContext(DtoEvaluationIdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDtoEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDtoEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDtoEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueObjectEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_valueObjectEvaluation;
    }

	valueObjectIdentifier() {
	    return this.getTypedRuleContext(ValueObjectIdentifierContext,0);
	};

	domainEvaluationInput() {
	    return this.getTypedRuleContext(DomainEvaluationInputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterValueObjectEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitValueObjectEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitValueObjectEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainEvaluationInputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainEvaluationInput;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DomainEvaluationInputRegularContext extends DomainEvaluationInputContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainEvaluationInputRegular(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainEvaluationInputRegular(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainEvaluationInputRegular(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.DomainEvaluationInputRegularContext = DomainEvaluationInputRegularContext;

class DomainEvaluationInputFieldListContext extends DomainEvaluationInputContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainEvaluationInputFieldList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainEvaluationInputFieldList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainEvaluationInputFieldList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.DomainEvaluationInputFieldListContext = DomainEvaluationInputFieldListContext;

class EntityEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_entityEvaluation;
    }

	entityIdentifier() {
	    return this.getTypedRuleContext(EntityIdentifierContext,0);
	};

	domainEvaluationInput() {
	    return this.getTypedRuleContext(DomainEvaluationInputContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEntityEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEntityEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEntityEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructEvaluationIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_structEvaluationIdentifier;
    }

	UpperCaseIdentifier() {
	    return this.getToken(BitloopsParser.UpperCaseIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStructEvaluationIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStructEvaluationIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStructEvaluationIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_structEvaluation;
    }

	structEvaluationIdentifier() {
	    return this.getTypedRuleContext(StructEvaluationIdentifierContext,0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStructEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStructEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStructEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BuiltInClassEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_builtInClassEvaluation;
    }

	bitloopsBuiltInClass() {
	    return this.getTypedRuleContext(BitloopsBuiltInClassContext,0);
	};

	methodArguments() {
	    return this.getTypedRuleContext(MethodArgumentsContext,0);
	};

	Dot() {
	    return this.getToken(BitloopsParser.Dot, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBuiltInClassEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBuiltInClassEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBuiltInClassEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropsEvaluationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propsEvaluation;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	propsIdentifier() {
	    return this.getTypedRuleContext(PropsIdentifierContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropsEvaluation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropsEvaluation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropsEvaluation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainErrorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainErrorDeclaration;
    }

	DomainError() {
	    return this.getToken(BitloopsParser.DomainError, 0);
	};

	domainErrorIdentifier() {
	    return this.getTypedRuleContext(DomainErrorIdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainErrorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainErrorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainErrorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ApplicationErrorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_applicationErrorDeclaration;
    }

	ApplicationError() {
	    return this.getToken(BitloopsParser.ApplicationError, 0);
	};

	applicationErrorIdentifier() {
	    return this.getTypedRuleContext(ApplicationErrorIdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	evaluationFieldList() {
	    return this.getTypedRuleContext(EvaluationFieldListContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterApplicationErrorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitApplicationErrorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitApplicationErrorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainErrorIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainErrorIdentifier;
    }

	DomainErrorIdentifier() {
	    return this.getToken(BitloopsParser.DomainErrorIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainErrorIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainErrorIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainErrorIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ApplicationErrorIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_applicationErrorIdentifier;
    }

	DomainErrorIdentifier() {
	    return this.getToken(BitloopsParser.DomainErrorIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterApplicationErrorIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitApplicationErrorIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitApplicationErrorIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseCaseExecuteDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_useCaseExecuteDeclaration;
    }

	Execute() {
	    return this.getToken(BitloopsParser.Execute, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	returnOkErrorType() {
	    return this.getTypedRuleContext(ReturnOkErrorTypeContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterUseCaseExecuteDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitUseCaseExecuteDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitUseCaseExecuteDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestControllerParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_restControllerParameters;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Identifier);
	    } else {
	        return this.getToken(BitloopsParser.Identifier, i);
	    }
	};


	Comma() {
	    return this.getToken(BitloopsParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRestControllerParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRestControllerParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRestControllerParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestControllerExecuteDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_restControllerExecuteDeclaration;
    }

	Execute() {
	    return this.getToken(BitloopsParser.Execute, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	restControllerParameters() {
	    return this.getTypedRuleContext(RestControllerParametersContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRestControllerExecuteDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRestControllerExecuteDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRestControllerExecuteDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestControllerMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_restControllerMethodDeclaration;
    }

	Method() {
	    return this.getToken(BitloopsParser.Method, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	httpMethod() {
	    return this.getTypedRuleContext(HttpMethodContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRestControllerMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRestControllerMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRestControllerMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HttpMethodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_httpMethod;
    }

	MethodGet() {
	    return this.getToken(BitloopsParser.MethodGet, 0);
	};

	MethodPut() {
	    return this.getToken(BitloopsParser.MethodPut, 0);
	};

	MethodPost() {
	    return this.getToken(BitloopsParser.MethodPost, 0);
	};

	MethodDelete() {
	    return this.getToken(BitloopsParser.MethodDelete, 0);
	};

	MethodPatch() {
	    return this.getToken(BitloopsParser.MethodPatch, 0);
	};

	MethodOptions() {
	    return this.getToken(BitloopsParser.MethodOptions, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterHttpMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitHttpMethod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitHttpMethod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ControllerDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_controllerDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RESTControllerDeclarationContext extends ControllerDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RESTController() {
	    return this.getToken(BitloopsParser.RESTController, 0);
	};

	ControllerIdentifier() {
	    return this.getToken(BitloopsParser.ControllerIdentifier, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	restControllerMethodDeclaration() {
	    return this.getTypedRuleContext(RestControllerMethodDeclarationContext,0);
	};

	restControllerExecuteDeclaration() {
	    return this.getTypedRuleContext(RestControllerExecuteDeclarationContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRESTControllerDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRESTControllerDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRESTControllerDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RESTControllerDeclarationContext = RESTControllerDeclarationContext;

class GraphQLControllerDeclarationContext extends ControllerDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GraphQLController() {
	    return this.getToken(BitloopsParser.GraphQLController, 0);
	};

	ControllerIdentifier() {
	    return this.getToken(BitloopsParser.ControllerIdentifier, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	graphQLResolverOptions() {
	    return this.getTypedRuleContext(GraphQLResolverOptionsContext,0);
	};

	graphQLControllerExecuteDeclaration() {
	    return this.getTypedRuleContext(GraphQLControllerExecuteDeclarationContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLControllerDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLControllerDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLControllerDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.GraphQLControllerDeclarationContext = GraphQLControllerDeclarationContext;

class GraphQLResolverOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLResolverOptions;
    }

	graphQLOperationTypeAssignment() {
	    return this.getTypedRuleContext(GraphQLOperationTypeAssignmentContext,0);
	};

	graphQLOperationInputTypeAssignment() {
	    return this.getTypedRuleContext(GraphQLOperationInputTypeAssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLResolverOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLResolverOptions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLResolverOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLOperationTypeAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLOperationTypeAssignment;
    }

	GraphQLOperation() {
	    return this.getToken(BitloopsParser.GraphQLOperation, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	graphQLOperation() {
	    return this.getTypedRuleContext(GraphQLOperationContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLOperationTypeAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLOperationTypeAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLOperationTypeAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLOperationInputTypeAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLOperationInputTypeAssignment;
    }

	Input() {
	    return this.getToken(BitloopsParser.Input, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	graphQLResolverInputType() {
	    return this.getTypedRuleContext(GraphQLResolverInputTypeContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLOperationInputTypeAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLOperationInputTypeAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLOperationInputTypeAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLResolverInputTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLResolverInputType;
    }

	DTOIdentifier() {
	    return this.getToken(BitloopsParser.DTOIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLResolverInputType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLResolverInputType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLResolverInputType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLOperation;
    }

	OperationMutation() {
	    return this.getToken(BitloopsParser.OperationMutation, 0);
	};

	OperationQuery() {
	    return this.getToken(BitloopsParser.OperationQuery, 0);
	};

	OperationSubscription() {
	    return this.getToken(BitloopsParser.OperationSubscription, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLOperation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLOperation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLControllerExecuteDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLControllerExecuteDeclaration;
    }

	Execute() {
	    return this.getToken(BitloopsParser.Execute, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	graphQLControllerParameters() {
	    return this.getTypedRuleContext(GraphQLControllerParametersContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	graphQLControllerReturnType() {
	    return this.getTypedRuleContext(GraphQLControllerReturnTypeContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLControllerExecuteDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLControllerExecuteDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLControllerExecuteDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLControllerParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLControllerParameters;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLControllerParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLControllerParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLControllerParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GraphQLControllerReturnTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_graphQLControllerReturnType;
    }

	DTOIdentifier() {
	    return this.getToken(BitloopsParser.DTOIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGraphQLControllerReturnType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGraphQLControllerReturnType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGraphQLControllerReturnType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DtoIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_dtoIdentifier;
    }

	DTOIdentifier() {
	    return this.getToken(BitloopsParser.DTOIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDtoIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDtoIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDtoIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DtoIdentifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_dtoIdentifiers;
    }

	dtoIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DtoIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(DtoIdentifierContext,i);
	    }
	};

	BitOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.BitOr);
	    } else {
	        return this.getToken(BitloopsParser.BitOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDtoIdentifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDtoIdentifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDtoIdentifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_errorIdentifier;
    }

	ErrorIdentifier() {
	    return this.getToken(BitloopsParser.ErrorIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterErrorIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitErrorIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitErrorIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ErrorIdentifiersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_errorIdentifiers;
    }

	errorIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ErrorIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(ErrorIdentifierContext,i);
	    }
	};

	BitOr = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.BitOr);
	    } else {
	        return this.getToken(BitloopsParser.BitOr, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterErrorIdentifiers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitErrorIdentifiers(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitErrorIdentifiers(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueObjectIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_valueObjectIdentifier;
    }

	ValueObjectIdentifier() {
	    return this.getToken(BitloopsParser.ValueObjectIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterValueObjectIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitValueObjectIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitValueObjectIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_entityIdentifier;
    }

	EntityIdentifier() {
	    return this.getToken(BitloopsParser.EntityIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEntityIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEntityIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEntityIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DomainRuleIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_domainRuleIdentifier;
    }

	RuleIdentifier() {
	    return this.getToken(BitloopsParser.RuleIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDomainRuleIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDomainRuleIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDomainRuleIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnOkTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnOkType;
    }

	OK() {
	    return this.getToken(BitloopsParser.OK, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	bitloopsPrimaryType() {
	    return this.getTypedRuleContext(BitloopsPrimaryTypeContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnOkType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnOkType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnOkType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnErrorsTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnErrorsType;
    }

	Errors() {
	    return this.getToken(BitloopsParser.Errors, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	errorIdentifiers() {
	    return this.getTypedRuleContext(ErrorIdentifiersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnErrorsType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnErrorsType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnErrorsType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnOkErrorTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnOkErrorType;
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	returnOkType() {
	    return this.getTypedRuleContext(ReturnOkTypeContext,0);
	};

	Comma() {
	    return this.getToken(BitloopsParser.Comma, 0);
	};

	returnErrorsType() {
	    return this.getTypedRuleContext(ReturnErrorsTypeContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnOkErrorType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnOkErrorType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnOkErrorType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackagePortIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_packagePortIdentifier;
    }

	PackagePortIdentifier() {
	    return this.getToken(BitloopsParser.PackagePortIdentifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPackagePortIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPackagePortIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPackagePortIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackagePortDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_packagePortDeclaration;
    }

	PackagePort() {
	    return this.getToken(BitloopsParser.PackagePort, 0);
	};

	packagePortIdentifier() {
	    return this.getTypedRuleContext(PackagePortIdentifierContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	methodDefinitionList() {
	    return this.getTypedRuleContext(MethodDefinitionListContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPackagePortDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPackagePortDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPackagePortDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_methodDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PublicMethodDeclarationExpressionContext extends MethodDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	publicMethodDeclaration() {
	    return this.getTypedRuleContext(PublicMethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPublicMethodDeclarationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPublicMethodDeclarationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPublicMethodDeclarationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PublicMethodDeclarationExpressionContext = PublicMethodDeclarationExpressionContext;

class PrivateMethodDeclarationExpressionContext extends MethodDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	privateMethodDeclaration() {
	    return this.getTypedRuleContext(PrivateMethodDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPrivateMethodDeclarationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPrivateMethodDeclarationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPrivateMethodDeclarationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PrivateMethodDeclarationExpressionContext = PrivateMethodDeclarationExpressionContext;

class PrivateMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_privateMethodDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	returnPrivateMethodType() {
	    return this.getTypedRuleContext(ReturnPrivateMethodTypeContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Private() {
	    return this.getToken(BitloopsParser.Private, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPrivateMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPrivateMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPrivateMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PublicMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_publicMethodDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	returnPublicMethodType() {
	    return this.getTypedRuleContext(ReturnPublicMethodTypeContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Public() {
	    return this.getToken(BitloopsParser.Public, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPublicMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPublicMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPublicMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnPublicMethodTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnPublicMethodType;
    }

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	returnOkErrorType() {
	    return this.getTypedRuleContext(ReturnOkErrorTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnPublicMethodType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnPublicMethodType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnPublicMethodType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnPrivateMethodTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_returnPrivateMethodType;
    }

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	returnOkErrorType() {
	    return this.getTypedRuleContext(ReturnOkErrorTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReturnPrivateMethodType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReturnPrivateMethodType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReturnPrivateMethodType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyMemberBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propertyMemberBase;
    }

	accessibilityModifier() {
	    return this.getTypedRuleContext(AccessibilityModifierContext,0);
	};

	Static() {
	    return this.getToken(BitloopsParser.Static, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertyMemberBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertyMemberBase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertyMemberBase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_indexMemberDeclaration;
    }

	indexSignature() {
	    return this.getTypedRuleContext(IndexSignatureContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIndexMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIndexMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIndexMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratorMethodContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_generatorMethod;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Multiply() {
	    return this.getToken(BitloopsParser.Multiply, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGeneratorMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGeneratorMethod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGeneratorMethod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratorFunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_generatorFunctionDeclaration;
    }

	Function_() {
	    return this.getToken(BitloopsParser.Function_, 0);
	};

	Multiply() {
	    return this.getToken(BitloopsParser.Multiply, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGeneratorFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGeneratorFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGeneratorFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratorBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_generatorBlock;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	generatorDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GeneratorDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(GeneratorDefinitionContext,i);
	    }
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGeneratorBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGeneratorBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGeneratorBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeneratorDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_generatorDefinition;
    }

	Multiply() {
	    return this.getToken(BitloopsParser.Multiply, 0);
	};

	iteratorDefinition() {
	    return this.getTypedRuleContext(IteratorDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGeneratorDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGeneratorDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGeneratorDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IteratorBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_iteratorBlock;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	iteratorDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IteratorDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(IteratorDefinitionContext,i);
	    }
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIteratorBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIteratorBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIteratorBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IteratorDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_iteratorDefinition;
    }

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIteratorDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIteratorDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIteratorDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_formalParameterList;
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	formalParameterArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterArgContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterArgContext,i);
	    }
	};

	lastFormalParameterArg() {
	    return this.getTypedRuleContext(LastFormalParameterArgContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_formalParameterArg;
    }

	identifierOrKeyWord() {
	    return this.getTypedRuleContext(IdentifierOrKeyWordContext,0);
	};

	decorator() {
	    return this.getTypedRuleContext(DecoratorContext,0);
	};

	accessibilityModifier() {
	    return this.getTypedRuleContext(AccessibilityModifierContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_lastFormalParameterArg;
    }

	Ellipsis() {
	    return this.getToken(BitloopsParser.Ellipsis, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLastFormalParameterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLastFormalParameterArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLastFormalParameterArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_functionBody;
    }

	statementList() {
	    return this.getTypedRuleContext(StatementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_arrayLiteral;
    }

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	elementList() {
	    return this.getTypedRuleContext(ElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrayLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrayLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrayLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_elementList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitElementList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObjectLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_objectLiteral;
    }

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	propertyAssignment = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyAssignmentContext);
	    } else {
	        return this.getTypedRuleContext(PropertyAssignmentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterObjectLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitObjectLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitObjectLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RegularVariableEvaluationORliteralORexpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_regularVariableEvaluationORliteralORexpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularVariableEvaluationORliteralORexpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularVariableEvaluationORliteralORexpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularVariableEvaluationORliteralORexpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propertyAssignment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	regularVariableEvaluationORliteralORexpression() {
	    return this.getTypedRuleContext(RegularVariableEvaluationORliteralORexpressionContext,0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PropertyExpressionAssignmentContext = PropertyExpressionAssignmentContext;

class ComputedPropertyExpressionAssignmentContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	regularVariableEvaluationORliteralORexpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RegularVariableEvaluationORliteralORexpressionContext);
	    } else {
	        return this.getTypedRuleContext(RegularVariableEvaluationORliteralORexpressionContext,i);
	    }
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	Colon() {
	    return this.getToken(BitloopsParser.Colon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterComputedPropertyExpressionAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitComputedPropertyExpressionAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitComputedPropertyExpressionAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ComputedPropertyExpressionAssignmentContext = ComputedPropertyExpressionAssignmentContext;

class PropertyShorthandContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifierOrKeyWord() {
	    return this.getTypedRuleContext(IdentifierOrKeyWordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertyShorthand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertyShorthand(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertyShorthand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PropertyShorthandContext = PropertyShorthandContext;

class PropertySetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setAccessor() {
	    return this.getTypedRuleContext(SetAccessorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertySetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertySetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertySetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PropertySetterContext = PropertySetterContext;

class PropertyGetterContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	getAccessor() {
	    return this.getTypedRuleContext(GetAccessorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertyGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertyGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertyGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.PropertyGetterContext = PropertyGetterContext;

class RestParameterInObjectContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	restParameter() {
	    return this.getTypedRuleContext(RestParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRestParameterInObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRestParameterInObject(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRestParameterInObject(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RestParameterInObjectContext = RestParameterInObjectContext;

class MethodPropertyContext extends PropertyAssignmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	generatorMethod() {
	    return this.getTypedRuleContext(GeneratorMethodContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMethodProperty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMethodProperty(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMethodProperty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.MethodPropertyContext = MethodPropertyContext;

class GetAccessorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_getAccessor;
    }

	getter() {
	    return this.getTypedRuleContext(GetterContext,0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGetAccessor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGetAccessor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGetAccessor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetAccessorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_setAccessor;
    }

	setter() {
	    return this.getTypedRuleContext(SetterContext,0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	bindingPattern() {
	    return this.getTypedRuleContext(BindingPatternContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterSetAccessor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitSetAccessor(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitSetAccessor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_propertyName;
    }

	identifierName() {
	    return this.getTypedRuleContext(IdentifierNameContext,0);
	};

	StringLiteral() {
	    return this.getToken(BitloopsParser.StringLiteral, 0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitPropertyName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitPropertyName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_arguments;
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	Comma() {
	    return this.getToken(BitloopsParser.Comma, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_argumentList;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_argument;
    }

	regularVariableEvaluationORliteralORexpression() {
	    return this.getTypedRuleContext(RegularVariableEvaluationORliteralORexpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_expressionSequence;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.Comma);
	    } else {
	        return this.getToken(BitloopsParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterExpressionSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitExpressionSequence(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitExpressionSequence(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionExpressionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_functionExpressionDeclaration;
    }

	Function_() {
	    return this.getToken(BitloopsParser.Function_, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterFunctionExpressionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitFunctionExpressionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitFunctionExpressionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ParenthesizedExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitParenthesizedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitParenthesizedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ParenthesizedExpressionContext = ParenthesizedExpressionContext;

class ToStringExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Dot() {
	    return this.getToken(BitloopsParser.Dot, 0);
	};

	ToString() {
	    return this.getToken(BitloopsParser.ToString, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterToStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitToStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitToStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ToStringExpressionContext = ToStringExpressionContext;

class AdditiveExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(BitloopsParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(BitloopsParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.AdditiveExpressionContext = AdditiveExpressionContext;

class RelationalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	LessThan() {
	    return this.getToken(BitloopsParser.LessThan, 0);
	};

	MoreThan() {
	    return this.getToken(BitloopsParser.MoreThan, 0);
	};

	LessThanEquals() {
	    return this.getToken(BitloopsParser.LessThanEquals, 0);
	};

	GreaterThanEquals() {
	    return this.getToken(BitloopsParser.GreaterThanEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RelationalExpressionContext = RelationalExpressionContext;

class LogicalAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(BitloopsParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLogicalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.LogicalAndExpressionContext = LogicalAndExpressionContext;

class LiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.LiteralExpressionContext = LiteralExpressionContext;

class LogicalOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(BitloopsParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLogicalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.LogicalOrExpressionContext = LogicalOrExpressionContext;

class ArrayLiteralExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	arrayLiteral() {
	    return this.getTypedRuleContext(ArrayLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrayLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrayLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrayLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ArrayLiteralExpressionContext = ArrayLiteralExpressionContext;

class MemberDotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Dot() {
	    return this.getToken(BitloopsParser.Dot, 0);
	};

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMemberDotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMemberDotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMemberDotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.MemberDotExpressionContext = MemberDotExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(BitloopsParser.Not, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitNotExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitNotExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.NotExpressionContext = NotExpressionContext;

class EvaluationExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	evaluation() {
	    return this.getTypedRuleContext(EvaluationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEvaluationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEvaluationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEvaluationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.EvaluationExpressionContext = EvaluationExpressionContext;

class IdentifierExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifierExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifierExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifierExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.IdentifierExpressionContext = IdentifierExpressionContext;

class ThisExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	This() {
	    return this.getToken(BitloopsParser.This, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitThisExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitThisExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.ThisExpressionContext = ThisExpressionContext;

class AssignmentExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Assign() {
	    return this.getToken(BitloopsParser.Assign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.AssignmentExpressionContext = AssignmentExpressionContext;

class MethodCallExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	methodArguments() {
	    return this.getTypedRuleContext(MethodArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMethodCallExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMethodCallExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMethodCallExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.MethodCallExpressionContext = MethodCallExpressionContext;

class LogicalXorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Xor() {
	    return this.getToken(BitloopsParser.Xor, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterLogicalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitLogicalXorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitLogicalXorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.LogicalXorExpressionContext = LogicalXorExpressionContext;

class GetClassExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	Dot() {
	    return this.getToken(BitloopsParser.Dot, 0);
	};

	GetClass() {
	    return this.getToken(BitloopsParser.GetClass, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGetClassExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGetClassExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGetClassExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.GetClassExpressionContext = GetClassExpressionContext;

class EqualityExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Equals_() {
	    return this.getToken(BitloopsParser.Equals_, 0);
	};

	NotEquals() {
	    return this.getToken(BitloopsParser.NotEquals, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.EqualityExpressionContext = EqualityExpressionContext;

class MultiplicativeExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	Multiply() {
	    return this.getToken(BitloopsParser.Multiply, 0);
	};

	Divide() {
	    return this.getToken(BitloopsParser.Divide, 0);
	};

	Modulus() {
	    return this.getToken(BitloopsParser.Modulus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

class AsExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_asExpression;
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	OpenBracket() {
	    return this.getToken(BitloopsParser.OpenBracket, 0);
	};

	CloseBracket() {
	    return this.getToken(BitloopsParser.CloseBracket, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAsExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAsExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_arrowFunctionDeclaration;
    }

	arrowFunctionParameters() {
	    return this.getTypedRuleContext(ArrowFunctionParametersContext,0);
	};

	ARROW() {
	    return this.getToken(BitloopsParser.ARROW, 0);
	};

	arrowFunctionBody() {
	    return this.getTypedRuleContext(ArrowFunctionBodyContext,0);
	};

	Async() {
	    return this.getToken(BitloopsParser.Async, 0);
	};

	typeAnnotation() {
	    return this.getTypedRuleContext(TypeAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrowFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrowFunctionDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrowFunctionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_arrowFunctionParameters;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	OpenParen() {
	    return this.getToken(BitloopsParser.OpenParen, 0);
	};

	CloseParen() {
	    return this.getToken(BitloopsParser.CloseParen, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrowFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrowFunctionParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrowFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrowFunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_arrowFunctionBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	OpenBrace() {
	    return this.getToken(BitloopsParser.OpenBrace, 0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	CloseBrace() {
	    return this.getToken(BitloopsParser.CloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterArrowFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitArrowFunctionBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitArrowFunctionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_assignmentOperator;
    }

	MultiplyAssign() {
	    return this.getToken(BitloopsParser.MultiplyAssign, 0);
	};

	DivideAssign() {
	    return this.getToken(BitloopsParser.DivideAssign, 0);
	};

	ModulusAssign() {
	    return this.getToken(BitloopsParser.ModulusAssign, 0);
	};

	PlusAssign() {
	    return this.getToken(BitloopsParser.PlusAssign, 0);
	};

	MinusAssign() {
	    return this.getToken(BitloopsParser.MinusAssign, 0);
	};

	LeftShiftArithmeticAssign() {
	    return this.getToken(BitloopsParser.LeftShiftArithmeticAssign, 0);
	};

	RightShiftArithmeticAssign() {
	    return this.getToken(BitloopsParser.RightShiftArithmeticAssign, 0);
	};

	RightShiftLogicalAssign() {
	    return this.getToken(BitloopsParser.RightShiftLogicalAssign, 0);
	};

	BitAndAssign() {
	    return this.getToken(BitloopsParser.BitAndAssign, 0);
	};

	BitXorAssign() {
	    return this.getToken(BitloopsParser.BitXorAssign, 0);
	};

	BitOrAssign() {
	    return this.getToken(BitloopsParser.BitOrAssign, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_literal;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TemplateStringLiteralLabelContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	templateStringLiteral() {
	    return this.getTypedRuleContext(TemplateStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTemplateStringLiteralLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTemplateStringLiteralLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTemplateStringLiteralLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.TemplateStringLiteralLabelContext = TemplateStringLiteralLabelContext;

class StringLiteralContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StringLiteral() {
	    return this.getToken(BitloopsParser.StringLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.StringLiteralContext = StringLiteralContext;

class RegularExpressionLiteralContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RegularExpressionLiteral() {
	    return this.getToken(BitloopsParser.RegularExpressionLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterRegularExpressionLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitRegularExpressionLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitRegularExpressionLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.RegularExpressionLiteralContext = RegularExpressionLiteralContext;

class BooleanLiteralContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BooleanLiteral() {
	    return this.getToken(BitloopsParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.BooleanLiteralContext = BooleanLiteralContext;

class NumericLiteralLabelContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterNumericLiteralLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitNumericLiteralLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitNumericLiteralLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.NumericLiteralLabelContext = NumericLiteralLabelContext;

class NullLiteralContext extends LiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NullLiteral() {
	    return this.getToken(BitloopsParser.NullLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.NullLiteralContext = NullLiteralContext;

class TemplateStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_templateStringLiteral;
    }

	BackTick = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(BitloopsParser.BackTick);
	    } else {
	        return this.getToken(BitloopsParser.BackTick, i);
	    }
	};


	templateStringAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateStringAtomContext);
	    } else {
	        return this.getTypedRuleContext(TemplateStringAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTemplateStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTemplateStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTemplateStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateStringAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_templateStringAtom;
    }

	TemplateStringAtom() {
	    return this.getToken(BitloopsParser.TemplateStringAtom, 0);
	};

	TemplateStringStartExpression() {
	    return this.getToken(BitloopsParser.TemplateStringStartExpression, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	TemplateCloseBrace() {
	    return this.getToken(BitloopsParser.TemplateCloseBrace, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterTemplateStringAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitTemplateStringAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitTemplateStringAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_numericLiteral;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DecimalLiteralContext extends NumericLiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DecimalLiteral() {
	    return this.getToken(BitloopsParser.DecimalLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitDecimalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.DecimalLiteralContext = DecimalLiteralContext;

class IntegerLiteralContext extends NumericLiteralContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IntegerLiteral() {
	    return this.getToken(BitloopsParser.IntegerLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIntegerLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

BitloopsParser.IntegerLiteralContext = IntegerLiteralContext;

class IdentifierNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_identifierName;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifierName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifierName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifierName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierOrKeyWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_identifierOrKeyWord;
    }

	Identifier() {
	    return this.getToken(BitloopsParser.Identifier, 0);
	};

	TypeAlias() {
	    return this.getToken(BitloopsParser.TypeAlias, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIdentifierOrKeyWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIdentifierOrKeyWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIdentifierOrKeyWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReservedWordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_reservedWord;
    }

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	NullLiteral() {
	    return this.getToken(BitloopsParser.NullLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(BitloopsParser.BooleanLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterReservedWord(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitReservedWord(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitReservedWord(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_keyword;
    }

	Break() {
	    return this.getToken(BitloopsParser.Break, 0);
	};

	Do() {
	    return this.getToken(BitloopsParser.Do, 0);
	};

	Instanceof() {
	    return this.getToken(BitloopsParser.Instanceof, 0);
	};

	Typeof() {
	    return this.getToken(BitloopsParser.Typeof, 0);
	};

	Case() {
	    return this.getToken(BitloopsParser.Case, 0);
	};

	Else() {
	    return this.getToken(BitloopsParser.Else, 0);
	};

	New() {
	    return this.getToken(BitloopsParser.New, 0);
	};

	Var() {
	    return this.getToken(BitloopsParser.Var, 0);
	};

	Catch() {
	    return this.getToken(BitloopsParser.Catch, 0);
	};

	Finally() {
	    return this.getToken(BitloopsParser.Finally, 0);
	};

	Return() {
	    return this.getToken(BitloopsParser.Return, 0);
	};

	Void() {
	    return this.getToken(BitloopsParser.Void, 0);
	};

	Continue() {
	    return this.getToken(BitloopsParser.Continue, 0);
	};

	For() {
	    return this.getToken(BitloopsParser.For, 0);
	};

	Switch() {
	    return this.getToken(BitloopsParser.Switch, 0);
	};

	While() {
	    return this.getToken(BitloopsParser.While, 0);
	};

	Debugger() {
	    return this.getToken(BitloopsParser.Debugger, 0);
	};

	Function_() {
	    return this.getToken(BitloopsParser.Function_, 0);
	};

	This() {
	    return this.getToken(BitloopsParser.This, 0);
	};

	With() {
	    return this.getToken(BitloopsParser.With, 0);
	};

	Default() {
	    return this.getToken(BitloopsParser.Default, 0);
	};

	If() {
	    return this.getToken(BitloopsParser.If, 0);
	};

	Throw() {
	    return this.getToken(BitloopsParser.Throw, 0);
	};

	Delete() {
	    return this.getToken(BitloopsParser.Delete, 0);
	};

	In() {
	    return this.getToken(BitloopsParser.In, 0);
	};

	Try() {
	    return this.getToken(BitloopsParser.Try, 0);
	};

	ReadOnly() {
	    return this.getToken(BitloopsParser.ReadOnly, 0);
	};

	Async() {
	    return this.getToken(BitloopsParser.Async, 0);
	};

	From() {
	    return this.getToken(BitloopsParser.From, 0);
	};

	UseCase() {
	    return this.getToken(BitloopsParser.UseCase, 0);
	};

	Extends() {
	    return this.getToken(BitloopsParser.Extends, 0);
	};

	Const() {
	    return this.getToken(BitloopsParser.Const, 0);
	};

	Let() {
	    return this.getToken(BitloopsParser.Let, 0);
	};

	Private() {
	    return this.getToken(BitloopsParser.Private, 0);
	};

	Public() {
	    return this.getToken(BitloopsParser.Public, 0);
	};

	Protected() {
	    return this.getToken(BitloopsParser.Protected, 0);
	};

	Static() {
	    return this.getToken(BitloopsParser.Static, 0);
	};

	Get() {
	    return this.getToken(BitloopsParser.Get, 0);
	};

	Set() {
	    return this.getToken(BitloopsParser.Set, 0);
	};

	TypeAlias() {
	    return this.getToken(BitloopsParser.TypeAlias, 0);
	};

	String() {
	    return this.getToken(BitloopsParser.String, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_getter;
    }

	Get() {
	    return this.getToken(BitloopsParser.Get, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterGetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitGetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitGetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_setter;
    }

	Set() {
	    return this.getToken(BitloopsParser.Set, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterSetter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitSetter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitSetter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EosContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_eos;
    }

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	EOF() {
	    return this.getToken(BitloopsParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterEos(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitEos(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitEos(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsInstanceOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_isInstanceOf;
    }

	regularIdentifier() {
	    return this.getTypedRuleContext(RegularIdentifierContext,0);
	};

	Is() {
	    return this.getToken(BitloopsParser.Is, 0);
	};

	classTypes() {
	    return this.getTypedRuleContext(ClassTypesContext,0);
	};

	SemiColon() {
	    return this.getToken(BitloopsParser.SemiColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterIsInstanceOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitIsInstanceOf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitIsInstanceOf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = BitloopsParser.RULE_classTypes;
    }

	ErrorClass() {
	    return this.getToken(BitloopsParser.ErrorClass, 0);
	};

	enterRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.enterClassTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof BitloopsParserListener ) {
	        listener.exitClassTypes(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof BitloopsParserVisitor ) {
	        return visitor.visitClassTypes(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




BitloopsParser.InitializerContext = InitializerContext; 
BitloopsParser.BindingPatternContext = BindingPatternContext; 
BitloopsParser.FieldListContext = FieldListContext; 
BitloopsParser.EvaluationFieldListContext = EvaluationFieldListContext; 
BitloopsParser.EvaluationFieldContext = EvaluationFieldContext; 
BitloopsParser.PropFieldsContext = PropFieldsContext; 
BitloopsParser.PropsIdentifierContext = PropsIdentifierContext; 
BitloopsParser.BitloopsIdentifiersContext = BitloopsIdentifiersContext; 
BitloopsParser.PrimitivesContext = PrimitivesContext; 
BitloopsParser.IdentifierContext = IdentifierContext; 
BitloopsParser.UpperCaseIdentifierContext = UpperCaseIdentifierContext; 
BitloopsParser.StructContext = StructContext; 
BitloopsParser.RegularErrorTypeEvaluationContext = RegularErrorTypeEvaluationContext; 
BitloopsParser.MethodArgumentsContext = MethodArgumentsContext; 
BitloopsParser.OpenParenContext = OpenParenContext; 
BitloopsParser.CloseParenContext = CloseParenContext; 
BitloopsParser.RegularIdentifierContext = RegularIdentifierContext; 
BitloopsParser.RegularStringEvaluationContext = RegularStringEvaluationContext; 
BitloopsParser.RegularIntegerEvaluationContext = RegularIntegerEvaluationContext; 
BitloopsParser.RegularDecimalEvaluationContext = RegularDecimalEvaluationContext; 
BitloopsParser.RegularBooleanEvaluationContext = RegularBooleanEvaluationContext; 
BitloopsParser.RegularStructEvaluationContext = RegularStructEvaluationContext; 
BitloopsParser.RegularDTOEvaluationContext = RegularDTOEvaluationContext; 
BitloopsParser.FieldContext = FieldContext; 
BitloopsParser.BitloopsPrimaryTypeContext = BitloopsPrimaryTypeContext; 
BitloopsParser.BitloopsBuiltInClassContext = BitloopsBuiltInClassContext; 
BitloopsParser.PredefinedTypeContext = PredefinedTypeContext; 
BitloopsParser.TypeNameContext = TypeNameContext; 
BitloopsParser.MethodDefinitionListContext = MethodDefinitionListContext; 
BitloopsParser.MethodDefinitionContext = MethodDefinitionContext; 
BitloopsParser.TypeQueryContext = TypeQueryContext; 
BitloopsParser.TypeQueryExpressionContext = TypeQueryExpressionContext; 
BitloopsParser.TypeAnnotationContext = TypeAnnotationContext; 
BitloopsParser.ParameterListContext = ParameterListContext; 
BitloopsParser.RequiredParameterListContext = RequiredParameterListContext; 
BitloopsParser.ParameterContext = ParameterContext; 
BitloopsParser.OptionalParameterContext = OptionalParameterContext; 
BitloopsParser.RestParameterContext = RestParameterContext; 
BitloopsParser.RequiredParameterContext = RequiredParameterContext; 
BitloopsParser.AccessibilityModifierContext = AccessibilityModifierContext; 
BitloopsParser.IdentifierOrPatternContext = IdentifierOrPatternContext; 
BitloopsParser.IndexSignatureContext = IndexSignatureContext; 
BitloopsParser.EnumBodyContext = EnumBodyContext; 
BitloopsParser.EnumMemberListContext = EnumMemberListContext; 
BitloopsParser.EnumMemberContext = EnumMemberContext; 
BitloopsParser.NamespaceDeclarationContext = NamespaceDeclarationContext; 
BitloopsParser.NamespaceNameContext = NamespaceNameContext; 
BitloopsParser.ImportAliasDeclarationContext = ImportAliasDeclarationContext; 
BitloopsParser.DecoratorListContext = DecoratorListContext; 
BitloopsParser.DecoratorContext = DecoratorContext; 
BitloopsParser.DecoratorMemberExpressionContext = DecoratorMemberExpressionContext; 
BitloopsParser.DecoratorCallExpressionContext = DecoratorCallExpressionContext; 
BitloopsParser.ProgramContext = ProgramContext; 
BitloopsParser.SourceElementContext = SourceElementContext; 
BitloopsParser.JestTestDeclarationContext = JestTestDeclarationContext; 
BitloopsParser.ErrorEvaluationContext = ErrorEvaluationContext; 
BitloopsParser.EvaluationContext = EvaluationContext; 
BitloopsParser.ConditionContext = ConditionContext; 
BitloopsParser.ReturnStatementContext = ReturnStatementContext; 
BitloopsParser.ConstDeclarationContext = ConstDeclarationContext; 
BitloopsParser.VariableDeclarationContext = VariableDeclarationContext; 
BitloopsParser.StatementContext = StatementContext; 
BitloopsParser.BuiltInFunctionContext = BuiltInFunctionContext; 
BitloopsParser.ApplyRuleStatementRulesListContext = ApplyRuleStatementRulesListContext; 
BitloopsParser.ApplyRulesRuleContext = ApplyRulesRuleContext; 
BitloopsParser.BlockContext = BlockContext; 
BitloopsParser.StatementListContext = StatementListContext; 
BitloopsParser.FromBlockContext = FromBlockContext; 
BitloopsParser.MultipleImportStatementContext = MultipleImportStatementContext; 
BitloopsParser.VariableDeclarationListContext = VariableDeclarationListContext; 
BitloopsParser.EmptyStatement_Context = EmptyStatement_Context; 
BitloopsParser.ExpressionStatementContext = ExpressionStatementContext; 
BitloopsParser.IfStatementContext = IfStatementContext; 
BitloopsParser.IterationStatementContext = IterationStatementContext; 
BitloopsParser.VarModifierContext = VarModifierContext; 
BitloopsParser.ContinueStatementContext = ContinueStatementContext; 
BitloopsParser.BreakStatementContext = BreakStatementContext; 
BitloopsParser.WithStatementContext = WithStatementContext; 
BitloopsParser.SwitchStatementContext = SwitchStatementContext; 
BitloopsParser.CaseBlockContext = CaseBlockContext; 
BitloopsParser.CaseClausesContext = CaseClausesContext; 
BitloopsParser.CaseClauseContext = CaseClauseContext; 
BitloopsParser.DefaultClauseContext = DefaultClauseContext; 
BitloopsParser.LabelledStatementContext = LabelledStatementContext; 
BitloopsParser.ThrowStatementContext = ThrowStatementContext; 
BitloopsParser.TryStatementContext = TryStatementContext; 
BitloopsParser.CatchProductionContext = CatchProductionContext; 
BitloopsParser.FinallyProductionContext = FinallyProductionContext; 
BitloopsParser.DebuggerStatementContext = DebuggerStatementContext; 
BitloopsParser.DomainFieldDeclarationContext = DomainFieldDeclarationContext; 
BitloopsParser.IsBrokenStatementContext = IsBrokenStatementContext; 
BitloopsParser.DomainRuleBodyContext = DomainRuleBodyContext; 
BitloopsParser.DomainRuleDeclarationContext = DomainRuleDeclarationContext; 
BitloopsParser.AggregateDeclarationContext = AggregateDeclarationContext; 
BitloopsParser.DomainConstDeclarationContext = DomainConstDeclarationContext; 
BitloopsParser.EntityDeclarationContext = EntityDeclarationContext; 
BitloopsParser.EntityBodyContext = EntityBodyContext; 
BitloopsParser.ValueObjectDeclarationContext = ValueObjectDeclarationContext; 
BitloopsParser.DomainConstDeclarationListContext = DomainConstDeclarationListContext; 
BitloopsParser.PublicMethodDeclarationListContext = PublicMethodDeclarationListContext; 
BitloopsParser.PrivateMethodDeclarationListContext = PrivateMethodDeclarationListContext; 
BitloopsParser.DomainConstructorDeclarationContext = DomainConstructorDeclarationContext; 
BitloopsParser.UseCaseIdentifierContext = UseCaseIdentifierContext; 
BitloopsParser.UseCaseDeclarationContext = UseCaseDeclarationContext; 
BitloopsParser.PropsDeclarationContext = PropsDeclarationContext; 
BitloopsParser.ReadModelDeclarationContext = ReadModelDeclarationContext; 
BitloopsParser.RepoPortDeclarationContext = RepoPortDeclarationContext; 
BitloopsParser.RepoPortIdentifierContext = RepoPortIdentifierContext; 
BitloopsParser.AggregateRootIdentifierContext = AggregateRootIdentifierContext; 
BitloopsParser.RepoExtendsListContext = RepoExtendsListContext; 
BitloopsParser.RepoPortMethodDefinitionsContext = RepoPortMethodDefinitionsContext; 
BitloopsParser.RepoPortExtendableIdentifierListContext = RepoPortExtendableIdentifierListContext; 
BitloopsParser.RepoPortExtendableIdentifierContext = RepoPortExtendableIdentifierContext; 
BitloopsParser.DtoDeclarationContext = DtoDeclarationContext; 
BitloopsParser.StructDeclarationContext = StructDeclarationContext; 
BitloopsParser.DtoEvaluationIdentifierContext = DtoEvaluationIdentifierContext; 
BitloopsParser.DtoEvaluationContext = DtoEvaluationContext; 
BitloopsParser.ValueObjectEvaluationContext = ValueObjectEvaluationContext; 
BitloopsParser.DomainEvaluationInputContext = DomainEvaluationInputContext; 
BitloopsParser.EntityEvaluationContext = EntityEvaluationContext; 
BitloopsParser.StructEvaluationIdentifierContext = StructEvaluationIdentifierContext; 
BitloopsParser.StructEvaluationContext = StructEvaluationContext; 
BitloopsParser.BuiltInClassEvaluationContext = BuiltInClassEvaluationContext; 
BitloopsParser.PropsEvaluationContext = PropsEvaluationContext; 
BitloopsParser.DomainErrorDeclarationContext = DomainErrorDeclarationContext; 
BitloopsParser.ApplicationErrorDeclarationContext = ApplicationErrorDeclarationContext; 
BitloopsParser.DomainErrorIdentifierContext = DomainErrorIdentifierContext; 
BitloopsParser.ApplicationErrorIdentifierContext = ApplicationErrorIdentifierContext; 
BitloopsParser.UseCaseExecuteDeclarationContext = UseCaseExecuteDeclarationContext; 
BitloopsParser.RestControllerParametersContext = RestControllerParametersContext; 
BitloopsParser.RestControllerExecuteDeclarationContext = RestControllerExecuteDeclarationContext; 
BitloopsParser.RestControllerMethodDeclarationContext = RestControllerMethodDeclarationContext; 
BitloopsParser.HttpMethodContext = HttpMethodContext; 
BitloopsParser.ControllerDeclarationContext = ControllerDeclarationContext; 
BitloopsParser.GraphQLResolverOptionsContext = GraphQLResolverOptionsContext; 
BitloopsParser.GraphQLOperationTypeAssignmentContext = GraphQLOperationTypeAssignmentContext; 
BitloopsParser.GraphQLOperationInputTypeAssignmentContext = GraphQLOperationInputTypeAssignmentContext; 
BitloopsParser.GraphQLResolverInputTypeContext = GraphQLResolverInputTypeContext; 
BitloopsParser.GraphQLOperationContext = GraphQLOperationContext; 
BitloopsParser.GraphQLControllerExecuteDeclarationContext = GraphQLControllerExecuteDeclarationContext; 
BitloopsParser.GraphQLControllerParametersContext = GraphQLControllerParametersContext; 
BitloopsParser.GraphQLControllerReturnTypeContext = GraphQLControllerReturnTypeContext; 
BitloopsParser.DtoIdentifierContext = DtoIdentifierContext; 
BitloopsParser.DtoIdentifiersContext = DtoIdentifiersContext; 
BitloopsParser.ErrorIdentifierContext = ErrorIdentifierContext; 
BitloopsParser.ErrorIdentifiersContext = ErrorIdentifiersContext; 
BitloopsParser.ValueObjectIdentifierContext = ValueObjectIdentifierContext; 
BitloopsParser.EntityIdentifierContext = EntityIdentifierContext; 
BitloopsParser.DomainRuleIdentifierContext = DomainRuleIdentifierContext; 
BitloopsParser.ReturnOkTypeContext = ReturnOkTypeContext; 
BitloopsParser.ReturnErrorsTypeContext = ReturnErrorsTypeContext; 
BitloopsParser.ReturnOkErrorTypeContext = ReturnOkErrorTypeContext; 
BitloopsParser.PackagePortIdentifierContext = PackagePortIdentifierContext; 
BitloopsParser.PackagePortDeclarationContext = PackagePortDeclarationContext; 
BitloopsParser.MethodDeclarationContext = MethodDeclarationContext; 
BitloopsParser.PrivateMethodDeclarationContext = PrivateMethodDeclarationContext; 
BitloopsParser.PublicMethodDeclarationContext = PublicMethodDeclarationContext; 
BitloopsParser.ReturnPublicMethodTypeContext = ReturnPublicMethodTypeContext; 
BitloopsParser.ReturnPrivateMethodTypeContext = ReturnPrivateMethodTypeContext; 
BitloopsParser.PropertyMemberBaseContext = PropertyMemberBaseContext; 
BitloopsParser.IndexMemberDeclarationContext = IndexMemberDeclarationContext; 
BitloopsParser.GeneratorMethodContext = GeneratorMethodContext; 
BitloopsParser.GeneratorFunctionDeclarationContext = GeneratorFunctionDeclarationContext; 
BitloopsParser.GeneratorBlockContext = GeneratorBlockContext; 
BitloopsParser.GeneratorDefinitionContext = GeneratorDefinitionContext; 
BitloopsParser.IteratorBlockContext = IteratorBlockContext; 
BitloopsParser.IteratorDefinitionContext = IteratorDefinitionContext; 
BitloopsParser.FormalParameterListContext = FormalParameterListContext; 
BitloopsParser.FormalParameterArgContext = FormalParameterArgContext; 
BitloopsParser.LastFormalParameterArgContext = LastFormalParameterArgContext; 
BitloopsParser.FunctionBodyContext = FunctionBodyContext; 
BitloopsParser.ArrayLiteralContext = ArrayLiteralContext; 
BitloopsParser.ElementListContext = ElementListContext; 
BitloopsParser.ObjectLiteralContext = ObjectLiteralContext; 
BitloopsParser.RegularVariableEvaluationORliteralORexpressionContext = RegularVariableEvaluationORliteralORexpressionContext; 
BitloopsParser.PropertyAssignmentContext = PropertyAssignmentContext; 
BitloopsParser.GetAccessorContext = GetAccessorContext; 
BitloopsParser.SetAccessorContext = SetAccessorContext; 
BitloopsParser.PropertyNameContext = PropertyNameContext; 
BitloopsParser.ArgumentsContext = ArgumentsContext; 
BitloopsParser.ArgumentListContext = ArgumentListContext; 
BitloopsParser.ArgumentContext = ArgumentContext; 
BitloopsParser.ExpressionSequenceContext = ExpressionSequenceContext; 
BitloopsParser.FunctionExpressionDeclarationContext = FunctionExpressionDeclarationContext; 
BitloopsParser.ExpressionContext = ExpressionContext; 
BitloopsParser.AsExpressionContext = AsExpressionContext; 
BitloopsParser.ArrowFunctionDeclarationContext = ArrowFunctionDeclarationContext; 
BitloopsParser.ArrowFunctionParametersContext = ArrowFunctionParametersContext; 
BitloopsParser.ArrowFunctionBodyContext = ArrowFunctionBodyContext; 
BitloopsParser.AssignmentOperatorContext = AssignmentOperatorContext; 
BitloopsParser.LiteralContext = LiteralContext; 
BitloopsParser.TemplateStringLiteralContext = TemplateStringLiteralContext; 
BitloopsParser.TemplateStringAtomContext = TemplateStringAtomContext; 
BitloopsParser.NumericLiteralContext = NumericLiteralContext; 
BitloopsParser.IdentifierNameContext = IdentifierNameContext; 
BitloopsParser.IdentifierOrKeyWordContext = IdentifierOrKeyWordContext; 
BitloopsParser.ReservedWordContext = ReservedWordContext; 
BitloopsParser.KeywordContext = KeywordContext; 
BitloopsParser.GetterContext = GetterContext; 
BitloopsParser.SetterContext = SetterContext; 
BitloopsParser.EosContext = EosContext; 
BitloopsParser.IsInstanceOfContext = IsInstanceOfContext; 
BitloopsParser.ClassTypesContext = ClassTypesContext; 
